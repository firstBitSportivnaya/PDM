// @strict-types

#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
//@skip-warning
&НаКлиенте
Перем ИдентификаторЗамераЗапись;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	УстановитьВидимостьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьДоступностьСсылкиНастройкиРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераЗапись = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если Не ЗначениеЗаполнено(Токен) Тогда
		ТекстСообщения = НСтр("ru = 'Заполните токен бота'; en = 'Fill bot token'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Токен", , Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ШаблонСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru = '%1Запись'; en = '%2Save'",
		"Бот", "Bot");
	КлючеваяОперация = НСтр(ШаблонСтроки);
	
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераЗапись, КлючеваяОперация);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТокенИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Токен, "Токен");
		УстановитьПривилегированныйРежим(Ложь);
		Токен = ?(ЗначениеЗаполнено(Токен), Строка(УникальныйИдентификатор), "");
	КонецЕсли;
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		КлючЗадания = ПолучитьУникальныйИдентификаторТекущейНастройки();
		ИнтеграцииСервер.УдалитьЭкземплярРегламентногоЗадания(КлючЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	
	ТокенИзменен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьРегламентноеЗаданиеПриИзмененииНаСервере()
	
	РегламентноеЗадание = ПолучитьРегламентноеЗадание();
	Если РегламентноеЗадание = Неопределено Тогда
		СоздатьРегламентноеЗадание();
	Иначе
		ОбновитьОтключитьРегламентноеЗадание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Для настройки расписания выполнения задания необходимо записать справочник. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ИспользоватьРегламентноеЗаданиеПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		НастроитьДоступностьСсылкиНастройкиРасписания();
		
		ИспользоватьРегламентноеЗаданиеПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновленияРеглЗаданиемПриИзменении(Элемент)
	
	Элементы.ГруппаРегламентноеЗадание.Видимость = Объект.ОбновленияРеглЗаданием;
	Элементы.ГруппаДанныеРесурса.Видимость = Не Объект.ОбновленияРеглЗаданием;

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписаниеРегламентногоЗаданияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьРесурсБоту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.РесурсОбновления) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен ресурс'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.РесурсОбновления");
		Возврат;
	КонецЕсли;
	
	ПрисвоитьРесурсБотуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьРесурсБотуНаСервере()
	
	ИнтеграцияСБотамиСервер.ПрисвоитьРесурсОбновленияБоту(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредопределенными(Команда)
	ЗаполнитьПредопределеннымиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредопределеннымиНаСервере()
	
	Объект.ПредопределенныеОтветы.Очистить();
	
	ТаблицаОтветов = Справочники.Боты.ПолучитьПредопределенныеОтветыБота();
	Объект.ПредопределенныеОтветы.Загрузить(ТаблицаОтветов);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

//@skip-check module-unused-method
#Область СтандартныеПодсистемы

// Подключаемый выполнить команду.
// 
// Параметры:
//  Команда - КомандаФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);

КонецПроцедуры

// Подключаемый выполнить команду на сервере.
// 
// Параметры:
//  Контекст  - Структура
//  Результат - Структура
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);

КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#Область ОписанияОповещений

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЭтотОбъект.Записать();
		НастроитьДоступностьСсылкиНастройкиРасписания();
		СоздатьРегламентноеЗадание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписаниеРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Расписание;
		ОбновитьОтключитьРегламентноеЗадание();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Не Объект.Ссылка.Пустая() Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Токен");
		УстановитьПривилегированныйРежим(Ложь);

		Если ТипЗнч(Пароли) = Тип("Строка") Тогда
			Токен = ?(ЗначениеЗаполнено(Пароли), Строка(УникальныйИдентификатор), "");
		ИначеЕсли ТипЗнч(Пароли) = Тип("Структура") Тогда
			Токен = ?(ЗначениеЗаполнено(Пароли.Токен), Строка(УникальныйИдентификатор), "");
		Иначе
			Токен = Строка(УникальныйИдентификатор);
		КонецЕсли;
		
		Если Пользователи.РолиДоступны("ПолныеПрава, Администрирование") Тогда
		
			РегламентноеЗадание = ПолучитьРегламентноеЗадание();
			Если РегламентноеЗадание <> Неопределено Тогда
				РасписаниеРегламентногоЗадания	= РегламентноеЗадание.Расписание;
				ИспользоватьРегламентноеЗадание	= РегламентноеЗадание.Использование;
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаОтветов = Справочники.Боты.ПолучитьПредопределенныеОтветыБота();
		Для Каждого СтрокаОтвета Из Объект.ПредопределенныеОтветы Цикл
			СтрокаОписания = ТаблицаОтветов.Найти(СтрокаОтвета.ТипОтвета, "ТипОтвета");
			Если СтрокаОписания <> Неопределено Тогда
				СтрокаОтвета.Описание = СтрокаОписания.Описание;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Если Не Пользователи.РолиДоступны("ПолныеПрава, Администрирование") Тогда
		Элементы.ГруппаРегламентноеЗадание.Видимость = Ложь;		
	КонецЕсли;
	
	Элементы.ГруппаРегламентноеЗадание.Видимость = Объект.ОбновленияРеглЗаданием;
	Элементы.ГруппаДанныеРесурса.Видимость = Не Объект.ОбновленияРеглЗаданием;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьСсылкиНастройкиРасписания()
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = ИспользоватьРегламентноеЗадание;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтключитьРегламентноеЗадание()
	
	РегламентноеЗадание = ПолучитьРегламентноеЗадание();
	
	РегламентноеЗадание.Расписание		= РасписаниеРегламентногоЗадания;
	РегламентноеЗадание.Использование	= ИспользоватьРегламентноеЗадание;
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗадание()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючЗадания = ПолучитьУникальныйИдентификаторТекущейНастройки();
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Ключ", КлючЗадания);
	МассивРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	
	Если МассивРегламентныхЗаданий.Количество() Тогда
		РегламентноеЗадание = МассивРегламентныхЗаданий[0];
	Иначе
		РегламентноеЗадание = Неопределено;
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервере
Процедура СоздатьРегламентноеЗадание()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = ИнтеграцияСБотамиСлужебныйСервер.ДобавитьЭкземплярЗаданияВыполнениеЗаданияБота(Объект.Ссылка);
	РасписаниеРегламентногоЗадания	= РегламентноеЗадание.Расписание;
	ИспользоватьРегламентноеЗадание	= РегламентноеЗадание.Использование;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУникальныйИдентификаторТекущейНастройки()
	
	Возврат Строка(Объект.Ссылка.УникальныйИдентификатор());
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции