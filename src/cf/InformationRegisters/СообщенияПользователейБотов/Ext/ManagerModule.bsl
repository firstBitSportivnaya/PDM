// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавить запись.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - набор параметров Для записи. Ключи:
//   * Бот - СправочникСсылка.Боты - Бот
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь бота
//   * ИдентификаторСообщения - Число - Идентификатор сообщения
//   * Получатель - СправочникСсылка.Боты, СправочникСсылка.Пользователи - адресат сообщения пользователя
//   * ТипСообщения - ПеречислениеСсылка.ТипыСообщенийПользователяБота - Тип сообщения
//   * Текст - Строка - Сообщение пользователя
//   * ИдентификаторОтвета - Строка - Идентификатор сообщения ответа бота
//   * ПервоначальноеСообщение - Число - Идентификатор первоначального сообщения пользователя в переписке
Процедура ДобавитьЗапись(ПараметрыЗаписи) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗаписи);
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Изменить запись.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - набор параметров Для записи. Ключи:
//   * Бот - СправочникСсылка.Боты - Бот
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь бота
//   * ИдентификаторСообщения - Число - Идентификатор сообщения
//   * Получатель - СправочникСсылка.Боты, СправочникСсылка.Пользователи - адресат сообщения пользователя
//   * ТипСообщения - ПеречислениеСсылка.ТипыСообщенийПользователяБота - Тип сообщения
//   * Текст - Строка - Сообщение пользователя
//   * ИдентификаторОтвета - Строка - Идентификатор сообщения ответа бота
//   * ПервоначальноеСообщение - Число - Идентификатор первоначального сообщения пользователя в переписке
Процедура ИзменитьЗапись(ПараметрыЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.Бот) Тогда
		НаборЗаписей.Отбор.Бот.Установить(ПараметрыЗаписи.Бот);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.Пользователь) Тогда
		НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыЗаписи.Пользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ИдентификаторСообщения) Тогда
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ПараметрыЗаписи.ИдентификаторСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.Получатель) Тогда
		НаборЗаписей.Отбор.Получатель.Установить(ПараметрыЗаписи.Получатель);
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		Запись = НаборЗаписей[0];
		Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
			Запись[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Удалить запись.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - набор параметров Для записи. Ключи:
//   * Бот - СправочникСсылка.Боты - Бот
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь бота
//   * ИдентификаторСообщения - Число - Идентификатор сообщения
Процедура УдалитьЗаписи(ПараметрыЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОчиститьПоРасписанию() Экспорт
	
	КолДнейХранения = ОбщегоНазначенияУПОПовтИсп.ПолучитьКоличествоДнейХраненияСообщенийБотов();
	
	Если Не ЗначениеЗаполнено(КолДнейХранения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса()) - 86400 * КолДнейХранения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщенияПользователейБотов.Период КАК Период,
	|	СообщенияПользователейБотов.Бот КАК Бот,
	|	СообщенияПользователейБотов.Пользователь КАК Пользователь,
	|	СообщенияПользователейБотов.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияПользователейБотов.Получатель КАК Получатель
	|ИЗ
	|	РегистрСведений.СообщенияПользователейБотов КАК СообщенияПользователейБотов
	|ГДЕ
	|	СообщенияПользователейБотов.Период < &ДатаАктуальности";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Попытка
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.СообщенияПользователейБотов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Очистка сообщений пользователей ботов'");
		ЗаголовокОшибки = СтрШаблон("Не удалось удалить запись сообщений пользователей ботов");
		
		ТекстОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(ЗаголовокОшибки, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли