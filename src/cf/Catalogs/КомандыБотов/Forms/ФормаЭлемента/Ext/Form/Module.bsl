// @strict-types

#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
//@skip-warning
&НаКлиенте
Перем ИдентификаторЗамераЗапись;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераЗапись = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ШаблонСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    	"ru = '%1Запись'; en = '%2Save'",
    	"КомандыБота", "BotCommands");
	КлючеваяОперация = НСтр(ШаблонСтроки);
	
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераЗапись, КлючеваяОперация);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКомандамиПоУмолчанию(Команда)
	
	Объект.Команды.Очистить();
	
	НоваяКоманда = Объект.Команды.Добавить();
	НоваяКоманда.ИмяКоманды				= "/start";
	НоваяКоманда.Описание				= "Начинает работу с ботом";
	НоваяКоманда.ДоступнаВInlineMode	= Ложь;
	
	НоваяКоманда = Объект.Команды.Добавить();
	НоваяКоманда.ИмяКоманды				= "/settings";
	НоваяКоманда.Описание				= "Показывает настройки бота";
	НоваяКоманда.ДоступнаВInlineMode	= Ложь;
	
	НоваяКоманда = Объект.Команды.Добавить();
	НоваяКоманда.ИмяКоманды				= "/help";
	НоваяКоманда.Описание				= "Показывает справку по боту";
	НоваяКоманда.ДоступнаВInlineMode	= Истина;
	
	НоваяКоманда = Объект.Команды.Добавить();
	НоваяКоманда.ИмяКоманды				= "/notify_video_chat";
	НоваяКоманда.Описание				= "Добавляет чат в список чатов пользователя, по которым будут приходить оповещения о начале голосового чата";
	НоваяКоманда.ДоступнаВInlineMode	= Истина;
	
	НоваяКоманда = Объект.Команды.Добавить();
	НоваяКоманда.ИмяКоманды				= "/unnotify_video_chat";
	НоваяКоманда.Описание				= "Исключает чат из списка чатов пользователя, по которым будут приходить оповещения о начале голосового чата";
	НоваяКоманда.ДоступнаВInlineMode	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомандыБота(Команда)
	ОбновитьКомандыБотаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыБотаНаСервере()
	
	ИнтеграцияСБотамиСервер.ОбновитьКомандыБота(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

//@skip-check module-unused-method
#Область СтандартныеПодсистемы

// Подключаемый выполнить команду.
// 
// Параметры:
//  Команда - КомандаФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);

КонецПроцедуры

// Подключаемый выполнить команду на сервере.
// 
// Параметры:
//  Контекст  - Структура
//  Результат - Структура
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);

КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#КонецОбласти // СлужебныеПроцедурыИФункции