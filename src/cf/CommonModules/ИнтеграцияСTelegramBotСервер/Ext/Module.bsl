// @strict-types

#Область ПрограммныйИнтерфейс

// Получает URI-адрес API telegram бота.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  Метод - СправочникСсылка.МетодыИнтеграции - метод интеграции
// 
// Возвращаемое значение:
//  Строка - URI-адрес API бота
Функция ПолучитьURIАдрес(БотСсылка, Метод) Экспорт

	РеквизитыБота = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БотСсылка, "НастройкаИнтеграции, ИдентификаторБота");
	РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыБота.НастройкаИнтеграции, "Сервер");

	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(БотСсылка, "Токен");
	УстановитьПривилегированныйРежим(Ложь);

	Если ТипЗнч(Пароли) = Тип("Строка") Тогда
		Токен = ?(ЗначениеЗаполнено(Пароли), Пароли, "");
	ИначеЕсли ТипЗнч(Пароли) = Тип("Структура") Тогда
		Токен = ?(ЗначениеЗаполнено(Пароли.Токен), Пароли.Токен, "");
	Иначе
		Токен = "";
	КонецЕсли;

	ИмяМетода = Метод.Метод;

	ШаблонAPI = "%1/bot%2:%3%4";
	АдресURI = СтрШаблон(
		ШаблонAPI, РеквизитыНастройки.Сервер, РеквизитыБота.ИдентификаторБота, Токен, ИмяМетода);

	Возврат АдресURI;

КонецФункции

// Отправляет сообщение в чат бота.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  Получатель - СправочникСсылка.Пользователи, Строка - Получатель
//  ДанныеСообщения - Структура - Данные сообщения
//  ВложенностьКнопок - СправочникСсылка.ВложенностьКнопокМеню, Неопределено - Вложенность кнопок
// 
// Возвращаемое значение:
//  Неопределено, Структура - Данные отправленного ботом сообщения. Ключи:
//   * Идентификатор - Число - Идентификатор сообщения
//   * Дата - Дата - Дата сообщения
Функция ОтправитьСообщение(БотСсылка, Получатель, ДанныеСообщения, ВложенностьКнопок = Неопределено) Экспорт
	
	Если Не ДанныеСообщения.Свойство("ТипСообщения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСообщения = ДанныеСообщения.ТипСообщения;
	Содержимое = ДанныеСообщения.Содержимое;
	Метод = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьСоответствиеМетодаИнтеграцииТипуСообщения(ТипСообщения);
	
	СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
	СтруктураОтвета.МетодИнтеграции			= Метод;
	СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
	СтруктураОтвета.ИнтегрируемаяСистема	= БотСсылка.НастройкаИнтеграции.ИнтегрируемаяСистема;
	
	Попытка
		
		ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеСообщения);
		ДополнительныеПараметры.Удалить("Содержимое");
		ДополнительныеПараметры.Удалить("ТипСообщения");
	
		ПараметрыСообщения = ИнициализироватьПараметрыСообщения();
		ПараметрыСообщения.Бот						= БотСсылка;
		ПараметрыСообщения.ТипСообщения				= ТипСообщения;
		ПараметрыСообщения.Содержимое				= Содержимое;
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыСообщения.Пользователь			= Получатель;
			ПараметрыСообщения.Получатель			= ИнтеграцияСБотамиСлужебныйСервер.ПолучитьИдентификаторЧатаПользователя(
				БотСсылка, Получатель);
		Иначе
			ПараметрыСообщения.Пользователь			= ИнтеграцияСБотамиСлужебныйСервер.ПолучитьПользователяПоИдентификаторуЧата(
				БотСсылка, Получатель);
			ПараметрыСообщения.Получатель			= Получатель;
		КонецЕсли;
		ПараметрыСообщения.ДополнительныеПараметры	= ДополнительныеПараметры;
		ПараметрыСообщения.ВложенностьКнопок		= ВложенностьКнопок;
	
		ТелоЗапросаJSON = СформироватьСообщение(ПараметрыСообщения);
		
		URIАдрес = ПолучитьURIАдрес(БотСсылка, Метод);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("Json", ТелоЗапросаJSON);
		
		ОтветHTTP = КоннекторHTTP.Post(URIАдрес, , ДанныеЗапроса);
		
		СтруктураОтвета.ДлительностьВызова = ОтветHTTP.ВремяВыполнения / 1000; // переводим из миллисекунд
		СтруктураОтвета.ЗапросИсходящий	= ИнтеграцииСервер.ПолучитьЗапросТекстомИзСоответствияJSON(ТелоЗапросаJSON);
		СтруктураОтвета.ЗапросВходящий	= КоннекторHTTP.КакТекст(ОтветHTTP);
	
		Если ОтветHTTP.КодСостояния < 300 Тогда
			ОтветJSON = КоннекторHTTP.КакJSON(ОтветHTTP);
			Result = ОтветJSON.Получить("result");
			
			Результат = Новый Структура;
			Результат.Вставить("Идентификатор"	, Result.Получить("message_id"));
			Результат.Вставить("Дата"			, ИнтеграцииСервер.ДатаИзUnixTime(Result.Получить("date")));
			Результат.Вставить("Чат"			, Result.Получить("chat").Получить("id"));
		Иначе
			ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
				ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
			СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
			
			Результат = Неопределено;
		КонецЕсли;
	Исключение
		ТекстСообщения = "ru = 'Ошибка при отправке сообщения в Telegram Bot'";
		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		
		Результат = Неопределено;
	КонецПопытки;
	
	ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получить обновления.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Получить обновления,
//   см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуСообщенийПользователя
Функция ПолучитьОбновления(БотСсылка) Экспорт
	
	ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ПолучениеОбновлений;
	
	Метод = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьСоответствиеМетодаИнтеграцииТипуСообщения(ТипСообщения);
	
	СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
	СтруктураОтвета.МетодИнтеграции			= Метод;
	СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
	СтруктураОтвета.ИнтегрируемаяСистема	= БотСсылка.НастройкаИнтеграции.ИнтегрируемаяСистема;
	
	Попытка
		
		НомерНачальногоСообщения = ПолучитьНомерПоследнегоСообщенияОбновления(БотСсылка);
		ТелоСообщенияJSON = ПолучитьОбъектПолученияОбновленийПорционно(НомерНачальногоСообщения);
		
		URIАдрес = ПолучитьURIАдрес(БотСсылка, Метод);
		
		ОтветHTTP = КоннекторHTTP.Get(URIАдрес, ТелоСообщенияJSON);
		
		СтруктураОтвета.ДлительностьВызова = ОтветHTTP.ВремяВыполнения / 1000; // переводим из миллисекунд
		СтруктураОтвета.ЗапросИсходящий	= ИнтеграцииСервер.ПолучитьЗапросТекстомИзСоответствияJSON(ТелоСообщенияJSON);
		СтруктураОтвета.ЗапросВходящий	= КоннекторHTTP.КакТекст(ОтветHTTP);
		
		Если ОтветHTTP.КодСостояния < 300 Тогда
			
			СоответствиеJSON = КоннекторHTTP.КакJson(ОтветHTTP);
			ТаблицаСообщений = ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуСообщенийПользователя();
			
			РезультатОтправки = СоответствиеJSON.Получить("result");
			Для Каждого ЭлементРезультат Из РезультатОтправки Цикл
				НовоеСообщение = ТаблицаСообщений.Добавить();
				
				НовоеСообщение.ИдентификаторОбновления = ЭлементРезультат.Получить("update_id");
				
				my_chat_member = ЭлементРезультат.Получить("my_chat_member");
				Если my_chat_member <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				callback_query = ЭлементРезультат.Получить("callback_query");
				
				Если callback_query <> Неопределено Тогда
					ДанныеСообщения = callback_query.Получить("message");
				Иначе
					ДанныеСообщения = ЭлементРезультат.Получить("message");
				КонецЕсли;
				
				ДанныеЧата = ДанныеСообщения.Получить("chat");
				
				НовоеСообщение.ИдентификаторСообщения		= ДанныеСообщения.Получить("message_id");
				НовоеСообщение.Дата							= ИнтеграцииСервер.ДатаИзUnixTime(ДанныеСообщения.Получить("date"));
				НовоеСообщение.ИдентификаторЧата			= ДанныеЧата.Получить("id");
				НовоеСообщение.НаименованиеЧата				= ДанныеЧата.Получить("title");
				НовоеСообщение.ЭтоInlineMode				= ДанныеЧата.Получить("type") = "group" ИЛИ ДанныеЧата.Получить("type") = "supergroup";
				
				Если callback_query <> Неопределено Тогда
					ДанныеПользователя = callback_query.Получить("from");
					НовоеСообщение.ИдентификаторПользователя	= Формат(ДанныеПользователя.Получить("id"), "ЧГ=");
					
					НовоеСообщение.Текст				= callback_query.Получить("data");
					НовоеСообщение.СодержимоеСообщения	= "ОтправкаСообщения";
				Иначе
					ДанныеПользователя = ДанныеСообщения.Получить("from");
					НовоеСообщение.ИдентификаторПользователя	= Формат(ДанныеПользователя.Получить("id"), "ЧГ=");
					
					ЗаполнитьТипИСодержимоеСообщения(НовоеСообщение, ДанныеСообщения, БотСсылка.Тэг);
				КонецЕсли;
				
				reply_to_message = ДанныеСообщения.Получить("reply_to_message");
				Если reply_to_message <> Неопределено Тогда
					НовоеСообщение.ОтветНа_Идентификатор	= reply_to_message.Получить("message_id");
					НовоеСообщение.ОтветНа_Чат				= Формат(reply_to_message.Получить("chat").Получить("id"), "ЧГ=");
				Иначе
					НовоеСообщение.ОтветНа_Идентификатор	= 0;
					НовоеСообщение.ОтветНа_Чат				= "";
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаСообщений.Свернуть("ИдентификаторОбновления, ИдентификаторСообщения, ИдентификаторПользователя,
			|Дата, ИдентификаторЧата, НаименованиеЧата, ЭтоInlineMode, Текст, ОтветНа_Идентификатор, ОтветНа_Чат, СодержимоеСообщения");
			
			// Очищаем сообщения, типы которых не умеем обрабатывать
			Дикремент = ТаблицаСообщений.Количество() - 1;
			Пока Дикремент >= 0 Цикл
				Если Не ЗначениеЗаполнено(ТаблицаСообщений[Дикремент].СодержимоеСообщения) Тогда
					ТаблицаСообщений.Удалить(ТаблицаСообщений[Дикремент]);
				КонецЕсли;
				
				Дикремент = Дикремент - 1;
			КонецЦикла;
			
			Результат = ТаблицаСообщений;
			
		Иначе
			ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
				ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
			СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
			
			Результат = Неопределено;
		КонецЕсли;
	Исключение
		ТекстСообщения = "ru = 'Ошибка при получении обновлений из Telegram Bot'";
		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		
		Результат = Неопределено;
	КонецПопытки;
	
	ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Истина);
	
	Возврат Результат;
	
КонецФункции

// Отправляет описание ошибки от бота указанному пользователю.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  Получатель - СправочникСсылка.Пользователи - Получатель
//  ТекстОшибки - Строка - Текст ошибки
// 
// Возвращаемое значение:
//  Неопределено, Структура - Отправить полученную ошибку:
// * Идентификатор - Число - идентификатор сообщения
// * Дата - Дата - дата сообщения
Функция ОтправитьПолученнуюОшибку(БотСсылка, Получатель, ТекстОшибки) Экспорт
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ТипСообщения", Перечисления.ТипыСообщенийTelegramBot.ОтправкаСообщения);
	ДанныеСообщения.Вставить("Содержимое", ТекстОшибки);

	Результат = ОтправитьСообщение(БотСсылка, Получатель, ДанныеСообщения);
	
	Возврат Результат;
	
КонецФункции

// Обновляет команды бота.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  ТаблицаКоманд - ТаблицаЗначений - Таблица команд. Колонки:
//   * command - Строка - имя команды
//   * description - Строка - описание команды
Процедура ОбновитьКоманды(БотСсылка, ТаблицаКоманд) Экспорт
	
	ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ПрисвоитьКоманды;
	Метод = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьСоответствиеМетодаИнтеграцииТипуСообщения(ТипСообщения);
	
	СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
	СтруктураОтвета.МетодИнтеграции			= Метод;
	СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
	СтруктураОтвета.ИнтегрируемаяСистема	= БотСсылка.НастройкаИнтеграции.ИнтегрируемаяСистема;
	
	Попытка
		ТелоЗапросаJSON = ПолучитьОбъектОписанияКоманды(ТаблицаКоманд);
		
		URIАдрес = ПолучитьURIАдрес(БотСсылка, Метод);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("Json", ТелоЗапросаJSON);
		
		ОтветHTTP = КоннекторHTTP.Post(URIАдрес, , ДанныеЗапроса);
		
		СтруктураОтвета.ДлительностьВызова = ОтветHTTP.ВремяВыполнения / 1000; // переводим из миллисекунд
		СтруктураОтвета.ЗапросИсходящий	= ИнтеграцииСервер.ПолучитьЗапросТекстомИзСоответствияJSON(ТелоЗапросаJSON);
		СтруктураОтвета.ЗапросВходящий	= КоннекторHTTP.КакТекст(ОтветHTTP);
		
		Если ОтветHTTP.КодСостояния > 299 Тогда
			ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
				ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
			СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = "ru = 'Ошибка при обновлении команд Telegram Bot'";
		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
	КонецПопытки;
	
	ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Ложь);
	
КонецПроцедуры

// Присваивает URL, куда бот будет пересылать сообщения из чата.
//  см. https://core.telegram.org/bots/api#setwebhook
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
Процедура ПрисвоитьВебХук(БотСсылка) Экспорт
	
	ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ПрисвоитьВебХук;
	Метод = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьСоответствиеМетодаИнтеграцииТипуСообщения(ТипСообщения);
	
	СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
	СтруктураОтвета.МетодИнтеграции			= Метод;
	СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
	СтруктураОтвета.ИнтегрируемаяСистема	= БотСсылка.НастройкаИнтеграции.ИнтегрируемаяСистема;
	
	Попытка
		ДанныеСервиса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БотСсылка.РесурсОбновления.Владелец, "Код, Версия");
		
		АдресПубликации = ОбщегоНазначенияУПОПовтИсп.ПолучитьАдресПубликацииИнформационнойБазыДляБотов();
		ПолныйURLРесурса = СтрШаблон("%1/hs/%2/v%3%4", АдресПубликации,
			ДанныеСервиса.Код, ДанныеСервиса.Версия, БотСсылка.РесурсОбновления.Код);
			
		ТелоЗапросаJSON = Новый Соответствие;
		ТелоЗапросаJSON.Вставить("url", ПолныйURLРесурса);
		
//		InputFile = Новый Соответствие;
//		InputFile.Вставить("file_id", БотСсылка.ИдентификаторСертификата);
//		ТелоЗапросаJSON.Вставить("certificate", InputFile);
		
		//ТелоЗапросаJSON.Вставить("IP_address", "217.21.209.50");
		
		allowed_updates = Новый Массив;
		allowed_updates.Добавить("message");
		allowed_updates.Добавить("callback_query");
		ТелоЗапросаJSON.Вставить("allowed_updates", allowed_updates);
			
		URIАдрес = ПолучитьURIАдрес(БотСсылка, Метод);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("Json", ТелоЗапросаJSON);
		
		ОтветHTTP = КоннекторHTTP.Post(URIАдрес, , ДанныеЗапроса);
		
		СтруктураОтвета.ДлительностьВызова = ОтветHTTP.ВремяВыполнения / 1000; // переводим из миллисекунд
		СтруктураОтвета.ЗапросИсходящий	= ИнтеграцииСервер.ПолучитьЗапросТекстомИзСоответствияJSON(ТелоЗапросаJSON);
		СтруктураОтвета.ЗапросВходящий	= КоннекторHTTP.КакТекст(ОтветHTTP);
		
		Если ОтветHTTP.КодСостояния > 299 Тогда
			ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
				ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
			СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = "ru = 'Ошибка при обновлении команд Telegram Bot'";
		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
	КонецПопытки;
	
	ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Ложь);
	
КонецПроцедуры

// Сформировать сообщение telegram боту.
// 
// Параметры:
//  ПараметрыСообщения - Структура - см. ИнициализироватьПараметрыСообщения
// 
// Возвращаемое значение:
//  Соответствие - Соответствие параметров сообщения, готовое к конвертации в JSON
Функция СформироватьСообщение(ПараметрыСообщения) Экспорт

	СоответствиеДанных = Новый Соответствие;
	СоответствиеДанных.Вставить("chat_id", ПараметрыСообщения.Получатель);

	ТипСообщения = ПараметрыСообщения.ТипСообщения;

	Если ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.Авторизация Тогда
		ДополнитьСообщениеАвторизация(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.Клавиатура Тогда
		ДополнитьСообщениеМеню(СоответствиеДанных, ПараметрыСообщения, "keyboard");

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ПеречислениеКнопок Тогда
		ДополнитьСообщениеМеню(СоответствиеДанных, ПараметрыСообщения, "inline_keyboard");

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаСообщения Тогда
		ДополнитьСообщениеСообщение(СоответствиеДанных, ПараметрыСообщения);
	
	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.НачалоВидеоЧата Тогда
		ДополнитьСообщениеСообщение(СоответствиеДанных, ПараметрыСообщения);
	
	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.КонецВидеоЧата Тогда
		ДополнитьСообщениеСообщение(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаФото Тогда
		ДополнитьСообщениеФото(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаАудио Тогда
		ДополнитьСообщениеАудио(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаДокумента Тогда
		ДополнитьСообщениеДокумент(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаВидео Тогда
		ДополнитьСообщениеВидео(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаАнимации Тогда
		ДополнитьСообщениеАнимация(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаГолосовогоСообщения Тогда
		ДополнитьСообщениеГолосовоеСообщение(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаВидеоСообщения Тогда
		ДополнитьСообщениеВидеоСообщение(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаГруппыМедиаФайлов Тогда
		ДополнитьСообщениеГруппаМедиаФайлов(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаЛокации Тогда
		ДополнитьСообщениеЛокация(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаКонтакта Тогда
		ДополнитьСообщениеКонтакт(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаОпроса Тогда
		ДополнитьСообщениеОпрос(СоответствиеДанных, ПараметрыСообщения);

	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаКубика Тогда
		ДополнитьСообщениеКубик(СоответствиеДанных, ПараметрыСообщения);
	
	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ОтправкаСтикера Тогда
		ДополнитьСообщениеСтикер(СоответствиеДанных, ПараметрыСообщения);

	КонецЕсли;

	Возврат СоответствиеДанных;

КонецФункции

// Получает информацию о чате.
//
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот
//  ИдентификаторЧата - Число - Идентификатор чата
// 
// Возвращаемое значение:
//  Соответствие - Информация о чате
//
Функция ПолучитьИнформациюОЧате(БотСсылка, ИдентификаторЧата) Экспорт
	
	ТипСообщения = Перечисления.ТипыСообщенийTelegramBot.ИнформацияОЧате;
	Метод = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьСоответствиеМетодаИнтеграцииТипуСообщения(ТипСообщения);
	
	СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
	СтруктураОтвета.МетодИнтеграции			= Метод;
	СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
	СтруктураОтвета.ИнтегрируемаяСистема	= БотСсылка.НастройкаИнтеграции.ИнтегрируемаяСистема;
	
	Попытка
		URIАдрес = ПолучитьURIАдрес(БотСсылка, Метод);
		URIАдрес = URIАдрес + СтрШаблон("?chat_id=%1", Формат(ИдентификаторЧата, "ЧГ="));
		
		ОтветHTTP = КоннекторHTTP.Post(URIАдрес);
		
		СтруктураОтвета.ДлительностьВызова = ОтветHTTP.ВремяВыполнения / 1000; // переводим из миллисекунд
		СтруктураОтвета.ЗапросВходящий	= КоннекторHTTP.КакТекст(ОтветHTTP);
		
		Если ОтветHTTP.КодСостояния < 300 Тогда
			
			СоответствиеJSON = КоннекторHTTP.КакJson(ОтветHTTP);
			Результат = СоответствиеJSON.Получить("result");
			
		Иначе
			ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
				ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
			СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
			
			Результат = Неопределено;
		КонецЕсли;
	Исключение
		ТекстСообщения = "ru = 'Ошибка при получение информации о чате Telegram Bot'";
		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
	КонецПопытки;
	
	ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОбъектОписанияКоманды(ТаблицаКоманд)
	
	ТелоЗапросаJSON = Новый Соответствие;
	
	commands = Новый Массив;
	Для Каждого КомандаИмяОписание Из ТаблицаКоманд Цикл
		
		commandElement = Новый Соответствие;
		ИмяКомандыБезСлеша = ?(СтрНачинаетсяС(КомандаИмяОписание.ИмяКоманды, "/"),
			СтрЗаменить(КомандаИмяОписание.ИмяКоманды, "/", ""), КомандаИмяОписание.ИмяКоманды);
		commandElement.Вставить("command"		, ИмяКомандыБезСлеша);
		commandElement.Вставить("description"	, КомандаИмяОписание.Описание);
		
		commands.Добавить(commandElement);
		
	КонецЦикла;
	
	ТелоЗапросаJSON.Вставить("commands", commands);
	
	Возврат ТелоЗапросаJSON;
	
КонецФункции

Функция ПолучитьНомерПоследнегоСообщенияОбновления(БотСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бот", БотСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИдентификаторыОбновленийБотов.ИдентификаторОбновления КАК ИдентификаторОбновления
	|ИЗ
	|	РегистрСведений.ИдентификаторыОбновленийБотов КАК ИдентификаторыОбновленийБотов
	|ГДЕ
	|	ИдентификаторыОбновленийБотов.Бот = &Бот";
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		НомерПоследнегоСообщения = ВыборкаРезультатаЗапроса.ИдентификаторОбновления + 1;
	Иначе
		НомерПоследнегоСообщения = 0;
	КонецЕсли;
	
	Возврат НомерПоследнегоСообщения;
	
КонецФункции

Функция ПолучитьОбъектПолученияОбновленийПорционно(НомерНачальногоСообщения)
	
	ТелоЗапросаJSON = Новый Соответствие;
	
	Если ЗначениеЗаполнено(НомерНачальногоСообщения) Тогда
		ТелоЗапросаJSON.Вставить("offset"	, Формат(НомерНачальногоСообщения, "ЧГ="));
	КонецЕсли;
	ТелоЗапросаJSON.Вставить("limit"	, 100);
	
	Возврат ТелоЗапросаJSON;
	
КонецФункции

Процедура ЗаполнитьТипИСодержимоеСообщения(НовоеСообщение, ДанныеСообщения, БотТэг)
	
	Если ДанныеСообщения.Получить("text") <> Неопределено Тогда
		ТекстСообщения = ДанныеСообщения.Получить("text");
		Если СтрНайти(ТекстСообщения, "@") > 0 И СтрНайти(ТекстСообщения, "/") > 0 Тогда
			МассивКомандаБот = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстСообщения, "@", Истина, Истина);
			
			Если МассивКомандаБот.Количество() = 2 И МассивКомандаБот[1] <> БотТэг Тогда
				Возврат;
			КонецЕсли;
			
			ТекстСообщения = МассивКомандаБот[0];
		КонецЕсли;
		
		НовоеСообщение.Текст				= ТекстСообщения;
		НовоеСообщение.СодержимоеСообщения	= "ОтправкаСообщения";
	ИначеЕсли ДанныеСообщения.Получить("sticker") <> Неопределено Тогда
		ДанныеСтикера = ДанныеСообщения.Получить("sticker");
		НовоеСообщение.Текст				= ДанныеСтикера.Получить("file_id");
		НовоеСообщение.СодержимоеСообщения	= "ОтправкаСтикера";
	Иначе
		Если ДанныеСообщения.Получить("photo") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("photo");
			НовоеСообщение.СодержимоеСообщения	= "ОтправкаФото";
			
		ИначеЕсли ДанныеСообщения.Получить("audio") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("audio");
			НовоеСообщение.СодержимоеСообщения	= "ОтправкаАудио";
			
		ИначеЕсли ДанныеСообщения.Получить("video") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("video");
			НовоеСообщение.СодержимоеСообщения	= "ОтправкаВидео";
			
		ИначеЕсли ДанныеСообщения.Получить("document") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("document");
			НовоеСообщение.СодержимоеСообщения	= "ОтправкаДокумента";
			
		ИначеЕсли ДанныеСообщения.Получить("video_note") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("video_note");
			НовоеСообщение.СодержимоеСообщения	= "ОтправкаГолосовогоСообщения";
			
		ИначеЕсли ДанныеСообщения.Получить("voice") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("voice");
			НовоеСообщение.СодержимоеСообщения	= "ОтправкаГолосовогоСообщения";
			
		//ИначеЕсли ДанныеСообщения.Получить("video_chat_scheduled") <> Неопределено Тогда
		//	ДанныеВложения = ДанныеСообщения.Получить("video_chat_scheduled");
		//	НовоеСообщение.СодержимоеСообщения	= "ПланированиеВидеоЧата";
			
		ИначеЕсли ДанныеСообщения.Получить("video_chat_started") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("video_chat_started");
			НовоеСообщение.СодержимоеСообщения	= "НачалоВидеоЧата";
			
		ИначеЕсли ДанныеСообщения.Получить("video_chat_ended") <> Неопределено Тогда
			ДанныеВложения = ДанныеСообщения.Получить("video_chat_ended");
			НовоеСообщение.СодержимоеСообщения	= "КонецВидеоЧата";
			
		Иначе
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеВложения) = Тип("Массив") Тогда
			НовоеСообщение.Текст			= ДанныеВложения[0].Получить("file_id");
		Иначе
			Если ДанныеВложения.Получить("file_id") <> Неопределено Тогда
				НовоеСообщение.Текст			= ДанныеВложения.Получить("file_id");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализировать параметры сообщения telegram бота.
// 
// Возвращаемое значение:
//  Структура - набор параметров сообщения telegram bot. Ключи:
//   - Бот - СправочникСсылка.Боты - Бот, для которого выполняется отправка сообщения;
//   - Пользователь - СправочникиСсылка.Пользователи - Пользователи, для которых выполняется рассылка
//   - ТипСообщения - ПеречислениеСсылка.ТипыСообщенийTelegramBot - Тип отправляемого сообщения;
//   - ДополнительныеПараметры - Структура, Неопределено - Параметры заполнения бота, у каждого типа сообщения свои
//   - ВложенностьКнопок - СправочникСсылка.ВложенностьКнопокМеню, Неопределено - Вложенность ответа
//   - КорневойURL - Строка - Корневой URL (без указания метода)
Функция ИнициализироватьПараметрыСообщения()

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Бот"						, Неопределено);
	ПараметрыСообщения.Вставить("Пользователь"				, Неопределено);
	ПараметрыСообщения.Вставить("Получатель"				, Неопределено);
	ПараметрыСообщения.Вставить("ТипСообщения"				, Неопределено);
	ПараметрыСообщения.Вставить("Содержимое"				, Неопределено);
	ПараметрыСообщения.Вставить("ДополнительныеПараметры"	, Новый Структура);
	ПараметрыСообщения.Вставить("ВложенностьКнопок"			, Неопределено);

	Возврат ПараметрыСообщения;

КонецФункции

Процедура ДополнитьСообщениеАвторизация(СоответствиеДанных, ПараметрыСообщения)
	
	СоответствиеДанных.Вставить("text", ПараметрыСообщения.Содержимое);
	
	ВидКнопок = "inline_keyboard";
	
	reply_markup = Новый Соответствие;
	Кнопки = Новый Массив;
	МассивСтрокиКнопок = Новый Массив;
	
	ВариантыАвторизацииМетаданные = Метаданные.Перечисления.ВариантыАвторизацииБота.ЗначенияПеречисления;
	Инкремент = 0;
	Для Каждого ВариантАвторизации Из ВариантыАвторизацииМетаданные Цикл
		
		СоответствиеКнопки = Новый Соответствие;
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ТекстКнопки"			, ВариантАвторизации.Синоним);
		СтруктураЗаполнения.Вставить("URLПеренаправления"	, "");
		СтруктураЗаполнения.Вставить("ДанныеВозврата"		, ВариантАвторизации.Имя);
		ЗаполнитьОбъектКнопки(СоответствиеКнопки, СтруктураЗаполнения, ВидКнопок, Инкремент);
	
		МассивСтрокиКнопок.Добавить(СоответствиеКнопки);
		
		Инкремент = Инкремент + 1;
		
	КонецЦикла;
	
	Кнопки.Добавить(МассивСтрокиКнопок);
	
	reply_markup.Вставить(ВидКнопок, Кнопки);
	reply_markup.Вставить("resize_keyboard", Истина);
	СоответствиеДанных.Вставить("reply_markup", reply_markup);
	
КонецПроцедуры

Процедура ДополнитьСообщениеМеню(СоответствиеДанных, ПараметрыСообщения, ВидКнопок)

	СоответствиеДанных.Вставить("text", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);

	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения, ВидКнопок);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеСообщение(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("text", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);

	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения, "inline_keyboard");
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеФото(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("photo", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);

	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения, "inline_keyboard");
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеАудио(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("audio", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения, "inline_keyboard");
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеДокумент(СоответствиеДанных, ПараметрыСообщения)
	
	//ПутьКФайлу = ПараметрыСообщения.ДополнительныеПараметры.ПутьКФайлу;
	//Boundary = "----" + Строка(Новый УникальныйИдентификатор());
	//ПараметрыСообщения.ДополнительныеПараметры.Вставить("Boundary", Boundary);
	//
	//Файл = Новый Файл(ПутьКФайлу);
	//
	////Определяем массив для процедуры ОбъединитьФайлы
	//МассивФайловДляОбъединения = Новый Массив;
	//
	//МассивФайловДляОбъединения.Добавить(ПолучитьИмяВременногоФайла("txt"));
	//ФайлОтправкиНачало = Новый ЗаписьТекста(МассивФайловДляОбъединения[0], КодировкаТекста.UTF8);
	//НачальныеДанные = "--%Разделитель%
	//|Content-Disposition: form-data; name=""chat_id""
	//|
	//|%ЧатID%
	//|--%Разделитель%
	//|Content-Disposition: form-data; name=""document""; filename=""%ИмяФайла%""
	//|";
	//НачальныеДанные = СтрЗаменить(НачальныеДанные, "%Разделитель%", Boundary);
	//НачальныеДанные = СтрЗаменить(НачальныеДанные, "%ЧатID%"      , СоответствиеДанных.Получить("chat_id"));
	//НачальныеДанные = СтрЗаменить(НачальныеДанные, "%ИмяФайла%"   , Файл.Имя);
	//
	//ФайлОтправкиНачало.ЗаписатьСтроку(НачальныеДанные);
	//ФайлОтправкиНачало.Закрыть();
	//
	//МассивФайловДляОбъединения.Добавить(ПутьКФайлу);
	//
	//МассивФайловДляОбъединения.Добавить(ПолучитьИмяВременногоФайла("txt"));
	//ФайлаОтправкиКонец = Новый ЗаписьТекста(МассивФайловДляОбъединения[2], КодировкаТекста.UTF8);
	//КонечныеДанные = Символ(10) + "--%Разделитель%--";
	//КонечныеДанные = СтрЗаменить(КонечныеДанные,"%Разделитель%", Boundary);
	//
	//ФайлаОтправкиКонец.ЗаписатьСтроку(КонечныеДанные);
	//ФайлаОтправкиКонец.Закрыть();
	//
	//ИмяИтоговогоФайла = ПолучитьИмяВременногоФайла("txt");
	//ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяИтоговогоФайла);
	//
	//ПараметрыСообщения.ДополнительныеПараметры.Вставить("ИмяИтоговогоФайла", ИмяИтоговогоФайла);
	
	СоответствиеДанных.Вставить("document", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеВидео(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("video", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеАнимация(СоответствиеДанных, ПараметрыСообщения)

	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеГолосовоеСообщение(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("voice", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеВидеоСообщение(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("video_note", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеГруппаМедиаФайлов(СоответствиеДанных, ПараметрыСообщения)

	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеЛокация(СоответствиеДанных, ПараметрыСообщения)

	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеКонтакт(СоответствиеДанных, ПараметрыСообщения)

	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеОпрос(СоответствиеДанных, ПараметрыСообщения)

	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеКубик(СоответствиеДанных, ПараметрыСообщения)

	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);

	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеСтикер(СоответствиеДанных, ПараметрыСообщения)

	СоответствиеДанных.Вставить("sticker", ПараметрыСообщения.Содержимое);
	
	ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ПараметрыСообщения.ДополнительныеПараметры);

	Если ЗначениеЗаполнено(ПараметрыСообщения.ВложенностьКнопок) Тогда
		ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения, "inline_keyboard");
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьСообщениеПолямиПользователя(СоответствиеДанных, ДополнительныеПараметры)
	
	Для Каждого КлючИЗначение Из ДополнительныеПараметры Цикл
		СоответствиеДанных.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСообщениеКнопками(СоответствиеДанных, ПараметрыСообщения, ВидКнопок = "inline_keyboard")

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенностьКнопокБота.Ссылка КАК Ссылка,
	|	ВложенностьКнопокБота.ТекстКнопки КАК ТекстКнопки,
	|	ВложенностьКнопокБота.НеобходимКонтакт КАК НеобходимКонтакт,
	|	ВложенностьКнопокБота.НеобходимаЛокация КАК НеобходимаЛокация,
	|	ВложенностьКнопокБота.НеобходимОпрос КАК НеобходимОпрос,
	|	ВложенностьКнопокБота.ТипОпроса КАК ТипОпроса,
	|	ВложенностьКнопокБота.URLПеренаправления КАК URLПеренаправления,
	|	ВложенностьКнопокБота.ДанныеВозврата КАК ДанныеВозврата
	|ПОМЕСТИТЬ ВТДочерниеКнопки
	|ИЗ
	|	Справочник.ВложенностьКнопокМеню КАК ВложенностьКнопокБота
	|ГДЕ
	|	ВложенностьКнопокБота.Владелец = &Владелец
	|	И ВложенностьКнопокБота.Родитель = &Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыДоступаПользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГруппыПользователя
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыПользователейСостав.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрофилиГруппДоступаНазначение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТПрофилиГруппДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Назначение КАК ПрофилиГруппДоступаНазначение
	|ГДЕ
	|	ПрофилиГруппДоступаНазначение.ТипПользователей = &Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиГруппДоступаНазначение.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенностьКнопокМенюДоступностьКнопки.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ВТГруппыДоступаПользователя.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДоступнаПоГруппеДоступа,
	|	СУММА(ВЫБОР
	|			КОГДА ВТГруппыПользователя.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДоступнаПоГруппеПользователей,
	|	СУММА(ВЫБОР
	|			КОГДА ВТПрофилиГруппДоступа.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДоступнаПоПрофилюГруппДоступа,
	|	СУММА(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ВложенностьКнопокМенюДоступностьКнопки.Доступна КАК Справочник.Пользователи)) = &Пользователь
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДоступнаПоПользователю
	|ПОМЕСТИТЬ ВТПроверкаДоступностиКнопки
	|ИЗ
	|	Справочник.ВложенностьКнопокМеню.ДоступностьКнопки КАК ВложенностьКнопокМенюДоступностьКнопки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГруппыДоступаПользователя КАК ВТГруппыДоступаПользователя
	|		ПО ((ВЫРАЗИТЬ(ВложенностьКнопокМенюДоступностьКнопки.Доступна КАК Справочник.ГруппыДоступа)) = ВТГруппыДоступаПользователя.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГруппыПользователя КАК ВТГруппыПользователя
	|		ПО ((ВЫРАЗИТЬ(ВложенностьКнопокМенюДоступностьКнопки.Доступна КАК Справочник.ГруппыПользователей)) = ВТГруппыПользователя.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофилиГруппДоступа КАК ВТПрофилиГруппДоступа
	|		ПО ((ВЫРАЗИТЬ(ВложенностьКнопокМенюДоступностьКнопки.Доступна КАК Справочник.ПрофилиГруппДоступа)) = ВТПрофилиГруппДоступа.Ссылка)
	|ГДЕ
	|	ВложенностьКнопокМенюДоступностьКнопки.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТДочерниеКнопки.Ссылка
	|			ИЗ
	|				ВТДочерниеКнопки КАК ВТДочерниеКнопки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенностьКнопокМенюДоступностьКнопки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДочерниеКнопки.Ссылка КАК Ссылка,
	|	ВТДочерниеКнопки.ТекстКнопки КАК ТекстКнопки,
	|	ВТДочерниеКнопки.НеобходимКонтакт КАК НеобходимКонтакт,
	|	ВТДочерниеКнопки.НеобходимаЛокация КАК НеобходимаЛокация,
	|	ВТДочерниеКнопки.НеобходимОпрос КАК НеобходимОпрос,
	|	ВТДочерниеКнопки.ТипОпроса КАК ТипОпроса,
	|	ВТДочерниеКнопки.URLПеренаправления КАК URLПеренаправления,
	|	ВТДочерниеКнопки.ДанныеВозврата КАК ДанныеВозврата
	|ИЗ
	|	ВТДочерниеКнопки КАК ВТДочерниеКнопки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроверкаДоступностиКнопки КАК ВТПроверкаДоступностиКнопки
	|		ПО ВТДочерниеКнопки.Ссылка = ВТПроверкаДоступностиКнопки.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТПроверкаДоступностиКнопки.Ссылка ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТПроверкаДоступностиКнопки.ДоступнаПоГруппеДоступа > 0
	|					ИЛИ ВТПроверкаДоступностиКнопки.ДоступнаПоГруппеПользователей > 0
	|					ИЛИ ВТПроверкаДоступностиКнопки.ДоступнаПоПрофилюГруппДоступа > 0
	|					ИЛИ ВТПроверкаДоступностиКнопки.ДоступнаПоПользователю > 0
	|		КОНЕЦ";

	Запрос.УстановитьПараметр("Владелец"	, ПараметрыСообщения.Бот);
	Запрос.УстановитьПараметр("Родитель"	, ПараметрыСообщения.ВложенностьКнопок);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСообщения.Пользователь);

	reply_markup = Новый Соответствие;
	Кнопки = Новый Массив;

	ВыгрузкаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбщееКоличествоКнопок = ВыгрузкаРезультатаЗапроса.Количество();
	КоличествоСтруктура = ПолучитьКоличествоКнопокВСтроку(ОбщееКоличествоКнопок);
	
	Инкремент = 0;
	Пока Инкремент < ОбщееКоличествоКнопок Цикл

		МассивСтрокиКнопок = Новый Массив;
		
		Если Инкремент = ОбщееКоличествоКнопок - 1 И КоличествоСтруктура.ЕстьОстаток Тогда
			СтрокаТаблицы = ВыгрузкаРезультатаЗапроса[Инкремент];
			СоответствиеКнопки = Новый Соответствие;
			ЗаполнитьОбъектКнопки(СоответствиеКнопки, СтрокаТаблицы, ВидКнопок, Инкремент);
	
			МассивСтрокиКнопок.Добавить(СоответствиеКнопки);
			
			Инкремент = Инкремент + 1;
		Иначе
			ИнкрементСтроки = 0;
			Пока ИнкрементСтроки < КоличествоСтруктура.Количество Цикл
			
				СтрокаТаблицы = ВыгрузкаРезультатаЗапроса[Инкремент];
				СоответствиеКнопки = Новый Соответствие;
				ЗаполнитьОбъектКнопки(СоответствиеКнопки, СтрокаТаблицы, ВидКнопок, Инкремент);
		
				МассивСтрокиКнопок.Добавить(СоответствиеКнопки);
				
				Инкремент = Инкремент + 1;
				ИнкрементСтроки = ИнкрементСтроки + 1;
			
			КонецЦикла;
		КонецЕсли;

		Кнопки.Добавить(МассивСтрокиКнопок);

	КонецЦикла;

	reply_markup.Вставить(ВидКнопок, Кнопки);
	reply_markup.Вставить("resize_keyboard", Истина);
	СоответствиеДанных.Вставить("reply_markup", reply_markup);

КонецПроцедуры

Функция ПолучитьКоличествоКнопокВСтроку(ОбщееКоличествоКнопок)
	
	КоличествоСтруктура = Новый Структура;
	
	Если ОбщееКоличествоКнопок <> 4 И ОбщееКоличествоКнопок % 4 = 0 Тогда
		КоличествоКнопокВСтроку = 4;
		ЕстьОстаток = Ложь;
		
	ИначеЕсли ОбщееКоличествоКнопок % 3 = 0 Тогда
		КоличествоКнопокВСтроку = 3;
		ЕстьОстаток = Ложь;
		
	ИначеЕсли ОбщееКоличествоКнопок % 2 = 0 Тогда
		КоличествоКнопокВСтроку = 2;
		ЕстьОстаток = Ложь;
		
	Иначе
		КоличествоКнопокВСтроку = 2;
		ЕстьОстаток = Истина;
		
	КонецЕсли;
	
	КоличествоСтруктура.Вставить("Количество"	, КоличествоКнопокВСтроку);
	КоличествоСтруктура.Вставить("ЕстьОстаток"	, ЕстьОстаток);
	
	Возврат КоличествоСтруктура;
	
КонецФункции

Процедура ЗаполнитьОбъектКнопки(СоответствиеКнопки, СтрокаТаблицы, ВидКнопок, Инкремент)
	
	СоответствиеКнопки.Вставить("text", СтрокаТаблицы.ТекстКнопки);
	
	Если ВидКнопок = "inline_keyboard" Тогда
		СоответствиеКнопки.Вставить("url"			, СтрокаТаблицы.URLПеренаправления);
		ДанныеВозврата = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДанныеВозврата),
			СтрокаТаблицы.ДанныеВозврата, Строка(Инкремент + 1));
		СоответствиеКнопки.Вставить("callback_data"	, ДанныеВозврата);
	Иначе
		СоответствиеКнопки.Вставить("request_contact"	, СтрокаТаблицы.НеобходимКонтакт);
		СоответствиеКнопки.Вставить("request_location"	, СтрокаТаблицы.НеобходимаЛокация);
		Если СтрокаТаблицы.НеобходимОпрос Тогда
			ТипОпроса = Новый Соответствие;
			ТипОпроса.Вставить("type", СтрокаТаблицы.ТипОпроса);
			
			СоответствиеКнопки.Вставить("request_poll", ТипОпроса);
		КонецЕсли;
	КонецЕсли;

	СоответствиеКнопки.Вставить("resize_keyboard", Истина);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции