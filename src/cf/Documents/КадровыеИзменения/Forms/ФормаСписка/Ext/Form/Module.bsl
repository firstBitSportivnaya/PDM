// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеречислениеПрием = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыОперацийКадровыеИзменения.ПриемПереводУвольнение");
	
	Если ДанныеСтроки.ВидОперации = ПеречислениеПрием Тогда
		КлючеваяОперация = "СозданиеФормыКадровыеИзмененияПриемПереводУвольнение";
	Иначе
		КлючеваяОперация = "СозданиеФормыКадровыеИзмененияПривлечениеНаПроект";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьИзменениеПриемПереводУвольнение(Команда)
	
	ПеречислениеПрием = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыОперацийКадровыеИзменения.ПриемПереводУвольнение");
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПеречислениеПрием);
	
	ОткрытьФорму("Документ.КадровыеИзменения.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменениеПривлечениеНаПроект(Команда)
	
	ПеречислениеПривлечение = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыОперацийКадровыеИзменения.ПривлечениеНаПроект");
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПеречислениеПривлечение);
	
	ОткрытьФорму("Документ.КадровыеИзменения.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

//@skip-check module-unused-method
#Область СтандартныеПодсистемы

// Подключаемый выполнить команду.
// 
// Параметры:
//  Команда - КомандаФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

// Подключаемый выполнить команду на сервере.
// 
// Параметры:
//  Контекст  - Структура
//  Результат - Структура
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы(ВидОперации)
	
	ПеречислениеПрием = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ВидыОперацийКадровыеИзменения.ПриемПереводУвольнение");
	
	Если ВидОперации = ПеречислениеПрием Тогда
		КлючеваяОперация = "СозданиеФормыКадровыеИзмененияПриемПереводУвольнение";
	Иначе
		КлючеваяОперация = "СозданиеФормыКадровыеИзмененияПривлечениеНаПроект";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияУПОВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции