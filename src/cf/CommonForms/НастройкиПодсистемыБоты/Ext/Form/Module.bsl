
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьДоступностьСсылокНастройкиРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьРегламентноеЗаданиеСообщениеПриИзмененииНаСервере()
	
	РегламентноеЗадание = ПолучитьРегламентноеЗаданиеСообщения();
	Если РегламентноеЗадание = Неопределено Тогда
		СоздатьРегламентноеЗаданиеСообщения();
	Иначе
		ОбновитьОтключитьРегламентноеЗаданиеСообщения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеСообщениеПриИзменении(Элемент)
	
	НастроитьДоступностьСсылокНастройкиРасписания();
	ИспользоватьРегламентноеЗаданиеСообщениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьРегламентноеЗаданиеЗаданияПриИзмененииНаСервере()
	
	РегламентноеЗадание = ПолучитьРегламентноеЗаданиеЗадания();
	Если РегламентноеЗадание = Неопределено Тогда
		СоздатьРегламентноеЗаданиеЗадания();
	Иначе
		ОбновитьОтключитьРегламентноеЗаданиеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеЗаданияПриИзменении(Элемент)
	
	НастроитьДоступностьСсылокНастройкиРасписания();
	ИспользоватьРегламентноеЗаданиеЗаданияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияСообщения(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписаниеРегламентногоЗаданияСообщенияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияЗадания(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписаниеРегламентногоЗаданияЗаданияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеМетодовБотов(Команда)
	
	ОткрытьФорму("РегистрСведений.СоответствияТиповСообщенийБотовМетодовИнтеграции.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПользователейЧатамБотов(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("НастройкаИнтеграции", ПолучитьНастройкиИнтеграцииБотов());
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.СоответствияПользователейСистем.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОповещений

&НаКлиенте
Процедура РедактированиеРасписаниеРегламентногоЗаданияСообщенияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗаданияСообщения = Расписание;
		ОбновитьОтключитьРегламентноеЗаданиеСообщения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписаниеРегламентногоЗаданияЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗаданияЗадания = Расписание;
		ОбновитьОтключитьРегламентноеЗаданиеЗадания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Пользователи.РолиДоступны("ПолныеПрава, Администрирование") Тогда
		
		РегламентноеЗадание = ПолучитьРегламентноеЗаданиеЗадания();
		Если РегламентноеЗадание <> Неопределено Тогда
			РасписаниеРегламентногоЗаданияЗадания	= РегламентноеЗадание.Расписание;
			ИспользоватьРегламентноеЗаданиеЗадания	= РегламентноеЗадание.Использование;
		КонецЕсли;
		
		РегламентноеЗадание = ПолучитьРегламентноеЗаданиеСообщения();
		Если РегламентноеЗадание <> Неопределено Тогда
			РасписаниеРегламентногоЗаданияСообщения		= РегламентноеЗадание.Расписание;
			ИспользоватьРегламентноеЗаданиеСообщения	= РегламентноеЗадание.Использование;
		КонецЕсли;
		
	Иначе
		
		Если Пользователи.РолиДоступны("РедактированиеКоличествоДнейХраненияВыполненияЗаданийБотов") Тогда
			РегламентноеЗадание = ПолучитьРегламентноеЗаданиеЗадания();
			Если РегламентноеЗадание <> Неопределено Тогда
				РасписаниеРегламентногоЗаданияЗадания	= РегламентноеЗадание.Расписание;
				ИспользоватьРегламентноеЗаданиеЗадания	= РегламентноеЗадание.Использование;
			КонецЕсли;
		КонецЕсли;
		
		Если Пользователи.РолиДоступны("РедактированиеКоличествоДнейХраненияСообщенийБотов") Тогда
			РегламентноеЗадание = ПолучитьРегламентноеЗаданиеСообщения();
			Если РегламентноеЗадание <> Неопределено Тогда
				РасписаниеРегламентногоЗаданияСообщения		= РегламентноеЗадание.Расписание;
				ИспользоватьРегламентноеЗаданиеСообщения	= РегламентноеЗадание.Использование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Если Не Пользователи.РолиДоступны("ПолныеПрава, Администрирование") Тогда

		Если Не Пользователи.РолиДоступны("РедактированиеАдресаПубликацииИнформационнойБазыДляБотов") Тогда
			Элементы.ГруппаАдресПеренаправленияВебХуков.Видимость = Ложь;
		КонецЕсли;

		Если Не Пользователи.РолиДоступны("РедактированиеКоличествоДнейХраненияВыполненияЗаданийБотов") Тогда
			Элементы.ГруппаОчисткаРегистраВыполненияЗаданийБотов.Видимость = Ложь;
		КонецЕсли;

		Если Не Пользователи.РолиДоступны("РедактированиеКоличествоДнейХраненияСообщенийБотов") Тогда
			Элементы.ГруппаОчисткаРегистраСообщенияПользователейБотов.Видимость = Ложь;
		КонецЕсли;

		Если Не Пользователи.РолиДоступны("РедактированиеСоответствияТиповСообщенийБотовМетодовИнтеграции") Тогда
			Элементы.ГруппаСопоставлениеМетодовБотов.Видимость = Ложь;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьСсылокНастройкиРасписания()
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияЗадания.Доступность = ИспользоватьРегламентноеЗаданиеЗадания;
	Элементы.НастроитьРасписаниеРегламентногоЗаданияСообщение.Доступность = ИспользоватьРегламентноеЗаданиеСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтключитьРегламентноеЗаданиеЗадания()
	
	РегламентноеЗадание = ПолучитьРегламентноеЗаданиеЗадания();
	
	РегламентноеЗадание.Расписание		= РасписаниеРегламентногоЗаданияЗадания;
	РегламентноеЗадание.Использование	= ИспользоватьРегламентноеЗаданиеЗадания;
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗаданиеЗадания()
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОчисткаВыполненияЗаданийБотов);
	МассивРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	
	Если МассивРегламентныхЗаданий.Количество() Тогда
		РегламентноеЗадание = МассивРегламентныхЗаданий[0];
	Иначе
		РегламентноеЗадание = Неопределено;
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервере
Процедура СоздатьРегламентноеЗаданиеЗадания()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Наименование", Метаданные.РегламентныеЗадания.ОчисткаВыполненияЗаданийБотов.Синоним);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОчисткаВыполненияЗаданийБотов);
	
	ПараметрыЗадания.Вставить("Ключ", Новый УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("Расписание", Новый РасписаниеРегламентногоЗадания);

	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	РасписаниеРегламентногоЗаданияЗадания	= РегламентноеЗадание.Расписание;
	ИспользоватьРегламентноеЗаданиеЗадания	= РегламентноеЗадание.Использование;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтключитьРегламентноеЗаданиеСообщения()
	
	РегламентноеЗадание = ПолучитьРегламентноеЗаданиеСообщения();
	
	РегламентноеЗадание.Расписание		= РасписаниеРегламентногоЗаданияСообщения;
	РегламентноеЗадание.Использование	= ИспользоватьРегламентноеЗаданиеСообщения;
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗаданиеСообщения()
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОчисткаСообщенийПользователейБотов);
	МассивРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	
	Если МассивРегламентныхЗаданий.Количество() Тогда
		РегламентноеЗадание = МассивРегламентныхЗаданий[0];
	Иначе
		РегламентноеЗадание = Неопределено;
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервере
Процедура СоздатьРегламентноеЗаданиеСообщения()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Наименование", Метаданные.РегламентныеЗадания.ОчисткаСообщенийПользователейБотов.Синоним);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОчисткаСообщенийПользователейБотов);
	
	ПараметрыЗадания.Вставить("Ключ", Новый УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("Расписание", Новый РасписаниеРегламентногоЗадания);

	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	РасписаниеРегламентногоЗаданияСообщения		= РегламентноеЗадание.Расписание;
	ИспользоватьРегламентноеЗаданиеСообщения	= РегламентноеЗадание.Использование;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиИнтеграцииБотов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Боты.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ИЗ
	|	Справочник.Боты КАК Боты
	|
	|СГРУППИРОВАТЬ ПО
	|	Боты.НастройкаИнтеграции";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НастройкаИнтеграции");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции