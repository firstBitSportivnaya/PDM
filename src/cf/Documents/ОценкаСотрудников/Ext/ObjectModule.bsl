#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("ВидРевью");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры
	
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПараметрыПроведения = Документы.ОценкаСотрудников.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПроведения.Свойство("Реквизиты") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента	= ПараметрыПроведения.Реквизиты;
	ОценкиТаблица		= ПараметрыПроведения.ВременнаяТаблицаОценки;
	СертификатыТаблица	= ПараметрыПроведения.ВременнаяТаблицаСертификаты;
	
	Если РеквизитыДокумента.ВидРевью = Справочники.ВидыОценкиСотрудников.ПервичнаяОценка Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОценкиТаблица", ОценкиТаблица);
		Запрос.Текст = "ВЫБРАТЬ
		|	ТЗ.Компетенция КАК Компетенция,
		|	ТЗ.УровеньЗнания КАК УровеньЗнания
		|ПОМЕСТИТЬ ВТОценкиТаблица
		|ИЗ
		|	&ОценкиТаблица КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрадацииВремениПоКомпетенциям.Компетенция,
		|	ГрадацииВремениПоКомпетенциям.УровеньЗнания,
		|	ГрадацииВремениПоКомпетенциям.НеобходимоЧасов
		|ИЗ
		|	РегистрСведений.ГрадацииВремениПоКомпетенциям КАК ГрадацииВремениПоКомпетенциям
		|ГДЕ
		|	(ГрадацииВремениПоКомпетенциям.Компетенция, ГрадацииВремениПоКомпетенциям.УровеньЗнания) В
		|		(ВЫБРАТЬ
		|			Компетенция,
		|			УровеньЗнания
		|		ИЗ
		|			ВТОценкиТаблица)";
		
		ВыгрузкаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Движения.УчетВремениПоКомпетенциям.Очистить();
		Для Каждого СтрокаОценки Из ОценкиТаблица Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Компетенция"	, СтрокаОценки.Компетенция);
			СтруктураОтбора.Вставить("УровеньЗнания", СтрокаОценки.УровеньЗнания);
			
			НайденныеСтроки = ВыгрузкаРезультатаЗапроса.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() Тогда
				НоваяЗапись = Движения.УчетВремениПоКомпетенциям.Добавить();
				НоваяЗапись.Период			= РеквизитыДокумента.Дата;
				НоваяЗапись.Регистратор		= РеквизитыДокумента.Ссылка;
				НоваяЗапись.Сотрудник		= СтрокаОценки.Сотрудник;
				НоваяЗапись.Компетенция		= СтрокаОценки.Компетенция;
				НоваяЗапись.Часов			= НайденныеСтроки[0].НеобходимоЧасов;
			КонецЕсли;
			
		КонецЦикла;
		Движения.УчетВремениПоКомпетенциям.Записывать = Истина;
		
	КонецЕсли;
	
	Движения.РезультатыОценкиСотрудников.Очистить();
	
	Для Каждого СтрокаОценки Из ОценкиТаблица Цикл
		
		НоваяЗапись = Движения.РезультатыОценкиСотрудников.Добавить();
		НоваяЗапись.Период			= РеквизитыДокумента.Дата;
		НоваяЗапись.Регистратор		= РеквизитыДокумента.Ссылка;
		НоваяЗапись.Сотрудник		= СтрокаОценки.Сотрудник;
		НоваяЗапись.Компетенция		= СтрокаОценки.Компетенция;
		НоваяЗапись.УровеньЗнания	= СтрокаОценки.УровеньЗнания;
		НоваяЗапись.Оценка			= СтрокаОценки.Оценка;
		
	КонецЦикла;
	
	Движения.РезультатыОценкиСотрудников.Записывать = Истина;
	
	Движения.СертификатыСотрудников.Очистить();
	Если РеквизитыДокумента.ВидРевью.ВключаяСертификаты Тогда
		
		Для Каждого СтрокаСертификата Из Сертификаты Цикл
			НоваяЗапись = Движения.СертификатыСотрудников.Добавить();
			НоваяЗапись.Период			= РеквизитыДокумента.Дата;
			НоваяЗапись.Регистратор		= РеквизитыДокумента.Ссылка;
			НоваяЗапись.Сотрудник		= СтрокаСертификата.Сотрудник;
			НоваяЗапись.Сертификат		= СтрокаСертификата.Сертификат;
			НоваяЗапись.ДатаПолучения	= СтрокаСертификата.ДатаПолучения;
		КонецЦикла;
		
	КонецЕсли;
	
	Движения.СертификатыСотрудников.Записывать = Истина;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ВидРевью = Справочники.ВидыОценкиСотрудников.ПервичнаяОценка Тогда
		
		ОценкаСотрудниковСервер.ОчиститьКомпетенцииСотрудниковПоИсточнику(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции



#КонецОбласти // СлужебныеПроцедурыИФункции

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'; en = 'Invalid object call on client.'");
#КонецЕсли