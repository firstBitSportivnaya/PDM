
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТестовыйНабор("Получить обработчик ресурса")
			.ДобавитьТест("Тест_ПолучитьОбработчикРесурса")
		.ДобавитьТестовыйНабор("Обработать запрос спецификации")
			.ДобавитьТест("Тест_ОбработатьЗапросСпецификации")
		.ДобавитьТестовыйНабор("Получить спецификацию сервиса")
			.ДобавитьТест("Тест_ПолучитьСпецификациюСервиса")
	;
	
КонецПроцедуры

Функция Тест_ПолучитьОбработчикРесурса() Экспорт
	
	Варианты = ЮТест.Варианты("Ресурс, КодСостояния, СодержитОшибку, Вызов")
		.Добавить("/docs/openapi", , Ложь, "Вызов 1")
		.Добавить("/openapi_test", 501, Истина, "Вызов 2")
		.Добавить("/openapi.json", 501, Истина, "Вызов 3")
		.Добавить("/spec/openapi.json", , Ложь, "Вызов 4")
	;
	
	КодыСостояния = пбп_КоннекторHTTP.КодыСостоянияHTTP();
	
	КлючДанные = "Данные";
	КлючКодСостояния = "КодСостояния";
	
	Для Каждого Вариант Из Варианты.СписокВариантов() Цикл
		Результат = пбп_ПостроительСпецификацииOpenAPI.ПолучитьОбработчикРесурса(Вариант.Ресурс, КодыСостояния);
		
		ЮТест.ОжидаетЧто(Результат, Вариант.Вызов)
			.ИмеетТип("Структура")
				.ИмеетСвойство(КлючДанные)
				.ИмеетСвойство(КлючКодСостояния)
		;
		
		Если Вариант.СодержитОшибку Тогда
			ЮТест.ОжидаетЧто(Результат.Данные).Равно(Неопределено);
			ЮТест.ОжидаетЧто(Результат.КодСостояния).Равно(Вариант.КодСостояния);
		Иначе
			ЮТест.ОжидаетЧто(Результат.Данные).Заполнено();
			ЮТест.ОжидаетЧто(Результат.КодСостояния).Равно(Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура Тест_ОбработатьЗапросСпецификации() Экспорт
	
	Варианты = ЮТест.Варианты("ОтносительныйURL, ОжидаемыйКод, ОжидаемыйРезультат, СодержитОшибку, Вызов")
		.Добавить("/docs/openapi", 200, "", Ложь, "Вызов 1")
		.Добавить("/openapi_test", 404, пбп_КоннекторHTTP.ПредставлениеКодаСостоянияHTTP(404), Истина, "Вызов 2")
		.Добавить("/openapi.json", 404, пбп_КоннекторHTTP.ПредставлениеКодаСостоянияHTTP(404), Истина, "Вызов 3")
		.Добавить("/spec/openapi.json", 500, пбп_КоннекторHTTP.ПредставлениеКодаСостоянияHTTP(500), Истина, "Вызов 4")
	;
	
	Для Каждого Вариант Из Варианты.СписокВариантов() Цикл
		Запрос = ЮТест.Данные().HTTPСервисЗапрос();
		Запрос.ОтносительныйURL(Вариант.ОтносительныйURL);
		Ответ = пбп_ПостроительСпецификацииOpenAPI.ОбработатьЗапросСпецификации(Запрос);
		
		ЮТест.ОжидаетЧто(Ответ.КодСостояния, Вариант.Вызов).Равно(Вариант.ОжидаемыйКод);
		
		Если Вариант.СодержитОшибку Тогда
			ЮТест.ОжидаетЧто(Ответ.ПолучитьТелоКакСтроку()).Содержит(Вариант.ОжидаемыйРезультат);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция Тест_ПолучитьСпецификациюСервиса() Экспорт
	
	ИменаМакетов = пбп_ПостроительСпецификацииOpenAPIПереопределяемый.ИменаМакетовСервисов();
	
	МокПостроитель = Мокито.Обучение(пбп_ПостроительСпецификацииOpenAPI);
	Для Каждого Пара Из ИменаМакетов Цикл
		УсловиеПредикат = ЮТест.Предикат()
			.ИмеетТип("Строка")
			.Равно(Пара.Ключ)
			.Получить()
		;
			
		МокПостроитель
			.Когда("ПолучитьСпецификациюСервиса", Мокито.МассивПараметров(УсловиеПредикат))
			.Вернуть("Успешно")
		;
	КонецЦикла;
	МокПостроитель.Прогон();
	
	Варианты = ЮТест.Варианты("ИмяСервиса, СодержитОшибку, Вызов")
		.Добавить("ИмяСервиса", Ложь, "Вызов 1")
		.Добавить("test", Истина, "Вызов 2")
		.Добавить("ИмяСервиса1", Истина, "Вызов 3")
	;
	
	Для Каждого Вариант Из Варианты.СписокВариантов() Цикл
		Если Вариант.СодержитОшибку Тогда
			Параметры = Новый Массив;
			Параметры.Добавить(Вариант.ИмяСервиса);
			
			ТекстОшибки = пбп_ПереадресацияКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдена спецификация сервиса %1'"),
				Вариант.ИмяСервиса);
				
			ЮТест.ОжидаетЧто(пбп_ПостроительСпецификацииOpenAPI, Вариант.Вызов)
				.Метод("ПолучитьСпецификациюСервиса", Параметры)
				.ВыбрасываетИсключение(ТекстОшибки);
		Иначе
			Результат = пбп_ПостроительСпецификацииOpenAPI.ПолучитьСпецификациюСервиса(Вариант.ИмяСервиса);
			ЮТест.ОжидаетЧто(Результат, Вариант.Вызов)
				.ИмеетТип("Строка")
				.Равно("Успешно")
			;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
