// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Получает идентификатор чата пользователя по настройке интеграции бота.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  Пользователи - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Пользователи - Пользователь ссылка
// 
// Возвращаемое значение:
//  Строка - Получить идентификатор чата пользователя
Функция ПолучитьИдентификаторЧатаПользователя(БотСсылка, Пользователи) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияПользователейСистем.ЗначениеСистемы КАК ЗначениеСистемы
	|ИЗ
	|	РегистрСведений.СоответствияПользователейСистем КАК СоответствияПользователейСистем
	|ГДЕ
	|	СоответствияПользователейСистем.НастройкаИнтеграции = &НастройкаИнтеграции
	|	И СоответствияПользователейСистем.ТипИдентификации = ЗНАЧЕНИЕ(Перечисление.ТипыИдентификацииСистем.Идентификатор)
	|	И СоответствияПользователейСистем.Пользователь В (&Пользователь)";

	Запрос.УстановитьПараметр("НастройкаИнтеграции"	, БотСсылка.НастройкаИнтеграции);
	Запрос.УстановитьПараметр("Пользователь"		, Пользователи);

	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Идентификатор = ВыборкаРезультатаЗапроса.ЗначениеСистемы;
	Иначе
		Идентификатор = "";
	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

// Получает ссылку на пользователя по идентификатору чата в разрезе бота.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  ИдентификаторЧата - Строка - Идентификатор чата
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Получить идентификатор чата пользователя
Функция ПолучитьПользователяПоИдентификаторуЧата(БотСсылка, ИдентификаторЧата) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияПользователейСистем.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СоответствияПользователейСистем КАК СоответствияПользователейСистем
	|ГДЕ
	|	СоответствияПользователейСистем.НастройкаИнтеграции = &НастройкаИнтеграции
	|	И СоответствияПользователейСистем.ТипИдентификации = ЗНАЧЕНИЕ(Перечисление.ТипыИдентификацииСистем.Идентификатор)
	|	И СоответствияПользователейСистем.ЗначениеСистемы = &ИдентификаторЧата";

	Запрос.УстановитьПараметр("НастройкаИнтеграции"	, БотСсылка.НастройкаИнтеграции);
	Запрос.УстановитьПараметр("ИдентификаторЧата"	, ИдентификаторЧата);

	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Пользователь = ВыборкаРезультатаЗапроса.Пользователь;
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Возврат Пользователь;

КонецФункции

// Функция-обертка для более удобной работы с ОбщегоНазначенияУПОСервер.ВыполнитьПользовательскуюФункциюСПараметрами.
// 
// Параметры:
//  ФункцияСсылка - СправочникСсылка.ПользовательскиеФункции - Функция ссылка
//  ПараметрыФункции - ТаблицаЗначений - Параметры функции, см. ИнициализироватьТаблицуПараметровФункций
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Выполнить пользовательскую функцию
Функция ВыполнитьПользовательскуюФункцию(ФункцияСсылка, ПараметрыФункции) Экспорт

	КоличествоПараметров = ПараметрыФункции.Количество();
	Для Инкремент = 1 По КоличествоПараметров Цикл
		СтрокаПараметр = ПараметрыФункции[Инкремент - 1];
		СтрокаПараметр.Номер = Инкремент;
	КонецЦикла;

	ТекстФункции = Строка(ФункцияСсылка.КодПодпрограммы);

	РезультатОбработки = Неопределено;
	
	// Инициализируем переменные функции.
	Переменные = Новый Структура;
	Для Каждого СтрокаТаблицы Из ФункцияСсылка.Переменные Цикл
		
		Если НЕ Переменные.Свойство(СтрокаТаблицы.Имя) Тогда
			
			Переменные.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	РезультатОбработки = ОбщегоНазначенияУПОСервер.ВыполнитьПользовательскуюФункциюСПараметрами(
	ТекстФункции, ПараметрыФункции, Переменные);
	
	Возврат РезультатОбработки;

КонецФункции

// Возвращает метод интеграции по типу сообщения бота.
// 
// Параметры:
//  ТипСообщенияБота - ПеречислениеСсылка.ТипыСообщенийTelegramBot - Тип сообщения бота
// 
// Возвращаемое значение:
//  СправочникСсылка.МетодыИнтеграции - Метод интеграции
Функция ПолучитьСоответствиеМетодаИнтеграцииТипуСообщения(ТипСообщенияБота) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипСообщенияБота", ТипСообщенияБота);
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияТиповСообщенийБотовМетодовИнтеграции.МетодИнтеграции КАК МетодИнтеграции
	|ИЗ
	|	РегистрСведений.СоответствияТиповСообщенийБотовМетодовИнтеграции КАК СоответствияТиповСообщенийБотовМетодовИнтеграции
	|ГДЕ
	|	СоответствияТиповСообщенийБотовМетодовИнтеграции.ТипСообщенияБота = &ТипСообщенияБота";
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		МетодИнтеграции = ВыборкаРезультатаЗапроса.МетодИнтеграции;
	Иначе
		МетодИнтеграции = Справочники.МетодыИнтеграции.ПустаяСсылка();
	КонецЕсли;

	Возврат МетодИнтеграции;

КонецФункции

// Возвращает текст по шаблону, соответствующий предопределенному ответу бота
//
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот
//  ТипОтвета - ПеречислениеСсылка.ТипыПредопределенныхОтветовБота - Тип ответа
// 
// Возвращаемое значение:
//  Строка - Сформированный текст сообщения
//
Функция ПолучитьТекстСообщенияПредопределенногоОтвета(БотСсылка, ТипПредопределенного) Экспорт
	
	СтрокаОтвета = БотСсылка.ПредопределенныеОтветы.Найти(ТипПредопределенного, "ТипОтвета");
	Если СтрокаОтвета <> Неопределено Тогда
		ТекстСообщения = СтрокаОтвета.Значение;
	Иначе
		ТекстСообщения = "";
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает сгенерированный код проверки авторизации в системе
//
// Параметры:
//  ДлинаКода - Число - Длина кода проверки
// 
// Возвращаемое значение:
//  Строка - Код проверки
//
Функция СгенерироватьКодПроверки(ДлинаКода) Экспорт
	
	КодПроверки = "";
	
	РазрешенныеСимволы = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890";
	КоличествоСимволов = СтрДлина(РазрешенныеСимволы);
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	Инкремент = 1;
	Пока Инкремент <= ДлинаКода Цикл
		СЧ = Генератор.СлучайноеЧисло(1, КоличествоСимволов);
		КодПроверки = КодПроверки + Сред(РазрешенныеСимволы, СЧ, 1);
		
		Инкремент = Инкремент + 1;
	КонецЦикла;
	
	Возврат КодПроверки;
	
КонецФункции

// Отправляет письмо на указанную почту с кодом проверки авторизации в системе
//
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот
//  КодПроверки - Строка - Код проверки верификации пользователя
//  ПолучательEmail - Строка - E-mail адрес получателя
//
Процедура ОтправитьПисьмоВерификацииПользователю(БотСсылка, КодПроверки, ПолучательEmail) Экспорт
	
	СистемнаяПочта = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СистемнаяПочта);
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP	= СистемнаяПочта.СерверИсходящейПочты;
	Профиль.ПортSMTP			= СистемнаяПочта.ПортСервераИсходящейПочты;
	Профиль.Пользователь		= СистемнаяПочта.АдресЭлектроннойПочты;
	Профиль.ПользовательSMTP	= СистемнаяПочта.АдресЭлектроннойПочты;
	Профиль.АутентификацияSMTP	= СпособSMTPАутентификации.Login;
	Профиль.Пароль				= Пароль;
	Профиль.ПарольSMTP			= Пароль;
	Профиль.ИспользоватьSSLSMTP	= СистемнаяПочта.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
	Профиль.Таймаут				= 30;
	
	Если СистемнаяПочта.ПротоколВходящейПочты = "IMAP" Тогда
		Профиль.АдресСервераIMAP	= СистемнаяПочта.СерверВходящейПочты;
		Профиль.ПортIMAP			= СистемнаяПочта.ПортСервераВходящейПочты;
		Профиль.ИспользоватьSSLIMAP	= СистемнаяПочта.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
	Иначе
		Профиль.АдресСервераPOP3	= СистемнаяПочта.СерверВходящейПочты;
		Профиль.ПортPOP3			= СистемнаяПочта.ПортСервераВходящейПочты;
		Профиль.ИспользоватьSSLPOP3	= СистемнаяПочта.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	ШаблонСообщения = ПолучитьТекстСообщенияПредопределенногоОтвета(БотСсылка,
		Перечисления.ТипыПредопределенныхОтветовБота.ТекстПодтвержденияАвторизации);
	ТекстСообщения = СтрШаблон(ШаблонСообщения, КодПроверки);
	
	Текст = Письмо.Тексты.Добавить(ТекстСообщения);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Письмо.Тема				= СтрШаблон("Подтверждение авторизации в боте %1", БотСсылка.Наименование);
	Письмо.Отправитель		= СистемнаяПочта.АдресЭлектроннойПочты;
	Письмо.ИмяОтправителя	= СистемнаяПочта.ИмяПользователя;
	Письмо.Получатели.Добавить(ПолучательEmail);
	
	Попытка
		Почта.Подключиться(Профиль);
		Почта.Послать(Письмо);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Почта.Отключиться();
	
КонецПроцедуры

// Получить участников видео чатов
//
// Параметры:
//  ИдентификаторыЧатов - Массив - Идентификаторы чатов, по которым необходимо выполнить выборку
// 
// Возвращаемое значение:
//  ТаблицаЗначений - выгрузка ИдентификаторЧата, Пользователь из регистра сведений Участник видео-чатов
//
Функция ПолучитьУчастниковВидеоЧатов(ИдентификаторыЧатов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	УчастникиВидеоЧатов.ИдентификаторЧата КАК ИдентификаторЧата,
	|	УчастникиВидеоЧатов.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.УчастникиВидеоЧатов КАК УчастникиВидеоЧатов
	|ГДЕ
	|	&УсловиеПоИдентификаторам";
	
	Если ЗначениеЗаполнено(ИдентификаторыЧатов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификаторам",
			"УчастникиВидеоЧатов.ИдентификаторЧата В(&ИдентификаторыЧатов)");
		
		Запрос.УстановитьПараметр("ИдентификаторыЧатов", ИдентификаторыЧатов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ
			|	&УсловиеПоИдентификаторам", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область Инициализация

// Инициализирует таблицу значений для хранения параметров пользовательской функции.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу параметров функций:
// * Номер - Число - Номер параметра
// * Параметр - Строка - Наименование параметра
// * Значение - Произвольный - Значение параметра
Функция ИнициализироватьТаблицуПараметровФункций() Экспорт

	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Номер"		, ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаПараметров.Колонки.Добавить("Параметр"	, ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПараметров.Колонки.Добавить("Значение"	, Неопределено);

	Возврат ТаблицаПараметров;

КонецФункции

// Инициализирует таблицу значений для хранения данных сообщений бота.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу параметров функций:
//   * ИдентификаторСообщения - Число - Внутренний идентификатор сообщения
//   * Дата - Дата - Дата сообщения
//   * Текст - Строка - Текст сообщения
//   * ИдентификаторЧата - Строка - Идентификатор чата
Функция ИнициализироватьТаблицуСообщенийПользователя() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторОбновления"	, ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Таблица.Колонки.Добавить("ИдентификаторСообщения"	, ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Таблица.Колонки.Добавить("ОтветНа_Идентификатор"	, ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Таблица.Колонки.Добавить("ОтветНа_Чат"				, ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Таблица.Колонки.Добавить("Дата"						, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("Текст"					, ОбщегоНазначения.ОписаниеТипаСтрока(300));
	Таблица.Колонки.Добавить("ИдентификаторЧата"		, ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	Таблица.Колонки.Добавить("ЭтоInlineMode"			, Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("НаименованиеЧата"			, ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Таблица.Колонки.Добавить("ИдентификаторПользователя", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Таблица.Колонки.Добавить("СодержимоеСообщения"		, ОбщегоНазначения.ОписаниеТипаСтрока(40));
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти // Инициализация

#Область РегламентныеЗадания

// Добавляет новый экземпляр регламентого задания "Выполнение задания бота" по выбранному заданию.
// 
// Параметры:
//  ЗаданиеБотаСсылка - СправочникСсылка.ЗаданияБотов - Задание бота ссылка
// 
// Возвращаемое значение:
//  РегламентноеЗадание - Экземпляр добавленного регламентного задания
Функция ДобавитьЭкземплярЗаданияВыполнениеЗаданияБота(ЗаданиеБотаСсылка) Экспорт

	ПараметрыЗадания = Новый Структура;
	НаименованиеРеглЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru = 'Выполнение задания бота: выполнение задания бота по настройке ""%1""'", ЗаданиеБотаСсылка.Наименование);
	ПараметрыЗадания.Вставить("Наименование", НСтр(НаименованиеРеглЗадания));
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ВыполнениеЗаданийБотов);

	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(ЗаданиеБотаСсылка);
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);

	КлючЗадания = Строка(ЗаданиеБотаСсылка.УникальныйИдентификатор());
	ПараметрыЗадания.Вставить("Ключ", КлючЗадания);
	ПараметрыЗадания.Вставить("Расписание", Новый РасписаниеРегламентногоЗадания);

	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);

	Возврат РегламентноеЗадание;

КонецФункции

// Добавляет новый экземпляр регламентого задания "Получение обновлений ботов" по выбранному боту.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
// 
// Возвращаемое значение:
//  РегламентноеЗадание - Добавить экземпляр задания получение обновлений
Функция ДобавитьЭкземплярЗаданияПолучениеОбновлений(БотСсылка) Экспорт

	ПараметрыЗадания = Новый Структура;
	НаименованиеРеглЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru = 'Получение обновлений бота: получение обновлений бота ""%1""'", БотСсылка.Наименование);
	ПараметрыЗадания.Вставить("Наименование", НСтр(НаименованиеРеглЗадания));
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеОбновленийБотов);

	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(БотСсылка);
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);

	КлючЗадания = Строка(БотСсылка.УникальныйИдентификатор());
	ПараметрыЗадания.Вставить("Ключ", КлючЗадания);
	ПараметрыЗадания.Вставить("Расписание", Новый РасписаниеРегламентногоЗадания);

	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);

	Возврат РегламентноеЗадание;

КонецФункции

#КонецОбласти // РегламентныеЗадания

#Область ОбслуживаниеРегистров

// Добавляет запись в регистр сведений Выполнение заданий ботов.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  Задание - СправочникСсылка.ЗаданияБотов - Задание
//  НомерШага - Число - Номер шага
//  ИдентификаторСообщения - Число - Идентификатор сообщения
//  ДатаСообщения - Дата - Дата сообщения
Процедура ДобавитьЗаписьВыполненияЗаданийБотов(Бот, Пользователь, Задание, НомерШага, ИдентификаторСообщения, ДатаСообщения) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"			, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"	, Пользователь);
	ПараметрыЗаписи.Вставить("Задание"		, Задание);
	ПараметрыЗаписи.Вставить("НомерШага"	, НомерШага);
	ПараметрыЗаписи.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	ПараметрыЗаписи.Вставить("ДатаСообщения", ДатаСообщения);
	
	РегистрыСведений.ВыполнениеЗаданийБотов.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

// Изменяет запись в регистре сведений Выполнение заданий ботов.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  Задание - СправочникСсылка.ЗаданияБотов - Задание
//  НомерШага - Число - Номер шага
//  ИдентификаторСообщения - Число - Идентификатор сообщения
//  ОтветПользователя - Строка - Сообщение пользователя
//  ДатаСообщения - Дата - Дата сообщения
//  БезИдентификатора - Булево - Если Истина, то отбор записи по идентификатору сообщения не ставится
Процедура ИзменитьЗаписьВыполненияЗаданийБотов(Бот, Пользователь, Задание, НомерШага,
	ИдентификаторСообщения, ОтветПользователя = Неопределено, ДатаСообщения = Неопределено,
	БезИдентификатора = Ложь, ТолькоПоследнее = Ложь) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"				, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"		, Пользователь);
	ПараметрыЗаписи.Вставить("Задание"			, Задание);
	ПараметрыЗаписи.Вставить("НомерШага"		, НомерШага);
	Если ТолькоПоследнее Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Период ИЗ РегистрСведений.ВыполнениеЗаданийБотов.СрезПоследних(&Период, Бот = &Бот И Пользователь = &Пользователь И Задание = &Задание И НомерШага = &НомерШага)";
		Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
		Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		ВыборкаРезультатаЗапроса.Следующий();
		ПараметрыЗаписи.Вставить("Период"		, ВыборкаРезультатаЗапроса.Период);
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	ПараметрыЗаписи.Вставить("ОтветПользователя", ОтветПользователя);
	ПараметрыЗаписи.Вставить("ДатаСообщения"	, ДатаСообщения);
	
	РегистрыСведений.ВыполнениеЗаданийБотов.ИзменитьЗапись(ПараметрыЗаписи, БезИдентификатора);
	
КонецПроцедуры

// Удаляет запись из регистра сведений Выполнение заданий ботов.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  Задание - СправочникСсылка.ЗаданияБотов, Неопределено - Задание
//  НомерШага - Число, Неопределено - Номер шага
//  ИдентификаторСообщения - Число, Неопределено - Идентификатор сообщения
Процедура УдалитьЗаписьВыполненияЗаданийБотов(Бот, Пользователь, Задание = Неопределено,
	НомерШага = Неопределено, ИдентификаторСообщения = Неопределено) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"			, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"	, Пользователь);
	Если ЗначениеЗаполнено(Задание) Тогда
		ПараметрыЗаписи.Вставить("Задание"		, Задание);
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерШага) Тогда
		ПараметрыЗаписи.Вставить("НомерШага"	, НомерШага);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ПараметрыЗаписи.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	КонецЕсли;
	
	РегистрыСведений.ВыполнениеЗаданийБотов.УдалитьЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

// Добавляет запись в регистр сведений Сообщения пользователя боту.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
//  ИдентификаторСообщения - Число - Идентификатор сообщения
//  ТипСообщения - ПеречислениеСсылка.ТипыСообщенийПользователяБота - Тип сообщения
//  Текст - Строка - Текст
//  ИдентификаторОтвета - Число - Идентификатор ответа
//  ИдентификаторЧата - Число - Идентификатор чата
//  ПервоначальноеСообщение - Число - Идентификатор первоначального сообщения пользователя в переписке
//  Получатель - Неопределено, СправочникСсылка.Боты, СправочникСсылка.Пользователи - адресат сообщения
Процедура ДобавитьЗаписьСообщенияПользователейБотов(Бот, Пользователь,
	ИдентификаторСообщения, ТипСообщения, Текст, ИдентификаторОтвета,
	ИдентификаторЧата = 0, ПервоначальноеСообщение = 0, Получатель = Неопределено) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"			, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"	, Пользователь);
	ПараметрыЗаписи.Вставить("ИдентификаторСообщения"	, ИдентификаторСообщения);
	ПараметрыЗаписи.Вставить("ТипСообщения"	, ТипСообщения);
	ПараметрыЗаписи.Вставить("Текст"		, Текст);
	ПараметрыЗаписи.Вставить("ИдентификаторОтвета"		, ИдентификаторОтвета);
	ПараметрыЗаписи.Вставить("ИдентификаторЧата"		, ИдентификаторЧата);
	ПараметрыЗаписи.Вставить("ПервоначальноеСообщение"	, ПервоначальноеСообщение);
	Если Получатель = Неопределено Тогда
		ПараметрыЗаписи.Вставить("Получатель", Бот);
	Иначе
		ПараметрыЗаписи.Вставить("Получатель", Получатель);
	КонецЕсли;
	
	РегистрыСведений.СообщенияПользователейБотов.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

// Изменяет запись в регистр сведений Сообщения пользователя боту.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
//  ИдентификаторСообщения - Число - Идентификатор сообщения
//  ТипСообщения - ПеречислениеСсылка.ТипыСообщенийПользователяБота - Тип сообщения
//  Текст - Строка - Текст
//  ИдентификаторОтвета - Число - Идентификатор ответа
//  ИдентификаторЧата - Число - Идентификатор чата
//  ПервоначальноеСообщение - Число - Идентификатор первоначального сообщения пользователя в переписке
//  Получатель - Неопределено, СправочникСсылка.Боты, СправочникСсылка.Пользователи - адресат сообщения пользователя
Процедура ИзменитьЗаписьСообщенияПользователейБотов(Бот, Пользователь,
	ИдентификаторСообщения, ТипСообщения, Текст, ИдентификаторОтвета,
	ИдентификаторЧата = 0, ПервоначальноеСообщение = 0, Получатель = Неопределено) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"			, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"	, Пользователь);
	ПараметрыЗаписи.Вставить("ИдентификаторСообщения"	, ИдентификаторСообщения);
	ПараметрыЗаписи.Вставить("ТипСообщения"	, ТипСообщения);
	ПараметрыЗаписи.Вставить("Текст"		, Текст);
	ПараметрыЗаписи.Вставить("ИдентификаторОтвета"		, ИдентификаторОтвета);
	ПараметрыЗаписи.Вставить("ИдентификаторЧата"		, ИдентификаторЧата);
	ПараметрыЗаписи.Вставить("ПервоначальноеСообщение"	, ПервоначальноеСообщение);
	Если Получатель = Неопределено Тогда
		ПараметрыЗаписи.Вставить("Получатель", Бот);
	Иначе
		ПараметрыЗаписи.Вставить("Получатель", Получатель);
	КонецЕсли;
	
	РегистрыСведений.СообщенияПользователейБотов.ИзменитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

// Удаляет запись из регистра сведений Сообщения пользователя боту.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
//  ИдентификаторСообщения - Число - Идентификатор сообщения
Процедура УдалитьЗаписьСообщенияПользователейБотов(Бот, Пользователь, ИдентификаторСообщения) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"			, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"	, Пользователь);
	ПараметрыЗаписи.Вставить("ИдентификаторСообщения"	, ИдентификаторСообщения);
	
	РегистрыСведений.СообщенияПользователейБотов.УдалитьЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

// Добавляет или изменяет запись регистра сведений Отрытое меню пользователя бота.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
//  Меню - СправочникСсылка.ВложенностьКнопокМеню - Активное меню пользователя
Процедура ДобавитьИзменитьЗаписьОткрытогоМенюПользователя(Бот, Пользователь, ВложенностьКнопок) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"			, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"	, Пользователь);
	ПараметрыЗаписи.Вставить("Меню"			, ВложенностьКнопок);
	
	РегистрыСведений.ОткрытоеМенюПользователяБота.ДобавитьИзменитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

// Удаляет запись из регистра сведений Отрытое меню пользователя бота.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
Процедура УдалитьЗаписьОткрытогоМенюПользователя(Бот, Пользователь) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Бот"				, Бот);
	ПараметрыЗаписи.Вставить("Пользователь"		, Пользователь);
	
	РегистрыСведений.ОткрытоеМенюПользователяБота.УдалитьЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

// Добавляет или изменяет запись регистра сведений Участники видео чатов.
// 
// Параметры:
//  ИдентификаторЧата - Число, Неопределено - Идентификатор чата
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
Процедура ДобавитьИзменитьЗаписьУчастниковВидеоЧатов(ИдентификаторЧата, Пользователь) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИдентификаторЧата", ИдентификаторЧата);
	ПараметрыЗаписи.Вставить("Пользователь"		, Пользователь);
	
	РегистрыСведений.УчастникиВидеоЧатов.ДобавитьИзменитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

// Удаляет запись из регистра сведений Участники видео чатов.
// 
// Параметры:
//  ИдентификаторЧата - Число, Неопределено - Идентификатор чата
//  Пользователь - СправочникСсылка.Пользователи -  Пользователь
Процедура УдалитьЗаписьУчастниковВидеоЧатов(ИдентификаторЧата = Неопределено, Пользователь = Неопределено) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	Если ЗначениеЗаполнено(ИдентификаторЧата) Тогда
		ПараметрыЗаписи.Вставить("ИдентификаторЧата", ИдентификаторЧата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ПараметрыЗаписи.Вставить("Пользователь", Пользователь);
	КонецЕсли;
	
	РегистрыСведений.УчастникиВидеоЧатов.УдалитьЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти // ОбслуживаниеРегистров

#КонецОбласти // СлужебныйПрограммныйИнтерфейс