#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ЭтоГруппа Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ДанныеЗаполнения.Свойство("Наименование", Наименование);
			ДанныеЗаполнения.Свойство("Контекст", Контекст);
			ДанныеЗаполнения.Свойство("КодПодпрограммы", КодПодпрограммы);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контекст) Тогда
			Контекст = Перечисления.КонтекстыВыполненияПользовательскихФункций.Произвольный;
		КонецЕсли;
		
		Если ПустаяСтрока(КодПодпрограммы) Тогда
			КодПодпрограммы = СтрШаблон("%1Результат = ", КодПодпрограммы + Символы.ПС);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из Переменные Цикл
		
		НомерСтроки = СтрокаТаблицы.НомерСтроки - 1;
		
		Попытка
			СвойствоДоступно = СтруктураПараметров.Свойство(СтрокаТаблицы.Имя);
		Исключение
			СвойствоДоступно = Ложь;
		КонецПопытки;
		
		Если Не СвойствоДоступно Тогда
			
			Попытка
				СтруктураПараметров.Вставить(СтрокаТаблицы.Имя);
			Исключение
				
				ТекстСообщения = СтрШаблон(НСтр("ru='Обнаружено некорректное имя ""%1"" в таблице ""Переменные"".';
					|en='Found an incorrect name ""%1"" in table ""Variables.""'"),СтрокаТаблицы.Имя);
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения, ЭтотОбъект, СтрШаблон("Переменные[%1].Имя", НомерСтроки),, Отказ);
			КонецПопытки;
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru='Обнаружено дублирующееся имя ""%1"" в таблице ""Переменные"".';
				|en='Found a duplicate name ""%1"" in the table ""Variables.""'"), СтрокаТаблицы.Имя);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ЭтотОбъект, СтрШаблон("Переменные[%1].Имя", НомерСтроки),, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМакетКаркасаОтладки() Экспорт
	
	Возврат ПолучитьМакет("КаркасОтладки");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid object call on client'");
#КонецЕсли