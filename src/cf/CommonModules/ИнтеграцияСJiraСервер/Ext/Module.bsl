
#Область ПрограммныйИнтерфейс

Функция ДобавитьЭкземплярЗаданияИнтеграцииСJira(НастройкиИнтеграцииСJiraСсылка) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	НаименованиеРеглЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru = 'Интеграция с JIRA: интеграция с JIRA по настройке ""%1""'", НастройкиИнтеграцииСJiraСсылка.Наименование);
	ПараметрыЗадания.Вставить("Наименование"	, НСтр(НаименованиеРеглЗадания));
	ПараметрыЗадания.Вставить("Использование"	, Истина);
	ПараметрыЗадания.Вставить("Метаданные"		, Метаданные.РегламентныеЗадания.ИнтеграцияСJira);
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(НастройкиИнтеграцииСJiraСсылка);
	ПараметрыЗадания.Вставить("Параметры"		, ПараметрыРегламентногоЗадания);
	
	КлючЗадания = Строка(НастройкиИнтеграцииСJiraСсылка.УникальныйИдентификатор());
	ПараметрыЗадания.Вставить("Ключ"			, КлючЗадания);
	ПараметрыЗадания.Вставить("Расписание"		, Новый РасписаниеРегламентногоЗадания());
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Выполнить интеграцию с jira по расписанию.
// 
// Параметры:
//  НастройкиИнтеграцииСJiraСсылка - СправочникСсылка.НастройкиИнтеграцииСJira - настройки интеграции запущенного задания
Процедура ВыполнитьИнтеграциюСJiraПоРасписанию(НастройкиИнтеграцииСJiraСсылка) Экспорт
	
	НастройкиИнтеграции = ПолучитьНастройкуИнтеграции(НастройкиИнтеграцииСJiraСсылка);
	
	Если ТипЗнч(НастройкиИнтеграции) = Тип("Структура") Тогда
		Сессия = КоннекторHTTP.СоздатьСессию();
		ЗаполнитьПараметрыАутентификацииСессии(Сессия, НастройкиИнтеграции);
		
		ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
		ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
		ПараметрыСпискаЗапросов = ПодготовитьПараметрыСпискаЗапросов(ДатаНачала, ДатаОкончания);
		ВыполнитьПолучениеЗадач(Сессия, НастройкиИнтеграции, ПараметрыСпискаЗапросов);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить интеграцию с jira вручную.
// 
// Параметры:
//  НастройкиИнтеграцииСJiraСсылка - СправочникСсылка.НастройкиИнтеграцииСJira - настройки интеграции запущенного задания
Процедура ВыполнитьИнтеграциюСJiraВручную(НастройкиИнтеграцииСJiraСсылка) Экспорт
	
	НастройкиИнтеграции = ПолучитьНастройкуИнтеграции(НастройкиИнтеграцииСJiraСсылка);
	
	Если ТипЗнч(НастройкиИнтеграции) = Тип("Структура") Тогда
		Сессия = КоннекторHTTP.СоздатьСессию();
		ЗаполнитьПараметрыАутентификацииСессии(Сессия, НастройкиИнтеграции);
		ПараметрыСпискаЗапросов = ПодготовитьПараметрыСпискаЗапросов();
		ВыполнитьПолучениеЗадач(Сессия, НастройкиИнтеграции, ПараметрыСпискаЗапросов);
	КонецЕсли;
	
КонецПроцедуры

#Область ОписаниеМетодов

Процедура ВыполнитьПолучениеКомпонентов(Сессия, НастройкиИнтеграции) Экспорт
	
	Метод = Справочники.МетодыИнтеграции.ПолучениеКомпонентовИзJira;
	
	СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
	СтруктураОтвета.МетодИнтеграции			= Метод;
	СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
	СтруктураОтвета.ИнтегрируемаяСистема	= НастройкиИнтеграции.ИнтегрируемаяСистема;
	
	Попытка
	
		URL = СформироватьURLПолученияКомпонентов(НастройкиИнтеграции, Метод);
		ВремяНачалаВызова = ТекущаяДатаСеанса();
		ОтветHTTP = КоннекторHTTP.Get(URL, , , Сессия);
		СтруктураОтвета.ДлительностьВызова = ТекущаяДатаСеанса() - ВремяНачалаВызова;
		СтруктураОтвета.ЗапросВходящий = КоннекторHTTP.КакТекст(ОтветHTTP);
		
		Если ОтветHTTP.КодСостояния < 300 Тогда
			МассивJSON = КоннекторHTTP.КакJson(ОтветHTTP);
			
			Для Каждого ЭлементМассиваJSON Из МассивJSON Цикл
				СоздатьОбновитьКомпоненты(СтруктураОтвета, ЭлементМассиваJSON);
			КонецЦикла;
		Иначе
			ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
				ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
			СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = "ru = 'Ошибка при получении компонентов из JIRA'";
		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		
	КонецПопытки;
	
	ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Истина);
	
КонецПроцедуры

Процедура ВыполнитьПолучениеЗадач(Сессия, НастройкиИнтеграции, ПараметрыСпискаЗапросов = Неопределено) Экспорт
	
	Метод = Справочники.МетодыИнтеграции.ПоискПоJQLЗапросуВJira;
	
	URL = СформироватьURLПолученияЗадач(НастройкиИнтеграции, Метод);		
	
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ТелоЗапросаJSON = ПолучитьТелоЗапросаПолученияЗадач(НастройкиИнтеграции, ПараметрыСпискаЗапросов);
	
	ВсегоЭлементов	= ПараметрыСпискаЗапросов.ВсегоВыбрать;
	РазмерПорции	= ПараметрыСпискаЗапросов.РазмерПорции;
	ПозицияНачала	= ПараметрыСпискаЗапросов.ПозицияНачала;
	
	ДанныеОЗадачах = ИнициализироватьТаблицуПолученныхЗадач();
	ДанныеОВремени = ИнициализироватьТаблицуДанныхОВремени();
	
	Пока ПозицияНачала < ВсегоЭлементов Цикл
		
		СтруктураОтвета = ИнтеграцииСервер.ПолучитьСтруктуруЗаписиИстории();
		СтруктураОтвета.МетодИнтеграции			= Метод;
		СтруктураОтвета.ФорматЗапросаИнтеграции	= Перечисления.ФорматыЗапросовИнтеграции.JSON;
		СтруктураОтвета.ИнтегрируемаяСистема	= НастройкиИнтеграции.ИнтегрируемаяСистема;
		
		Попытка
		
			ДобавитьВЗапросИнформациюРазмераПорцииДанных(ТелоЗапросаJSON, ПозицияНачала, РазмерПорции);
			ДополнительныеПараметрыЗапроса.Вставить("Json", ТелоЗапросаJSON);
			
			ОтветHTTP = КоннекторHTTP.Post(URL, , ДополнительныеПараметрыЗапроса, Сессия);
			
			СтруктураОтвета.ДлительностьВызова = ОтветHTTP.ВремяВыполнения / 1000; // переводим из миллисекунд
			СтруктураОтвета.ЗапросИсходящий	= ПолучитьЗапросТекстомИзСоответствияJSON(ТелоЗапросаJSON);
			СтруктураОтвета.ЗапросВходящий	= КоннекторHTTP.КакТекст(ОтветHTTP);
			
			Если ОтветHTTP.КодСостояния < 300 Тогда
				СоответствиеJSON = КоннекторHTTP.КакJson(ОтветHTTP);
				
				ВсегоЭлементов = Мин(ВсегоЭлементов, СоответствиеJSON.Получить("total"));
				ИнкрементПолучено = 0;
				КонвертироватьВходящийЗапросПолученияЗадач(ДанныеОЗадачах,
					СоответствиеJSON, ДанныеОВремени, ИнкрементПолучено, НастройкиИнтеграции.Сервер);
				
				ПозицияНачала = ПозицияНачала + ИнкрементПолучено;
		
				ОтветHTTP = Неопределено;
			Иначе
				ТекстСообщения = СтрШаблон("ru = 'Код состояния %1: %2'", ОтветHTTP.КодСостояния,
					ИнтеграцииСервер.РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
				СтруктураОтвета.ОписаниеОшибки = НСтр(ТекстСообщения);
				
				ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Истина);
				Прервать;
			КонецЕсли;
		
		Исключение
	
			ТекстСообщения = "ru = 'Ошибка при получении задач из JIRA'";
			СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
				НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
			
		КонецПопытки;
	
	КонецЦикла;
	
	Если ПустаяСтрока(СтруктураОтвета.ОписаниеОшибки) Тогда
		МассивИдентификаторовПользователей = Новый Массив;
		МассивИменПользователей = Новый Массив;
		
		ЗаполнитьУникальныеИдентификаторыИИменаПользователей(ДанныеОЗадачах,
			МассивИдентификаторовПользователей, МассивИменПользователей);
		
		ТаблицаСоответствийПользователейСистем = ИнтеграцииСервер.ПолучитьТаблицуСоответствийПользователейСистем(
			МассивИдентификаторовПользователей, МассивИменПользователей, НастройкиИнтеграции.НастройкиИнтеграции);
		
		СоздатьОбновитьЗадачи(СтруктураОтвета, ДанныеОЗадачах, ТаблицаСоответствийПользователейСистем, НастройкиИнтеграции.НастройкиИнтеграции);
		ЗарегистрироватьДанныеОВремениЗадач(СтруктураОтвета, ДанныеОВремени, ТаблицаСоответствийПользователейСистем, НастройкиИнтеграции.Проект);
		
		ИнтеграцииСервер.СоздатьСообщениеИсторииИнтеграции(СтруктураОтвета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОписаниеМетодов

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область Общие

Функция ПолучитьНастройкуИнтеграции(НастройкиИнтеграцииСJiraСсылка) Экспорт
	
	РеквизитыНастройкиИнтеграцииСJira = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиИнтеграцииСJiraСсылка, "КодПроекта, НастройкиИнтеграции, Проект");
	
	НастройкиИнтеграции = ИнтеграцииСервер.ПолучитьСтруктуруНастроекИнтеграции(
		РеквизитыНастройкиИнтеграцииСJira.НастройкиИнтеграции);
	
	Для Каждого КлючИЗначение Из РеквизитыНастройкиИнтеграцииСJira Цикл
		НастройкиИнтеграции.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат НастройкиИнтеграции;
	
КонецФункции

Процедура ЗаполнитьПараметрыАутентификацииСессии(Сессия, НастройкиИнтеграции)
	
	Аутентификация = Новый Структура;
	
	Аутентификация.Вставить("Пользователь"	, НастройкиИнтеграции.Логин.Значение);
	Аутентификация.Вставить("Пароль"		, НастройкиИнтеграции.Пароль.Значение);
	
	Сессия.Вставить("Аутентификация", Аутентификация);
	
КонецПроцедуры

Функция ПолучитьЗапросТекстомИзСоответствияJSON(ТелоЗапросаJSON)
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапросаJSON, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция ПолучитьЗначениеПоляСоответствияJSON(ПолеВыборки, ПутьПоляСоответствия, ЭтоДата = Ложь)
	
	МассивПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьПоляСоответствия, ".", Истина, Истина);
	
	Если МассивПути.Количество() Тогда
		ЗначениеПоля = ПолеВыборки;
		Для Каждого ЭлементПути Из МассивПути Цикл
			Если ЗначениеПоля[ЭлементПути] <> Неопределено Тогда
				ЗначениеПоля = ЗначениеПоля[ЭлементПути];
			Иначе
				ЗначениеПоля = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ПолеВыборки[ПутьПоляСоответствия] <> Неопределено Тогда
			ЗначениеПоля = ПолеВыборки[ПутьПоляСоответствия];
		Иначе
			ЗначениеПоля = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДата Тогда
		ЗначениеИскомое = ПрочитатьДатуJSON(ЗначениеПоля, ФорматДатыJSON.ISO);
	Иначе
		ЗначениеИскомое = ЗначениеПоля;
	КонецЕсли;
	
	Возврат ЗначениеИскомое;
	
КонецФункции

Процедура ЗаполнитьСтруктуруИзСоответствияJSON(СтруктураДанных, СоответствиеJSON)
	
	Для Каждого ЭлементыСтруктуры Из СоответствиеJSON Цикл
		Если СтруктураДанных.Свойство(ЭлементыСтруктуры.Ключ) Тогда
			СтруктураДанных[ЭлементыСтруктуры.Ключ] = ЭлементыСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСуществуюшийОбъектИлиСоздатьНовыйПоИдентификатору(СтруктураОтвета, ВнешнийИдентификатор, НаименованиеСправочника)
	
	СтруктураВозврата = Новый Структура("ЭлементОбъект, СозданОбновлен, Ошибка");
	Если Не ЗначениеЗаполнено(ВнешнийИдентификатор) Тогда
		СтруктураВозврата.Ошибка = Истина;
	Иначе
		СтруктураВозврата.Ошибка = Ложь;
	КонецЕсли;
	
	ЭлементСсылка = Справочники[НаименованиеСправочника].НайтиПоРеквизиту("ВнешнийИдентификаторJira", ВнешнийИдентификатор);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
		
		Попытка
			ЭлементОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтрШаблон("ru = 'Не удалось заблокировать объект %1'", ЭлементОбъект);
			ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
			
			СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
				НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
			
			СтруктураВозврата.Ошибка = Истина;
		КонецПопытки;
		
		СозданОбновлен = Перечисления.СозданОбновлен.Обновлен;
		
	Иначе
		ЭлементОбъект = Справочники[НаименованиеСправочника].СоздатьЭлемент();
		ЭлементОбъект.ВнешнийИдентификаторJira = ВнешнийИдентификатор;
		
		СозданОбновлен = Перечисления.СозданОбновлен.Создан;
	КонецЕсли;
	
	СтруктураВозврата.ЭлементОбъект		= ЭлементОбъект;
	СтруктураВозврата.СозданОбновлен	= СозданОбновлен;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти // Общие

#Область ПодготовкаТелаЗапроса

Функция ПодготовитьПараметрыСпискаЗапросов(ДатаНачала = Неопределено, ДатаОкончания = Неопределено)

	ПараметрыСпискаЗапросов = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ПараметрыСпискаЗапросов.Вставить("ДатаНачалаВыборки", ДатаНачала);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПараметрыСпискаЗапросов.Вставить("ДатаОкончанияВыборки", ДатаОкончания);
	КонецЕсли;
	
	ПараметрыСпискаЗапросов.Вставить("ВсегоВыбрать"	, 500);
	ПараметрыСпискаЗапросов.Вставить("РазмерПорции"	, 100);
	ПараметрыСпискаЗапросов.Вставить("ПозицияНачала", 0);
	
	Возврат ПараметрыСпискаЗапросов;	

КонецФункции

Функция ПолучитьТелоЗапросаПолученияЗадач(НастройкиИнтеграции, ДополнительныеПараметры)
	
	ДанныеJSON = Новый Соответствие;
	
	ЗапросJQL = СтрШаблон("project = '%1'", НастройкиИнтеграции.КодПроекта);
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ДатаНачалаВыборки") Тогда
		ЗапросJQL = ЗапросJQL + СтрШаблон(" & updated >= '%1' & updated <= '%2'",
			Формат(ДополнительныеПараметры.ДатаНачалаВыборки, "ДФ='гггг/ММ/дд ЧЧ:мм'"),
			Формат(ДополнительныеПараметры.ДатаОкончанияВыборки, "ДФ='гггг/ММ/дд ЧЧ:мм'"));
		
		ЗапросJQL = ЗапросJQL + " or issueFunction in parentsOf(""" + ЗапросJQL + """)";
	КонецЕсли;
	
	ДанныеJSON.Вставить("jql"	, ЗапросJQL);
	ДанныеJSON.Вставить("fields", Новый Массив);
	
	fields = ДанныеJSON.Получить("fields");
	fields.Добавить("id");
	fields.Добавить("key");
	fields.Добавить("project");
	fields.Добавить("updated");
	fields.Добавить("issuetype");
	fields.Добавить("worklog");
	fields.Добавить("parent");
	
	fields.Добавить("self");
	fields.Добавить("created");
	fields.Добавить("priority");
	fields.Добавить("labels");
	fields.Добавить("status");
	fields.Добавить("creator");
	fields.Добавить("reporter");
	fields.Добавить("description");
	fields.Добавить("summary");
	fields.Добавить("assignee");
	fields.Добавить("comment");
	
	fields.Добавить("customfield_10006");
	fields.Добавить("timetracking");
	fields.Добавить("components");
	
	Возврат ДанныеJSON;
	
КонецФункции

Процедура ДобавитьВЗапросИнформациюРазмераПорцииДанных(ДанныеJSON, ПозицияНачала, РазмерПорции)
	
	ДанныеJSON.Вставить("startAt"	, ПозицияНачала);
	ДанныеJSON.Вставить("maxResults", РазмерПорции);
	
КонецПроцедуры

#КонецОбласти // ПодготовкаТелаЗапроса

#Область КонвертацияДанных

#Область ПолучениеЗадач

Процедура КонвертироватьВходящийЗапросПолученияЗадач(ДанныеОЗадачах,
	СоответствиеJSON, ДанныеОВремени, ИнкрементПолучено, АдресСервера)
	
	issues = СоответствиеJSON.Получить("issues");
	
	Если Не issues = Неопределено Тогда
		
		ИнкрементПолучено = issues.Количество();
		
		Для Каждого issue Из issues Цикл
			
			fields = issue.Получить("fields");
			
			Если Не fields = Неопределено Тогда
				
				НоваяЗапись = ДанныеОЗадачах.Добавить();
				
				НоваяЗапись.ID		= ПолучитьЗначениеПоляСоответствияJSON(issue, "id");
				НоваяЗапись.Кey		= ПолучитьЗначениеПоляСоответствияJSON(issue, "key");
				НоваяЗапись.Self	= ПолучитьЗначениеПоляСоответствияJSON(issue, "self");
				
				НоваяЗапись.Summary			= ПолучитьЗначениеПоляСоответствияJSON(fields, "summary");
				НоваяЗапись.Updated			= ПолучитьЗначениеПоляСоответствияJSON(fields, "updated", Истина);
				НоваяЗапись.IssueType_Name	= ПолучитьЗначениеПоляСоответствияJSON(fields, "issuetype.name");
				НоваяЗапись.Project_Key		= ПолучитьЗначениеПоляСоответствияJSON(fields, "project.key");
				НоваяЗапись.Parent			= ПолучитьЗначениеПоляСоответствияJSON(fields, "parent.key");
				НоваяЗапись.EpicLink		= ПолучитьЗначениеПоляСоответствияJSON(fields, "customfield_10006");
				НоваяЗапись.Priority_Name	= ПолучитьЗначениеПоляСоответствияJSON(fields, "priority.name");
				НоваяЗапись.Labels			= ПолучитьЗначениеПоляСоответствияJSON(fields, "labels");
				НоваяЗапись.BrowseLink		= СтрШаблон("https://%1/browse/%2", АдресСервера, НоваяЗапись.Кey);
				НоваяЗапись.Created			= ПолучитьЗначениеПоляСоответствияJSON(fields, "created", Истина);
				
				Оценка = ПолучитьЗначениеПоляСоответствияJSON(fields, "timetracking.originalEstimateSeconds");
				НоваяЗапись.Estimate		= ?(Оценка = Неопределено, 0, Оценка) / 3600;
				
				НоваяЗапись.Assignee = ИнициализироватьСтруктуруДанныхПользователя();
				AssigneeStructure = ПолучитьЗначениеПоляСоответствияJSON(fields, "assignee");
				Если AssigneeStructure <> Неопределено Тогда
					ЗаполнитьСтруктуруИзСоответствияJSON(НоваяЗапись.Assignee, AssigneeStructure);
				КонецЕсли;
				
				НоваяЗапись.Creator = ИнициализироватьСтруктуруДанныхПользователя();
				CreatorStructure = ПолучитьЗначениеПоляСоответствияJSON(fields, "creator");
				Если CreatorStructure <> Неопределено Тогда
					ЗаполнитьСтруктуруИзСоответствияJSON(НоваяЗапись.Creator, CreatorStructure);
				КонецЕсли;
				
				НоваяЗапись.Reporter = ИнициализироватьСтруктуруДанныхПользователя();
				ReporterStructure = ПолучитьЗначениеПоляСоответствияJSON(fields, "reporter");
				Если ReporterStructure <> Неопределено Тогда
					ЗаполнитьСтруктуруИзСоответствияJSON(НоваяЗапись.Reporter, ReporterStructure);
				КонецЕсли;
				
				НоваяЗапись.Status = ИнициализироватьСтруктуруДанныхСтатусовЗадач();
				StatusStructure = ПолучитьЗначениеПоляСоответствияJSON(fields, "status");
				Если StatusStructure <> Неопределено Тогда
					ЗаполнитьСтруктуруИзСоответствияJSON(НоваяЗапись.Status, StatusStructure);
				КонецЕсли;
				
				ComponentsArray = ПолучитьЗначениеПоляСоответствияJSON(fields, "components");
				Для Каждого ComponentElement Из ComponentsArray Цикл
					Компонента = ИнициализироватьСтруктуруДанныхКомпонент();
					ЗаполнитьСтруктуруИзСоответствияJSON(Компонента, ComponentElement);
					НоваяЗапись.Components.Добавить(Компонента);
				КонецЦикла;
				
				worklog = ПолучитьЗначениеПоляСоответствияJSON(fields, "worklog");
				Если Не worklog = Неопределено Тогда
					worklogs = ПолучитьЗначениеПоляСоответствияJSON(worklog, "worklogs");
					Если worklogs.Количество() > 0 Тогда
						Для Каждого oneworklog Из worklogs Цикл 
							
							НоваяЗаписьВремени = ДанныеОВремени.Добавить();
							
							НоваяЗаписьВремени.ID = ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "id");
							НоваяЗаписьВремени.Issue_Кey	= НоваяЗапись.Кey;
							НоваяЗаписьВремени.Author_Key	= ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "author.key");
							НоваяЗаписьВремени.Author_Email	= ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "author.emailAddress");
							НоваяЗаписьВремени.Created		= ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "created", Истина);
							НоваяЗаписьВремени.Updated		= ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "updated", Истина);
							НоваяЗаписьВремени.Started		= ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "started", Истина);
							НоваяЗаписьВремени.Comment		= ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "comment");
							
							НоваяЗаписьВремени.ДатаЗаписи	= ?(ЗначениеЗаполнено(НоваяЗаписьВремени.Updated),
								НачалоДня(НоваяЗаписьВремени.Updated), НачалоДня(НоваяЗаписьВремени.Created));
							
							Часы = ПолучитьЗначениеПоляСоответствияJSON(oneworklog, "timeSpentSeconds");
							НоваяЗаписьВремени.TimeSpent	= ?(Часы = Неопределено, 0, Часы) / 3600;
							
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуПолученныхЗадач()
	
	ДанныеОЗадачах = Новый ТаблицаЗначений;
	ДанныеОЗадачах.Колонки.Добавить("ID"			, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОЗадачах.Колонки.Добавить("IssueType_Name", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеОЗадачах.Колонки.Добавить("Updated"		, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОЗадачах.Колонки.Добавить("Кey"			, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОЗадачах.Колонки.Добавить("Project_Key"	, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОЗадачах.Колонки.Добавить("Parent"		, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОЗадачах.Колонки.Добавить("EpicLink"		, ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ДанныеОЗадачах.Колонки.Добавить("EpicName"		, ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеОЗадачах.Колонки.Добавить("Priority_Name"	, ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеОЗадачах.Колонки.Добавить("Labels"		, Новый ОписаниеТипов("Массив"));
	ДанныеОЗадачах.Колонки.Добавить("Assignee"		, Новый ОписаниеТипов("Структура"));
	ДанныеОЗадачах.Колонки.Добавить("BrowseLink"	, ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДанныеОЗадачах.Колонки.Добавить("Created"		, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОЗадачах.Колонки.Добавить("Creator"		, Новый ОписаниеТипов("Структура"));
	ДанныеОЗадачах.Колонки.Добавить("Reporter"		, Новый ОписаниеТипов("Структура"));
	ДанныеОЗадачах.Колонки.Добавить("Self"			, ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДанныеОЗадачах.Колонки.Добавить("Status"		, Новый ОписаниеТипов("Структура"));
	ДанныеОЗадачах.Колонки.Добавить("Components"	, Новый ОписаниеТипов("Массив"));
	ДанныеОЗадачах.Колонки.Добавить("Summary"		, ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДанныеОЗадачах.Колонки.Добавить("Estimate"		, ОбщегоНазначения.ОписаниеТипаЧисло(10, 2, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ДанныеОЗадачах;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхПользователя()
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("key");
	ДанныеПользователя.Вставить("emailAddress");
	ДанныеПользователя.Вставить("name");
	ДанныеПользователя.Вставить("displayName");
	
	Возврат ДанныеПользователя;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхКомпонент()
	
	ДанныеКомпоненты = Новый Структура;
	ДанныеКомпоненты.Вставить("id");
	ДанныеКомпоненты.Вставить("name");
	
	Возврат ДанныеКомпоненты;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхСтатусовЗадач()
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("id");
	ДанныеПользователя.Вставить("name");
	ДанныеПользователя.Вставить("description");
	
	Возврат ДанныеПользователя;
	
КонецФункции

Функция ИнициализироватьТаблицуДанныхОВремени()
	
	ДанныеОВремени = Новый ТаблицаЗначений;
	ДанныеОВремени.Колонки.Добавить("ID"			, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОВремени.Колонки.Добавить("Issue_Кey"		, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОВремени.Колонки.Добавить("Author_Key"	, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОВремени.Колонки.Добавить("Author_Email"	, ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ДанныеОВремени.Колонки.Добавить("Created"		, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОВремени.Колонки.Добавить("Updated"		, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОВремени.Колонки.Добавить("Started"		, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОВремени.Колонки.Добавить("Comment"		, ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ДанныеОВремени.Колонки.Добавить("TimeSpent"		, ОбщегоНазначения.ОписаниеТипаЧисло(10, 2, ДопустимыйЗнак.Неотрицательный));
	ДанныеОВремени.Колонки.Добавить("ДатаЗаписи"	, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ДанныеОВремени;
	
КонецФункции

#КонецОбласти // ПолучениеЗадач

#КонецОбласти // КонвертацияДанных

#Область ЗаполнениеОбъектов

Процедура СоздатьОбновитьКомпоненты(СтруктураОтвета, ЭлементМассиваJSON)
	
	ВнешнийИдентификатор = ЭлементМассиваJSON["id"];
	СтруктураОбъект = ПолучитьСуществуюшийОбъектИлиСоздатьНовыйПоИдентификатору(СтруктураОтвета, ВнешнийИдентификатор, "Компоненты");
	
	Если СтруктураОбъект.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентОбъект = СтруктураОбъект.ЭлементОбъект;
		
	КомпонентОбъект.Наименование = ЭлементМассиваJSON["name"];
	
	Попытка
		КомпонентОбъект.Записать();
		
		ОбъектИнтеграции = СтруктураОтвета.ОбъектыИнтеграции.Добавить();
		ОбъектИнтеграции.ОбъектИнтеграции	= КомпонентОбъект.Ссылка;
		ОбъектИнтеграции.СозданОбновлен		= СтруктураОбъект.СозданОбновлен;
		
		Если СтруктураОбъект.СозданОбновлен = Перечисления.СозданОбновлен.Обновлен Тогда
			ТекстСообщения = СтрШаблон("ru = 'Обновлен компонент ""%1""'", КомпонентОбъект);
		Иначе
			ТекстСообщения = СтрШаблон("ru = 'Создан компонент ""%1""'", КомпонентОбъект);
		КонецЕсли;
		ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
	Исключение
		ТекстСообщения = СтрШаблон("ru = 'Не удалось записать объект %1'", КомпонентОбъект);
		ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);

		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбновитьЗадачи(СтруктураОтвета, ДанныеОЗадачах, ТаблицаСоответствийПользователейСистем, НастройкиИнтеграции)
	
	Если Не ДанныеОЗадачах.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОРодителях = Новый ТаблицаЗначений;
	ДанныеОРодителях.Колонки.Добавить("ЗадачаПроекта"	, Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроектов"));
	ДанныеОРодителях.Колонки.Добавить("Родитель", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	ОбновленныеСтатусы = Новый Массив;
	
	ТаблицаМетокКомпетенций = ПолучитьТаблицуМетокКомпетенцийЗадач();
	
	Для Каждого СтрокаЗадача Из ДанныеОЗадачах Цикл
		
		ВнешнийИдентификатор = СтрокаЗадача.Кey;
		СтруктураОбъект = ПолучитьСуществуюшийОбъектИлиСоздатьНовыйПоИдентификатору(СтруктураОтвета, ВнешнийИдентификатор, "ЗадачиПроектов");
		
		Если СтруктураОбъект.Ошибка Тогда
			Возврат;
		КонецЕсли;
		
		ЗадачаОбъект = СтруктураОбъект.ЭлементОбъект;
		
		ЗадачаОбъект.ВнешнийИдентификаторJira	= СтрокаЗадача.Кey;	
		ЗадачаОбъект.Наименование				= СтрокаЗадача.Summary;
		ЗадачаОбъект.Оценка						= СтрокаЗадача.Estimate;
		ЗадачаОбъект.ТипЗадачи					= ПолучитьТипЗадачиПоНаименованию(СтрокаЗадача.IssueType_Name);
		ЗадачаОбъект.Приоритет					= ПолучитьПриоритетЗадачиПоНаименованию(СтрокаЗадача.Priority_Name);
		
		НастройкиИнтеграцииСJiraСсылка = Справочники.НастройкиИнтеграцииСJira.НайтиПоРеквизиту(
			"КодПроекта", СтрокаЗадача.Project_Key);
		Если ЗначениеЗаполнено(НастройкиИнтеграцииСJiraСсылка) Тогда
			ЗадачаОбъект.Проект = НастройкиИнтеграцииСJiraСсылка.Проект;
		КонецЕсли;
		
		ЗадачаОбъект.Метки.Очистить();
		Для Каждого ЭлементМетка Из СтрокаЗадача.Labels Цикл
			НоваяМетка = ЗадачаОбъект.Метки.Добавить();
			НоваяМетка.Метка = ЭлементМетка;
			
			ПоискКомпетенции = ТаблицаМетокКомпетенций.Найти(ЭлементМетка, "Метка");
			Если ПоискКомпетенции <> Неопределено Тогда
				НоваяМетка.Компетенция = ПоискКомпетенции.Компетенция;
			КонецЕсли;
		КонецЦикла;	
		
		ЗаполнитьСотрудниковЗадачи(СтруктураОтвета, ЗадачаОбъект, ТаблицаСоответствийПользователейСистем,
			СтрокаЗадача.Assignee, СтрокаЗадача.Creator, СтрокаЗадача.Reporter, НастройкиИнтеграции);
		ЗаполнитьКомпонентыЗадачи(СтруктураОтвета, ЗадачаОбъект, СтрокаЗадача.Components);
		
		Если ЗначениеЗаполнено(СтрокаЗадача.Parent) Тогда
			РодительЗадачи = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("ВнешнийИдентификаторJira", СтрокаЗадача.Parent);
			
			Если ЗначениеЗаполнено(РодительЗадачи) Тогда
				ЗадачаОбъект.Родитель = РодительЗадачи;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаЗадача.EpicLink) Тогда
			РодительЗадачи = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("ВнешнийИдентификаторJira", СтрокаЗадача.EpicLink);
		
			Если ЗначениеЗаполнено(РодительЗадачи) Тогда
				ЗадачаОбъект.Родитель = РодительЗадачи;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ЗадачаОбъект.Записать();
			
			Если Не ЗначениеЗаполнено(ЗадачаОбъект.Родитель) Тогда
				ИнформацияОРодителе = ДанныеОРодителях.Добавить();
				ИнформацияОРодителе.ЗадачаПроекта = ЗадачаОбъект.Ссылка;
				Если ЗначениеЗаполнено(СтрокаЗадача.Parent) Тогда
					ИнформацияОРодителе.Родитель = СтрокаЗадача.Parent;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЗадача.EpicLink) Тогда
					ИнформацияОРодителе.Родитель = СтрокаЗадача.EpicLink;
				КонецЕсли;
			КонецЕсли;
			
			ЗарегистрироватьОбновлениеСтатусовЗадач(СтруктураОтвета, ЗадачаОбъект.Ссылка, СтрокаЗадача.Status, ОбновленныеСтатусы);
			
			ОбъектИнтеграции = СтруктураОтвета.ОбъектыИнтеграции.Добавить();
			ОбъектИнтеграции.ОбъектИнтеграции	= ЗадачаОбъект.Ссылка;
			ОбъектИнтеграции.СозданОбновлен		= СтруктураОбъект.СозданОбновлен;
			
			Если СтруктураОбъект.СозданОбновлен = Перечисления.СозданОбновлен.Обновлен Тогда
				ТекстСообщения = СтрШаблон("ru = 'Обновлена задача ""%1""'", ЗадачаОбъект);
			Иначе
				ТекстСообщения = СтрШаблон("ru = 'Создана задача ""%1""'", ЗадачаОбъект);
			КонецЕсли;
			ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
		Исключение
			ТекстСообщения = СтрШаблон("ru = 'Не удалось записать объект %1'", ЗадачаОбъект);
			ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
	
			СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
				НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
			
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	ВыполнитьОтложенноеЗаполнениеРодителейЗадач(СтруктураОтвета, ДанныеОРодителях);
	
КонецПроцедуры

Функция ПолучитьТаблицуМетокКомпетенцийЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовИБ.Объект1 КАК Метка,
	|	СоответствияОбъектовИБ.Объект3 КАК Компетенция
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИБ КАК СоответствияОбъектовИБ
	|ГДЕ
	|	СоответствияОбъектовИБ.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипСоответствияОбъектовИБ.МеткаJiraКомпетенция)";
	
	ВыгрузкаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгрузкаРезультатаЗапроса;
	
КонецФункции

Процедура ЗаполнитьУникальныеИдентификаторыИИменаПользователей(ДанныеОЗадачах,
	МассивИдентификаторовПользователей, МассивИменПользователей)
	
	Для Каждого СтрокаЗадача Из ДанныеОЗадачах Цикл
		
		Если СтрокаЗадача.Assignee.Количество() Тогда
			Если СтрокаЗадача.Assignee.Свойство("key")
				И МассивИдентификаторовПользователей.Найти(СтрокаЗадача.Assignee.key) = Неопределено Тогда
				МассивИдентификаторовПользователей.Добавить(СтрокаЗадача.Assignee.key);
			КонецЕсли;
			
			Если СтрокаЗадача.Assignee.Свойство("name")
				И МассивИменПользователей.Найти(СтрокаЗадача.Assignee.name) = Неопределено Тогда
				МассивИменПользователей.Добавить(СтрокаЗадача.Assignee.name);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЗадача.Creator.Количество() Тогда
			Если СтрокаЗадача.Creator.Свойство("key")
				И МассивИдентификаторовПользователей.Найти(СтрокаЗадача.Creator.key) = Неопределено Тогда
				МассивИдентификаторовПользователей.Добавить(СтрокаЗадача.Creator.key);
			КонецЕсли;
			
			Если СтрокаЗадача.Creator.Свойство("name")
				И МассивИменПользователей.Найти(СтрокаЗадача.Creator.name) = Неопределено Тогда
				МассивИменПользователей.Добавить(СтрокаЗадача.Creator.name);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЗадача.Reporter.Количество() Тогда
			Если СтрокаЗадача.Reporter.Свойство("key")
				И МассивИдентификаторовПользователей.Найти(СтрокаЗадача.Reporter.key) = Неопределено Тогда
				МассивИдентификаторовПользователей.Добавить(СтрокаЗадача.Reporter.key);
			КонецЕсли;
			
			Если СтрокаЗадача.Reporter.Свойство("name")
				И МассивИменПользователей.Найти(СтрокаЗадача.Reporter.name) = Неопределено Тогда
				МассивИменПользователей.Добавить(СтрокаЗадача.Reporter.name);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСотрудниковЗадачи(СтруктураОтвета, ЗадачаОбъект, ТаблицаСоответствийПользователейСистем,
	ИсполнительСтруктура, СоздательСтруктура, ПостановщикСтруктура, НастройкиИнтеграции)
	
	// Исполнитель задачи
	Если ИсполнительСтруктура.key <> Неопределено Тогда
		ИсполнительСсылка = НайтиСоздатьПользователейИСотрудников(СтруктураОтвета,
			ТаблицаСоответствийПользователейСистем, ИсполнительСтруктура, НастройкиИнтеграции);
		
		Если ЗначениеЗаполнено(ИсполнительСсылка) Тогда
			ЗадачаОбъект.Исполнитель = ИсполнительСсылка;
		КонецЕсли;
	КонецЕсли;
	
	// Автор задачи
	Если СоздательСтруктура.key <> Неопределено Тогда
		АвторСсылка = НайтиСоздатьПользователейИСотрудников(СтруктураОтвета,
			ТаблицаСоответствийПользователейСистем, СоздательСтруктура, НастройкиИнтеграции);
		
		Если ЗначениеЗаполнено(АвторСсылка) Тогда
			ЗадачаОбъект.Автор = АвторСсылка;
		КонецЕсли;
	КонецЕсли;
	
	// Постановщик задачи
	Если ПостановщикСтруктура.key <> Неопределено Тогда
		ПостановщикСсылка = НайтиСоздатьПользователейИСотрудников(СтруктураОтвета,
			ТаблицаСоответствийПользователейСистем, ПостановщикСтруктура, НастройкиИнтеграции);
		
		Если ЗначениеЗаполнено(ПостановщикСсылка) Тогда
			ЗадачаОбъект.Постановщик = ПостановщикСсылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКомпонентыЗадачи(СтруктураОтвета, ЗадачаОбъект, Components)
	
	ЗадачаОбъект.Компоненты.Очистить();
	
	Для Каждого ElementComponents Из Components Цикл	
		КомпонентСсылка = Справочники.Компоненты.НайтиПоРеквизиту("ВнешнийИдентификаторJira", ElementComponents.id);
	
		Если ЗначениеЗаполнено(КомпонентСсылка) Тогда
			КомпонентЗадачи = ЗадачаОбъект.Компоненты.Добавить();
			КомпонентЗадачи.Компонента = КомпонентСсылка;
		Иначе
			СоздатьОбновитьКомпоненты(СтруктураОтвета, ElementComponents);
			
			КомпонентСсылка = Справочники.Компоненты.НайтиПоРеквизиту("ВнешнийИдентификаторJira", ElementComponents.id);
	
			Если ЗначениеЗаполнено(КомпонентСсылка) Тогда
				КомпонентЗадачи = ЗадачаОбъект.Компоненты.Добавить();
				КомпонентЗадачи.Компонента = КомпонентСсылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПриоритетЗадачиПоНаименованию(Priority_Name)
	
	СоответствияОбъектов = ОбщегоНазначенияУПОСервер.ПолучитьСоответствиеОбъектовИБ(
		Перечисления.ТипСоответствияОбъектовИБ.ПриоритетJira, Priority_Name);
	
	Если СоответствияОбъектов.Количество() Тогда
		ПриоритетЗадачи = СоответствияОбъектов[0].Объект3;
	Иначе
		ПриоритетЗадачи = Перечисления.ПриоритетыЗадач.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПриоритетЗадачи;
	
КонецФункции	

Функция ПолучитьТипЗадачиПоНаименованию(IssueType_Name)
	
	ТипЗадачи = Перечисления.ТипыЗадач.ПустаяСсылка();
	
	Если IssueType_Name = "Epic" Тогда
		ТипЗадачи = Перечисления.ТипыЗадач.Эпик;
	Иначе
		ТипЗадачи = Перечисления.ТипыЗадач[IssueType_Name];
	КонецЕсли;
	
	Возврат ТипЗадачи;
	
КонецФункции

Процедура ВыполнитьОтложенноеЗаполнениеРодителейЗадач(СтруктураОтвета, ДанныеОРодителях)
	
	Для Каждого ИнформацияОРодителе Из ДанныеОРодителях Цикл
		
		ЗадачаОбъект = ИнформацияОРодителе.ЗадачаПроекта.ПолучитьОбъект();
		РодительЗадачи = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("ВнешнийИдентификаторJira", ИнформацияОРодителе.Родитель);
		
		Если ЗначениеЗаполнено(РодительЗадачи) Тогда
			ЗадачаОбъект.Родитель = РодительЗадачи;
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьПользователейИСотрудников(СтруктураОтвета,
	ТаблицаСоответствийПользователейСистем, СтруктураДанныхСотрудника, НастройкиИнтеграции)
	
	ПоискСоответствияПоИд = ТаблицаСоответствийПользователейСистем.Найти(СтруктураДанныхСотрудника.key, "ЗначениеСистемы");
	
	Если ПоискСоответствияПоИд <> Неопределено Тогда
		СотрудникСсылка = ПоискСоответствияПоИд.Сотрудник;
	Иначе
		ПоискСоответствияПоИмени = ТаблицаСоответствийПользователейСистем.Найти(СтруктураДанныхСотрудника.name, "ЗначениеСистемы");
		
		Если ПоискСоответствияПоИмени <> Неопределено Тогда
			СотрудникСсылка = ПоискСоответствияПоИмени.Сотрудник;
			
			// Добавим в соответствие значение идентификатора для упрощенного поиска
			ДобавитьСоответствиеПользователейСистемыИдентификатор(НастройкиИнтеграции,
				СтруктураДанныхСотрудника.key, ПоискСоответствияПоИмени.Пользователь, ТаблицаСоответствийПользователейСистем);
		Иначе
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
			
			СотрудникСсылка = СоздатьСотрудниковПоПользователю(СтруктураОтвета, СтруктураДанныхСотрудника);
			ПользовательОбъект.ФизическоеЛицо	= СотрудникСсылка;
			ПользовательОбъект.Наименование		= СтруктураДанныхСотрудника.displayName;
			ПользовательОбъект.Недействителен	= Ложь;
			ПользовательОбъект.Служебный		= Ложь;
			ПользовательОбъект.Подготовлен		= Истина;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПользовательОбъект,
				СтруктураДанныхСотрудника.EmailAddress, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
			
			Попытка
				ПользовательОбъект.Записать();
				
				ОбъектИнтеграции = СтруктураОтвета.ОбъектыИнтеграции.Добавить();
				ОбъектИнтеграции.ОбъектИнтеграции	= ПользовательОбъект.Ссылка;
				ОбъектИнтеграции.СозданОбновлен		= Перечисления.СозданОбновлен.Создан;
				
				ТекстСообщения = СтрШаблон("ru = 'Создан пользователь ""%1""'", ПользовательОбъект);
				ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
				
				// Добавим в соответствие значение идентификатора для упрощенного поиска
				ДобавитьСоответствиеПользователейСистемыИдентификатор(НастройкиИнтеграции,
					СтруктураДанныхСотрудника.key, ПользовательОбъект.Ссылка, ТаблицаСоответствийПользователейСистем);
			Исключение
				ТекстСообщения = СтрШаблон("ru = 'Не удалось записать объект %1'", ПользовательОбъект);
				ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
		
				СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
					НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
				
				Возврат Неопределено;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СотрудникСсылка;
	
КонецФункции

Процедура ДобавитьСоответствиеПользователейСистемыИдентификатор(НастройкаИнтеграции,
	Идентификатор, Пользователь, ТаблицаСоответствийПользователейСистем)
	
	МенеджерЗаписи = РегистрыСведений.СоответствияПользователейСистем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НастройкаИнтеграции	= НастройкаИнтеграции;
	МенеджерЗаписи.ТипИдентификации		= Перечисления.ТипыИдентификацииСистем.Идентификатор;
	МенеджерЗаписи.ЗначениеСистемы		= Идентификатор;
	МенеджерЗаписи.Пользователь			= Пользователь;
	
	МенеджерЗаписи.Записать();
	
	НовоеСоответствие = ТаблицаСоответствийПользователейСистем.Добавить();
	НовоеСоответствие.НастройкаИнтеграции	= НастройкаИнтеграции;
	НовоеСоответствие.ЗначениеСистемы		= Идентификатор;
	НовоеСоответствие.Пользователь			= Пользователь;
	НовоеСоответствие.Сотрудник				= Пользователь.ФизическоеЛицо;
	НовоеСоответствие.Приоритет				= 1;
	
КонецПроцедуры

Функция СоздатьСотрудниковПоПользователю(СтруктураОтвета, СтруктураДанныхСотрудника)
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	СотрудникОбъект.Наименование = СтруктураДанныхСотрудника["displayName"];
	
	Попытка
		СотрудникОбъект.Записать();
		
		ОбъектИнтеграции = СтруктураОтвета.ОбъектыИнтеграции.Добавить();
		ОбъектИнтеграции.ОбъектИнтеграции	= СотрудникОбъект.Ссылка;
		ОбъектИнтеграции.СозданОбновлен		= Перечисления.СозданОбновлен.Создан;
		
		ТекстСообщения = СтрШаблон("ru = 'Создан сотрудник ""%1""'", СотрудникОбъект);
		ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
		
		Возврат СотрудникОбъект.Ссылка;
	Исключение
		ТекстСообщения = СтрШаблон("ru = 'Не удалось записать объект %1'", СотрудникОбъект);
		ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);

		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ЗарегистрироватьОбновлениеСтатусовЗадач(СтруктураОтвета, ЗадачаСсылка, СтатусСтруктура, ОбновленныеСтатусы)
	
	Если ОбновленныеСтатусы.Найти(СтатусСтруктура.id) = Неопределено Тогда
		СоздатьОбновитьВидыСтатусовЗадач(СтруктураОтвета, СтатусСтруктура);
		ОбновленныеСтатусы.Добавить(СтатусСтруктура.id);
		ВидСтатусаСсылка = Справочники.ВидыСтатусовЗадач.НайтиПоРеквизиту("ВнешнийИдентификаторJira", СтатусСтруктура.id);
	Иначе
		ВидСтатусаСсылка = Справочники.ВидыСтатусовЗадач.НайтиПоРеквизиту("ВнешнийИдентификаторJira", СтатусСтруктура.id);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидСтатусаСсылка) Тогда
		Возврат;	
	КонецЕсли;
	
	ОбновитьСтатусЗадачиВРегистре(СтруктураОтвета, ЗадачаСсылка, ВидСтатусаСсылка);
	
КонецПроцедуры

Процедура СоздатьОбновитьВидыСтатусовЗадач(СтруктураОтвета, СтруктураДанныхСтатусовЗадач)

	ВнешнийИдентификатор = СтруктураДанныхСтатусовЗадач["id"];
	СтруктураОбъект = ПолучитьСуществуюшийОбъектИлиСоздатьНовыйПоИдентификатору(СтруктураОтвета, ВнешнийИдентификатор, "ВидыСтатусовЗадач");
	
	Если СтруктураОбъект.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	ВидСтатусаОбъект = СтруктураОбъект.ЭлементОбъект;
		
	ВидСтатусаОбъект.Наименование	= СтруктураДанныхСтатусовЗадач["name"];
	ВидСтатусаОбъект.Описание		= СтруктураДанныхСтатусовЗадач["description"];
	
	Попытка
		ВидСтатусаОбъект.Записать();
		
		ОбъектИнтеграции = СтруктураОтвета.ОбъектыИнтеграции.Добавить();
		ОбъектИнтеграции.ОбъектИнтеграции	= ВидСтатусаОбъект.Ссылка;
		ОбъектИнтеграции.СозданОбновлен		= СтруктураОбъект.СозданОбновлен;
		
		Если СтруктураОбъект.СозданОбновлен = Перечисления.СозданОбновлен.Обновлен Тогда
			ТекстСообщения = СтрШаблон("ru = 'Обновлен вид статуса задачи ""%1""'", ВидСтатусаОбъект);
		Иначе
			ТекстСообщения = СтрШаблон("ru = 'Создан вид статуса задачи ""%1""'", ВидСтатусаОбъект);
		КонецЕсли;
		ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
	Исключение
		ТекстСообщения = СтрШаблон("ru = 'Не удалось записать объект %1'", ВидСтатусаОбъект);
		ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);

		СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
			НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьСтатусЗадачиВРегистре(СтруктураОтвета, ЗадачаСсылка, ВидСтатусаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыЗадач.СтатусЗадачи
	|ИЗ
	|	РегистрСведений.СтатусыЗадач КАК СтатусыЗадач
	|ГДЕ
	|	СтатусыЗадач.ЗадачаПроекта = &Задача";
	Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		ТекущийСтатусЗадачи = ВыборкаРезультатаЗапроса.СтатусЗадачи;
	Иначе
		ТекущийСтатусЗадачи = Справочники.ВидыСтатусовЗадач.ПустаяСсылка();
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ТекущийСтатусЗадачи) И ВидСтатусаСсылка = ТекущийСтатусЗадачи) Тогда
		МенеджерЗаписи = РегистрыСведений.СтатусыЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЗадачаПроекта		= ЗадачаСсылка;
		МенеджерЗаписи.СтатусЗадачи	= ВидСтатусаСсылка;
		
		Попытка
			МенеджерЗаписи.Записать();
			
			ТекстСообщения = СтрШаблон("ru = 'Обновлен статус задачи ""%1""'", ЗадачаСсылка);
			ИнтеграцииСервер.ДобавитьЗаписьВПротоколОбмена(СтруктураОтвета, ТекстСообщения);
		Исключение
			ТекстСообщения = СтрШаблон("ru = 'Не удалось обновить статус задачи ""%1""'", ЗадачаСсылка);
	
			СтруктураОтвета.ОписаниеОшибки = ОбщегоНазначенияУПОСервер.ПолучениеПолногоТекстаОшибкиПриИсключении(
				НСтр(ТекстСообщения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПолучитьСообщенияПользователю(Истина));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеОВремениЗадач(СтруктураОтвета, ДанныеОВремени, ТаблицаСоответствийПользователейСистем, Проект)
	
	МассивВсехДат = ДанныеОВремени.ВыгрузитьКолонку("ДатаЗаписи");
	ТаблицаДокументовРегистрации = ПолучитьДокументыРегистрацииВремениПоДатам(Проект, МассивВсехДат);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗДанныеОВремени", ДанныеОВремени);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗДанныеОВремени.ID КАК ID,
	|	ТЗДанныеОВремени.Issue_Кey КАК Issue_Кey,
	|	ТЗДанныеОВремени.Author_Key КАК Author_Key,
	|	ТЗДанныеОВремени.Author_Email КАК Author_Email,
	|	ТЗДанныеОВремени.Created КАК Updated,
	|	ТЗДанныеОВремени.Started КАК Started,
	|	ТЗДанныеОВремени.Comment КАК Comment,
	|	ТЗДанныеОВремени.TimeSpent КАК TimeSpent,
	|	ТЗДанныеОВремени.ДатаЗаписи КАК ДатаЗаписи
	|ПОМЕСТИТЬ ВТДанныеОВремени
	|ИЗ
	|	&ТЗДанныеОВремени КАК ТЗДанныеОВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОВремени.ID,
	|	ВТДанныеОВремени.Issue_Кey,
	|	ВТДанныеОВремени.Author_Key,
	|	ВТДанныеОВремени.Author_Email,
	|	ВТДанныеОВремени.Updated,
	|	ВТДанныеОВремени.Started,
	|	ВТДанныеОВремени.Comment,
	|	ВТДанныеОВремени.TimeSpent,
	|	ВТДанныеОВремени.ДатаЗаписи КАК ДатаЗаписи
	|ИЗ
	|	ВТДанныеОВремени КАК ВТДанныеОВремени
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписи
	|ИТОГИ
	|ПО
	|	ВТДанныеОВремени.ДатаЗаписи";
	
	ВыборкаПоДате = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДате.Следующий() Цикл
		
		ПоискДокумента = ТаблицаДокументовРегистрации.Найти(ВыборкаПоДате.ДатаЗаписи, "Дата");
			
		Если ПоискДокумента <> Неопределено Тогда
			ДокументОбъект = ПоискДокумента.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.РабочееВремя.Очистить();
			
			СозданОбновлен = Перечисления.СозданОбновлен.Обновлен;
		Иначе
			ДокументОбъект = Документы.РегистрацияРабочегоВремени.СоздатьДокумент();
			ДокументОбъект.Дата		= ВыборкаПоДате.ДатаЗаписи;
			
			СозданОбновлен = Перечисления.СозданОбновлен.Создан;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		ИнформацияОЧасах = ВыборкаПоДате.Выбрать();
		
		Пока ИнформацияОЧасах.Следующий() Цикл
		
			ЗадачаСсылка	= Справочники.ЗадачиПроектов.НайтиПоРеквизиту("ВнешнийИдентификаторJira", ИнформацияОЧасах.Issue_Кey);
			
			// Поиск сотрудника
			ПоискСоответствияПоИд = ТаблицаСоответствийПользователейСистем.Найти(ИнформацияОЧасах.Author_Key, "ЗначениеСистемы");
			СотрудникСсылка = ПоискСоответствияПоИд.Сотрудник;
			
			Если ЗначениеЗаполнено(ЗадачаСсылка) И ЗначениеЗаполнено(СотрудникСсылка) Тогда
				
				НоваяСтрока = ДокументОбъект.РабочееВремя.Добавить();
				НоваяСтрока.ДатаРегистрации		= ?(ЗначениеЗаполнено(ИнформацияОЧасах.Updated),
					ИнформацияОЧасах.Updated, ИнформацияОЧасах.Created);
				НоваяСтрока.ЗадачаПроекта				= ЗадачаСсылка;
				НоваяСтрока.Проект				= Проект;
				НоваяСтрока.Сотрудник			= СотрудникСсылка;
				НоваяСтрока.ДатаСписания		= ИнформацияОЧасах.Started;
				НоваяСтрока.Часы				= ИнформацияОЧасах.TimeSpent;
				НоваяСтрока.ОписаниеРаботы		= ИнформацияОЧасах.Comment;
				НоваяСтрока.ИдентификаторЗаписи = ИнформацияОЧасах.ID;
			КонецЕсли;
		
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать();
		КонецПопытки;
		
		НовыйОбъект = СтруктураОтвета.ОбъектыИнтеграции.Добавить();
		НовыйОбъект.ОбъектИнтеграции	= ДокументОбъект.Ссылка;
		НовыйОбъект.СозданОбновлен		= СозданОбновлен;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДокументыРегистрацииВремениПоДатам(Проект, МассивВсехДат)
	
	СвернутыйМассив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВсехДат);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияРабочегоВремени.Ссылка,
		|	РегистрацияРабочегоВремени.Ссылка.Дата
		|ИЗ
		|	Документ.РегистрацияРабочегоВремени.РабочееВремя КАК РегистрацияРабочегоВремени
		|ГДЕ
		|	РегистрацияРабочегоВремени.Проект = &Проект
		|	И РегистрацияРабочегоВремени.Ссылка.Дата В (&Дата)";
	
	Запрос.УстановитьПараметр("Проект"	, Проект);
	Запрос.УстановитьПараметр("Дата"	, МассивВсехДат);
	
	ВыгрузкаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгрузкаРезультатаЗапроса;
	
КонецФункции

#КонецОбласти // ЗаполнениеОбъектов

#Область URL

Функция СформироватьURLПолученияКомпонентов(НастройкиИнтеграции, Метод)
	
	МетодСПараметрами = СтрЗаменить(Метод.Метод, "{projectIdOrKey}", НастройкиИнтеграции.КодПроекта);
	URL = НастройкиИнтеграции.Сервер + МетодСПараметрами;
	
	Возврат URL;
	
КонецФункции

Функция СформироватьURLПолученияЗадач(НастройкиИнтеграции, Метод)
	
	URL = НастройкиИнтеграции.Сервер + Метод.Метод;
	
	Возврат URL;
	
КонецФункции

#КонецОбласти // URL

#КонецОбласти // СлужебныеПроцедурыИФункции