
#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ГруппаОписание1.Видимость		= Ложь;
	Элементы.ГруппаОписание2.Видимость		= Ложь;
	
	ПодготовитьФормуНаСервере();
	УстановитьВидимостьЭлементовФормы();
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение,
			"ОценкаСотрудниковПроведение");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Оценки.Очистить();
	ТекущийОбъект.Сертификаты.Очистить();
	
	Если Не Объект.СотрудникиСписком Тогда
		Если ПроверитьВидОценкиПредопределенный(Объект.ВидРевью)
			Или Объект.ВидРевью.ТипКомпетенции = Перечисления.ТипыКомпетенций.Профессиональные Тогда
			
			ЗаписатьДеревоПрофессиональныхКомпетенцийВОбъект(ТекущийОбъект);
			
		КонецЕсли;
		
		Если Объект.ВидРевью = Справочники.ВидыОценкиСотрудников.ОценкаПроизводительности
			Или Объект.ВидРевью.ТипКомпетенции = Перечисления.ТипыКомпетенций.Универсальные Тогда
			
			ЗаписатьДеревоУниверсальныхКомпетенцийВОбъект(ТекущийОбъект);
			
		КонецЕсли;
		
		Если Объект.ВидРевью.ВключаяСертификаты Тогда
			
			ЗаписатьДеревоСертификатовВОбъект(ТекущийОбъект);
			
		КонецЕсли;
	Иначе;
	//	Для Каждого СтрокаОценки Из ОценкиГоризонтальная Цикл
	//		
	//		СтрокаСотрудник		= СтрокаОценки.Сотрудник;
	//		СтрокаПроект		= СтрокаОценки.Проект;
	//		СтрокаКомментарий	= СтрокаОценки.Комментарий;
	//		
	//		КоличествоСозданныхКолонок = КоличествоКомпетенций - 1;
	//		Для Инкремент = 0 По КоличествоСозданныхКолонок Цикл
	//			НоваяЗапись = ТекущийОбъект.Оценки.Добавить();
	//			НоваяЗапись.Сотрудник					= СтрокаСотрудник;
	//			НоваяЗапись.Проект						= СтрокаПроект;
	//			НоваяЗапись.Оценка						= СтрокаОценки["Компетенция_" + Инкремент];
	//			НоваяЗапись.ИдентификаторКомпетенции	= Инкремент;
	//			НоваяЗапись.Комментарий					= СтрокаКомментарий;
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидРевью) Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРевьюПриИзменении(Элемент)
	
//	Если ОценкиГоризонтальная.Количество() Тогда
//	
//		ТекстСообщения = НСтр("ru = 'При изменении вида ревью будет очищены таблицы оценок и сертификатов. Продолжить?'");
//		ОписаниеОповещения = Новый ОписаниеОповещения("ВидРевьюПриИзмененииЗавершение", ЭтотОбъект);
//		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ОКОтмена);
//		
//	Иначе
		ВидРевьюПриИзмененииНаСервере();
//	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидРевьюПриИзмененииНаСервере()
	
	УстановитьВидимостьЭлементовФормы();
	
	Объект.Оценки.Очистить();
	Объект.Сертификаты.Очистить();
//	ОценкиГоризонтальная.Очистить();
//		
//	ОчиститьКомпетенцииИСвязанныеДанныеФормы();
//	ЗаполнитьКомпетенцииДокумента();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПрофВертикальнаяПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиУнивВертикальнаяПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыВертикальнаяПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПрофВертикальнаяУровеньЗнанияПриИзменении(Элемент)
	
	Если Не Объект.ВидРевью = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОценкиСотрудников.ПервичнаяОценка") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы.ОценкиПрофВертикальная.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.Часов = ПолучитьКоличествоЧасовГрадацииПоУровнюЗнаний(
		ДанныеТекущейСтроки.Компетенция, ДанныеТекущейСтроки.УровеньЗнания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПрофВертикальнаяПриАктивизацииСтроки(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ОценкиПрофВертикальная.ТекущиеДанные;
	
	Если Элементы.ГруппаОписание1.Видимость Тогда
		СтруктураКомпетенции = ПолучитьНаименованиеОписаниеКомпетенции(ДанныеТекущейСтроки.Компетенция);
		Элементы.ДекорацияЗаголовок1.Заголовок = НСтр(СтрШаблон(
			"ru = 'Компетенция: %1'; en = 'Competency: %1'", СтруктураКомпетенции.Наименование));
		Элементы.ДекорацияОписаниеКомпетенции1.Заголовок = НСтр(СтрШаблон(
			"ru = 'Описание: %1'; en = 'Description: %1'", СтруктураКомпетенции.Описание));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиУнивВертикальнаяПриАктивизацииСтроки(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ОценкиУнивВертикальная.ТекущиеДанные;
	
	Если Элементы.ГруппаОписание2.Видимость Тогда
		СтруктураКомпетенции = ПолучитьНаименованиеОписаниеКомпетенции(ДанныеТекущейСтроки.Компетенция);
		Элементы.ДекорацияЗаголовок2.Заголовок = НСтр(СтрШаблон(
			"ru = 'Компетенция: %1'; en = 'Competency: %1'", СтруктураКомпетенции.Наименование));
		Элементы.ДекорацияОписаниеКомпетенции2.Заголовок = НСтр(СтрШаблон(
			"ru = 'Описание: %1'; en = 'Description: %1'", СтруктураКомпетенции.Описание));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьПодсказку(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаОценкиПрофВертикальная" Тогда
		ДанныеТекущейСтроки = Элементы.ОценкиПрофВертикальная.ТекущиеДанные;
	Иначе
		ДанныеТекущейСтроки = Элементы.ОценкиУнивВертикальная.ТекущиеДанные;
	КонецЕсли;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаОценкиПрофВертикальная" Тогда
			Если Элементы.ГруппаОписание1.Видимость Тогда
				Элементы.ГруппаОписание1.Видимость = Ложь;
				Элементы.ОценкиПрофВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Заголовок =
					НСтр("ru = 'Показать описание'; en ='Show description'");
				Элементы.ОценкиПрофВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Картинка =
					БиблиотекаКартинок.ВводимыеСимволыВидны;
				
				Элементы.ДекорацияЗаголовок1.Заголовок				= "";
				Элементы.ДекорацияОписаниеКомпетенции1.Заголовок	= "";
			Иначе
				Элементы.ГруппаОписание1.Видимость = Истина;
				Элементы.ОценкиПрофВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Заголовок =
					НСтр("ru = 'Скрыть описание'; en ='Hide description'");
				Элементы.ОценкиПрофВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Картинка =
					БиблиотекаКартинок.ВводимыеСимволыСкрыты;
				
				СтруктураКомпетенции = ПолучитьНаименованиеОписаниеКомпетенции(ДанныеТекущейСтроки.Компетенция);
				Элементы.ДекорацияЗаголовок1.Заголовок = НСтр(СтрШаблон(
					"ru = 'Компетенция: %1'; en = 'Competency: %1'", СтруктураКомпетенции.Наименование));
				Элементы.ДекорацияОписаниеКомпетенции1.Заголовок = НСтр(СтрШаблон(
					"ru = 'Описание: %1'; en = 'Description: %1'", СтруктураКомпетенции.Описание));
			КонецЕсли;
		Иначе
			Если Элементы.ГруппаОписание2.Видимость Тогда
				Элементы.ГруппаОписание2.Видимость = Ложь;
				Элементы.ОценкиУнивВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Заголовок =
					НСтр("ru = 'Показать описание'; en ='Show description'");
				Элементы.ОценкиУнивВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Картинка =
					БиблиотекаКартинок.ВводимыеСимволыВидны;
				
				Элементы.ДекорацияЗаголовок2.Заголовок				= "";
				Элементы.ДекорацияОписаниеКомпетенции2.Заголовок	= "";
			Иначе
				Элементы.ГруппаОписание2.Видимость = Истина;
				Элементы.ОценкиУнивВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Заголовок =
					НСтр("ru = 'Скрыть описание'; en ='Hide description'");
				Элементы.ОценкиУнивВертикальнаяКонтекстноеМенюПоказатьСкрытьПодсказку.Картинка =
					БиблиотекаКартинок.ВводимыеСимволыСкрыты;
				
				СтруктураКомпетенции = ПолучитьНаименованиеОписаниеКомпетенции(ДанныеТекущейСтроки.Компетенция);
				Элементы.ДекорацияЗаголовок2.Заголовок = НСтр(СтрШаблон(
					"ru = 'Компетенция: %1'; en = 'Competency: %1'", СтруктураКомпетенции.Наименование));
				Элементы.ДекорацияОписаниеКомпетенции2.Заголовок = НСтр(СтрШаблон(
					"ru = 'Описание: %1'; en = 'Description: %1'", СтруктураКомпетенции.Описание));
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

//@skip-check module-unused-method
#Область СтандартныеПодсистемы

// Подключаемый выполнить команду.
// 
// Параметры:
//  Команда - КомандаФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);

КонецПроцедуры

// Подключаемый выполнить команду на сервере.
// 
// Параметры:
//  Контекст  - Структура
//  Результат - Структура
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);

КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#Область ОписанияОповещений

&НаКлиенте
Процедура ВидРевьюПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВидРевьюПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОписанияОповещений 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не Объект.СотрудникиСписком Тогда
		Если Объект.Оценки.Количество() Тогда
			СтрокаОценки = Объект.Оценки[0];
			Сотрудник	= СтрокаОценки.Сотрудник;
		КонецЕсли;
		
		Если ПроверитьВидОценкиПредопределенный(Объект.ВидРевью)
			Или Объект.ВидРевью.ТипКомпетенции = Перечисления.ТипыКомпетенций.Профессиональные Тогда
			
			ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Ссылка),
				Новый Граница(Объект.Дата, ВидГраницы.Исключая),
				ТекущаяДатаСеанса());
			
			АдресДереваПрофКомпетенций = Документы.ОценкаСотрудников.ПодготовитьДеревоПрофессиональныхКомпетенций(
				Объект.ВидРевью, ДатаДокумента, Сотрудник, Объект.Ссылка);
			
			ДанныеДерева = ПолучитьИзВременногоХранилища(АдресДереваПрофКомпетенций);
			ЗначениеВРеквизитФормы(ДанныеДерева, "ОценкиПрофВертикальная");
			ДанныеДерева = Неопределено;
			
		КонецЕсли;
		
		Если Объект.ВидРевью = Справочники.ВидыОценкиСотрудников.ОценкаПроизводительности
			Или Объект.ВидРевью.ТипКомпетенции = Перечисления.ТипыКомпетенций.Универсальные Тогда
			
			ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Ссылка),
				Объект.Дата,
				ТекущаяДатаСеанса());
			
			АдресДереваУнивКомпетенций = Документы.ОценкаСотрудников.ПодготовитьДеревоУниверсальныхКомпетенций(
				Объект.ВидРевью, ДатаДокумента, Сотрудник, Объект.Ссылка);
		
			ДанныеДерева = ПолучитьИзВременногоХранилища(АдресДереваУнивКомпетенций);
			ЗначениеВРеквизитФормы(ДанныеДерева, "ОценкиУнивВертикальная");
			ДанныеДерева = Неопределено;
			
		КонецЕсли;
		
		Если Объект.ВидРевью.ВключаяСертификаты Тогда
			
			АдресДереваСертификатов = Документы.ОценкаСотрудников.ПодготовитьДеревоСертификатов(
				Сотрудник, Объект.ВидРевью = Справочники.ВидыОценкиСотрудников.ПервичнаяОценка, Объект.Ссылка);
		
			ДанныеДерева = ПолучитьИзВременногоХранилища(АдресДереваСертификатов);
			ЗначениеВРеквизитФормы(ДанныеДерева, "СертификатыВертикальная");
			ДанныеДерева = Неопределено;
			
		КонецЕсли;
	Иначе
		
	//	// Отрисовка колонок таблицы "Оценки"
	//	ДобавляемыеРеквизиты = Новый Массив;
	//	МассивНаименованийКолонок = Новый Массив;  
	//	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный);
	//	
	//	КоличествоКомпетенций = 0;
	//	Для Каждого СтрокаКомпетенции Из Объект.Компетенции Цикл
	//		НаименованиеКолонки = СтрШаблон("Компетенция_%1", СтрокаКомпетенции.ИдентификаторСтроки);
	//		МассивНаименованийКолонок.Добавить(НаименованиеКолонки);	
	//		НовыйРеквизит = Новый РеквизитФормы(НаименованиеКолонки, ТипЧисло,
	//			"ОценкиГоризонтальная", СтрокаКомпетенции.Компетенция.Наименование);
	//		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//		
	//		КоличествоКомпетенций = КоличествоКомпетенций + 1;		
	//	КонецЦикла;
	//	
	//	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	//	
	//	ГруппаКолонок = Элементы.Найти("ОценкиГоризонтальнаяГруппаОценки");
	//	
	//	Для Каждого ЭлементКолонка Из МассивНаименованийКолонок Цикл
	//		Элемент = Элементы.Вставить(ЭлементКолонка, Тип("ПолеФормы"), ГруппаКолонок);
	//		Элемент.Вид = ВидПоляФормы.ПолеВвода;
	//		Элемент.ПутьКДанным = "ОценкиГоризонтальная." + ЭлементКолонка;
	//	КонецЦикла;
	//	
	//	// Заполнение таблицы "Оценки"
	//	ТаблицаОценок = Объект.Оценки.Выгрузить();
	//	ТаблицаОценок.Сортировать("Проект, Сотрудник, ИдентификаторКомпетенции");
	//	
	//	ПрошлаяСтрока = Неопределено;
	//	СуммаБалловСтроки = 0;
	//	ВсегоСтрок = ТаблицаОценок.Количество() - 1;
	//	Для Инкремент = 0 По ВсегоСтрок Цикл
	//		
	//		СтрокаОценка = ТаблицаОценок[Инкремент];
	//		
	//		Если Инкремент = 0 Тогда
	//			НоваяСтрока = ОценкиГоризонтальная.Добавить();
	//			НоваяСтрока.Сотрудник	= СтрокаОценка.Сотрудник;
	//			НоваяСтрока.Проект		= СтрокаОценка.Проект;
	//			НоваяСтрока.Комментарий	= СтрокаОценка.Комментарий;
	//			
	//		ИначеЕсли СтрокаОценка.Проект <> ТаблицаОценок[Инкремент - 1].Проект
	//			Или СтрокаОценка.Сотрудник <> ТаблицаОценок[Инкремент - 1].Сотрудник Тогда
	//			НоваяСтрока.СреднийБалл	= СуммаБалловСтроки / КоличествоКомпетенций;
	//			СуммаБалловСтроки = 0;	
	//			
	//			НоваяСтрока = ОценкиГоризонтальная.Добавить();
	//			НоваяСтрока.Сотрудник	= СтрокаОценка.Сотрудник;
	//			НоваяСтрока.Проект		= СтрокаОценка.Проект;
	//			НоваяСтрока.Комментарий	= СтрокаОценка.Комментарий;
	//			
	//		ИначеЕсли Инкремент = ВсегоСтрок Тогда
	//			СуммаБалловСтроки = СуммаБалловСтроки + СтрокаОценка.Оценка;
	//			НоваяСтрока.СреднийБалл	= СуммаБалловСтроки / КоличествоКомпетенций;
	//				
	//		КонецЕсли;
	//		
	//		НоваяСтрока["Компетенция_" + СтрокаОценка.ИдентификаторКомпетенции] = СтрокаОценка.Оценка;
	//		Если Не Инкремент = ВсегоСтрок Тогда
	//			СуммаБалловСтроки = СуммаБалловСтроки + СтрокаОценка.Оценка;
	//		КонецЕсли;
	//		
	//		ПрошлаяСтрока = СтрокаОценка;
	//	КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()

	Элементы.ГруппаСертификаты.Видимость	= Объект.ВидРевью.ВключаяСертификаты;
	Элементы.СотрудникиСписком.Видимость	= Не ПроверитьВидОценкиПредопределенный(Объект.ВидРевью);
	
	Если Объект.ВидРевью = Справочники.ВидыОценкиСотрудников.ПервичнаяОценка Тогда
		Элементы.ГруппаОценкиГоризонтальная.Видимость	= Ложь;
		Элементы.ГруппаОценкиПрофВертикальная.Видимость	= Истина;
		Элементы.ОценкиПрофВертикальнаяПрошлыйУровень.Видимость = Ложь;
		Элементы.ГруппаОценкиУнивВертикальная.Видимость	= Ложь;
	ИначеЕсли Объект.ВидРевью = Справочники.ВидыОценкиСотрудников.ОценкаПроизводительности Тогда
		Элементы.ГруппаОценкиГоризонтальная.Видимость	= Ложь;
		Элементы.ГруппаОценкиПрофВертикальная.Видимость	= Истина;
		Элементы.ОценкиПрофВертикальнаяПрошлыйУровень.Видимость = Истина;
		Элементы.ГруппаОценкиУнивВертикальная.Видимость	= Истина;
	Иначе
		Элементы.ГруппаОценкиГоризонтальная.Видимость	= Объект.СотрудникиСписком;
		Элементы.ГруппаСотрудникПроект.Видимость		= Не Объект.СотрудникиСписком;
		Элементы.ГруппаОценкиПрофВертикальная.Видимость	= Не Объект.СотрудникиСписком
			И Объект.ВидРевью.ТипКомпетенции = Перечисления.ТипыКомпетенций.Профессиональные;
		Элементы.ГруппаОценкиУнивВертикальная.Видимость	= Не Объект.СотрудникиСписком
			И Объект.ВидРевью.ТипКомпетенции = Перечисления.ТипыКомпетенций.Универсальные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВидОценкиПредопределенный(ВидРевью)
	
	Возврат ВидРевью = Справочники.ВидыОценкиСотрудников.ПервичнаяОценка
		Или ВидРевью = Справочники.ВидыОценкиСотрудников.ОценкаПроизводительности;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СертификатыВертикальная.ИзРегистра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр"	, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"		, ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатыВертикальнаяДатаПолучения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатыВертикальнаяПрисутствует.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатыВертикальнаяСертификат.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеОписаниеКомпетенции(КомпетенцияСсылка)
	
	Возврат Новый Структура("Наименование, Описание", КомпетенцияСсылка.Наименование, КомпетенцияСсылка.Описание);
	
КонецФункции

&НаСервере
Процедура ЗаписатьДеревоПрофессиональныхКомпетенцийВОбъект(ТекущийОбъект)
	
	ДанныеДерева = РеквизитФормыВЗначение("ОценкиПрофВертикальная");
	
	ЗаписатьДеревоПрофессиональныхКомпетенцийВОбъектРекурсивно(ТекущийОбъект, ДанныеДерева.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоПрофессиональныхКомпетенцийВОбъектРекурсивно(ТекущийОбъект, СтрокиДерева)
	
	Для Каждого СтрокаДокумента Из СтрокиДерева Цикл
		
		// Записываем только измененные
		Если ЗначениеЗаполнено(СтрокаДокумента.УровеньЗнания)
			И СтрокаДокумента.УровеньЗнания <> СтрокаДокумента.ПрошлыйУровень 
			И СтрокаДокумента.УровеньЗнания <> Перечисления.УровниЗнания.НеИзучено Тогда
			
			НоваяСтрока = ТекущийОбъект.Оценки.Добавить();
			НоваяСтрока.Сотрудник		= Сотрудник;
			НоваяСтрока.Компетенция		= СтрокаДокумента.Компетенция;
			НоваяСтрока.УровеньЗнания	= СтрокаДокумента.УровеньЗнания;
			НоваяСтрока.Комментарий		= СтрокаДокумента.Комментарий;
			
		КонецЕсли;
		
		Если СтрокаДокумента.Строки.Количество() Тогда
			ЗаписатьДеревоПрофессиональныхКомпетенцийВОбъектРекурсивно(ТекущийОбъект, СтрокаДокумента.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоУниверсальныхКомпетенцийВОбъект(ТекущийОбъект)
	
	ДанныеДерева = РеквизитФормыВЗначение("ОценкиУнивВертикальная");
	
	ЗаписатьДеревоУниверсальныхКомпетенцийВОбъектРекурсивно(ТекущийОбъект, ДанныеДерева.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоУниверсальныхКомпетенцийВОбъектРекурсивно(ТекущийОбъект, СтрокиДерева)
	
	Для Каждого СтрокаДокумента Из СтрокиДерева Цикл
		
		// Записываем только заполненные
		Если ЗначениеЗаполнено(СтрокаДокумента.Оценка) Тогда
			
			НоваяСтрока = ТекущийОбъект.Оценки.Добавить();
			НоваяСтрока.Сотрудник		= Сотрудник;
			НоваяСтрока.Компетенция		= СтрокаДокумента.Компетенция;
			НоваяСтрока.Оценка			= СтрокаДокумента.Оценка;
			НоваяСтрока.Комментарий		= СтрокаДокумента.Комментарий;
			
		КонецЕсли;
		
		Если СтрокаДокумента.Строки.Количество() Тогда
			ЗаписатьДеревоУниверсальныхКомпетенцийВОбъектРекурсивно(ТекущийОбъект, СтрокаДокумента.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоСертификатовВОбъект(ТекущийОбъект)
	
	ДанныеДерева = РеквизитФормыВЗначение("СертификатыВертикальная");
	
	ЗаписатьДеревоСертификатовВОбъектРекурсивно(ТекущийОбъект, ДанныеДерева.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоСертификатовВОбъектРекурсивно(ТекущийОбъект, СтрокиДерева)
	
	Для Каждого СтрокаДокумента Из СтрокиДерева Цикл
		
		Если СтрокаДокумента.Строки.Количество() Тогда
			ЗаписатьДеревоСертификатовВОбъектРекурсивно(ТекущийОбъект, СтрокаДокумента.Строки);
		Иначе
			// Записываем только новые и заполненные данные
			Если Не СтрокаДокумента.ИзРегистра И СтрокаДокумента.Присутствует Тогда
				
				НоваяСтрока = ТекущийОбъект.Сертификаты.Добавить();
				НоваяСтрока.Сотрудник		= Сотрудник;
				НоваяСтрока.Сертификат		= СтрокаДокумента.Сертификат;
				НоваяСтрока.ДатаПолучения	= СтрокаДокумента.ДатаПолучения;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоЧасовГрадацииПоУровнюЗнаний(Компетенция, УровеньЗнания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компетенция"		, Компетенция);
	Запрос.УстановитьПараметр("УровеньЗнания"	, УровеньЗнания);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрадацииВремениПоКомпетенциям.НеобходимоЧасов
	|ИЗ
	|	РегистрСведений.ГрадацииВремениПоКомпетенциям КАК ГрадацииВремениПоКомпетенциям
	|ГДЕ
	|	ГрадацииВремениПоКомпетенциям.Компетенция = &Компетенция
	|	И ГрадацииВремениПоКомпетенциям.УровеньЗнания = &УровеньЗнания";
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Часов = ВыборкаРезультатаЗапроса.НеобходимоЧасов;
	Иначе
		Часов = 0;
	КонецЕсли;
	
	Возврат Часов;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции