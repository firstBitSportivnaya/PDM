// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПараметрыПроведения = Документы.РегистрацияРабочегоВремени.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПроведения.Свойство("Реквизиты") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента	= ПараметрыПроведения.Реквизиты;
	РабочееВремяТаблица	= ПараметрыПроведения.ВременнаяТаблицаРабочееВремя;
	
	Движения.УчетРабочегоВремени.Очистить();
	Движения.УчетВремениПоКомпетенциям.Очистить();
	
	Для Каждого ЗаписьОВремени Из РабочееВремяТаблица Цикл
		
		НоваяЗапись = Движения.УчетРабочегоВремени.Добавить();
		НоваяЗапись.Период				= ЗаписьОВремени.ДатаРегистрации;
		НоваяЗапись.ИдентификаторЗаписи	= ЗаписьОВремени.ИдентификаторЗаписи;
		НоваяЗапись.ЗадачаПроекта				= ЗаписьОВремени.ЗадачаПроекта;
		НоваяЗапись.Сотрудник			= ЗаписьОВремени.Сотрудник;
		НоваяЗапись.ДатаСписания		= ЗаписьОВремени.ДатаСписания;
		НоваяЗапись.Часы				= ЗаписьОВремени.Часы;
		НоваяЗапись.ОписаниеРаботы		= ЗаписьОВремени.ОписаниеРаботы;
		
		КомпетенцииЗадачи = ЗаписьОВремени.ЗадачаПроекта.Метки.ВыгрузитьКолонку("Компетенция");
		КомпетенцииЗадачи.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьОВремени.Проект, "БазоваяКомпетенция"));
		СвернутыеКомпетенции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КомпетенцииЗадачи);
		КоличествоКомпетенций = СвернутыеКомпетенции.Количество();
		
		Если КоличествоКомпетенций <> 0 Тогда
			КоличествоВремениНаКомпетенцию = Окр(ЗаписьОВремени.Часы / КоличествоКомпетенций, 1);
		КонецЕсли;
		
		Для Каждого КомпетенцияЭлемент Из СвернутыеКомпетенции Цикл
			
			Если Не ЗначениеЗаполнено(КомпетенцияЭлемент) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = Движения.УчетВремениПоКомпетенциям.Добавить();
			НоваяЗапись.Период		= РеквизитыДокумента.Дата;
			НоваяЗапись.Сотрудник	= ЗаписьОВремени.Сотрудник;
			НоваяЗапись.Компетенция	= КомпетенцияЭлемент;
			НоваяЗапись.Часов		= КоличествоВремениНаКомпетенцию;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.УчетРабочегоВремени.Записывать = Истина;
	Движения.УчетВремениПоКомпетенциям.Записывать = Истина;

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'; en = 'Invalid object call on client.'");
#КонецЕсли