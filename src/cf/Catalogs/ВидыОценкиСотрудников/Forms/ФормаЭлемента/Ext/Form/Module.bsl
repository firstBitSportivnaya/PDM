// @strict-types

#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
//@skip-warning
&НаКлиенте
Перем ИдентификаторЗамераЗапись;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераЗапись = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ШаблонСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    	"ru = '%1Запись'; en = '%2Save'",
    	"ВидаОценки", "ReviewType");
	КлючеваяОперация = НСтр(ШаблонСтроки);
	
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераЗапись, КлючеваяОперация);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ТипКомпетенцииПриИзменении(Элемент)
	
	Объект.Компетенции.Очистить();
	УстановитьВидимостьКомпетенций();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпетенцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.ТипКомпетенции) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для заполнения компетенций необходимо заполнить их тип'"), , "Объект.ТипКомпетенции" , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпетенцииКомпетенцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;

	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ТипКомпетенции");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= Объект.ТипКомпетенции;

	ПараметрыВыбораСтруктура = Новый Структура;
	ПараметрыВыбораСтруктура.Вставить("РежимВыбора"				, Истина);
	ПараметрыВыбораСтруктура.Вставить("МножественныйВыбор"		, Ложь);
	ПараметрыВыбораСтруктура.Вставить("ФиксированныеНастройки"	, НастройкиКомпоновки);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Компетенции.ТекущиеДанные.ПолучитьИдентификатор());
	ОбработкаВыбора = Новый ОписаниеОповещения("КомпетенцииКомпетенцияПриЗакрытииФормыВыбора", ЭтотОбъект, ДополнительныеПараметры);

	ОткрытьФорму("Справочник.Компетенции.ФормаВыбора", ПараметрыВыбораСтруктура, ЭтотОбъект,,,, ОбработкаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпетенцииКомпетенцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораКомпетенций(Текст, Объект.ТипКомпетенции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпетенцииКомпетенцияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораКомпетенций(Текст, Объект.ТипКомпетенции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область СлужебныеПроцедурыИФункции

//@skip-check module-unused-method
#Область СтандартныеПодсистемы

// Подключаемый выполнить команду.
// 
// Параметры:
//  Команда - КомандаФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);

КонецПроцедуры

// Подключаемый выполнить команду на сервере.
// 
// Параметры:
//  Контекст  - Структура
//  Результат - Структура
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);

КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#Область ОписанияОповещений

&НаКлиенте
Процедура КомпетенцииКомпетенцияПриЗакрытииФормыВыбора(Значение, ДополнительныеПараметры) Экспорт

	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаКомпетенции = Объект.Компетенции.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаКомпетенции <> Неопределено Тогда
		СтрокаКомпетенции.Компетенция = Значение;
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ОписанияОповещений

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.Родитель.Видимость			= Не Объект.Предопределенный;
	Элементы.ТипКомпетенции.Видимость	= Не Объект.Предопределенный;
	
	УстановитьВидимостьКомпетенций();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомпетенций()
	
	Элементы.Компетенции.Видимость = Не Объект.Предопределенный И ЗначениеЗаполнено(Объект.ТипКомпетенции);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораКомпетенций(Текст, ТипКомпетенции)

	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("СтрокаПоиска", Текст);

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипКомпетенции", ТипКомпетенции);

	ПараметрыПолученияДанных.Вставить("Отбор"               , СтруктураОтбора);
	ПараметрыПолученияДанных.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);

	Возврат Справочники.Компетенции.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);

КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции