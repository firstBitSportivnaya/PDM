// @strict-types
#Область ПрограммныйИнтерфейс

// Выполнить задание бота.
// 
// Параметры:
//  ЗаданиеБотаСсылка - СправочникСсылка.ЗаданияБотов - Задание бота ссылка
//  Вручную - Булево - Вручную
Процедура ВыполнитьЗаданиеБота(ЗаданиеБотаСсылка, Вручную = Ложь, Получатели = Неопределено) Экспорт

	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаданиеБотаСсылка,
		"УсловиеВыполнения, НастройкаОтправки, ТипЗадания, ШагиВыполнения,
		|ПолучателиСписком, ПолучателиАлгоритм, ВложенностьКнопок");

	ТаблицаПараметров = ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций();
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ЗаданиеБота";
	НовыйПараметр.Значение = ЗаданиеБотаСсылка;

	УсловиеВыполнено = ПолучитьРезультатВыполненияУсловияЗадания(
		РеквизитыЗадания.УсловиеВыполнения, ТаблицаПараметров, Вручную);
	Если Не УсловиеВыполнено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Получатели) Тогда
		ПолучателиЗадания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Получатели);
	Иначе
		ПолучателиЗадания = ОпределитьПолучателейЗадания(ЗаданиеБотаСсылка, РеквизитыЗадания.ПолучателиСписком,
			РеквизитыЗадания.ПолучателиАлгоритм, ТаблицаПараметров, Вручную);
		Если ПолучателиЗадания = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПростаяОтправка = РеквизитыЗадания.ТипЗадания = Перечисления.ТипыЗаданийБота.Простое;
	ВыполнитьЗаданиеБотаПослеПолученияДанных(ЗаданиеБотаСсылка, ПолучателиЗадания, ПростаяОтправка,
		РеквизитыЗадания.НастройкаОтправки, РеквизитыЗадания.ШагиВыполнения, РеквизитыЗадания.ВложенностьКнопок, Вручную);

КонецПроцедуры

// Выполняет отправку сообщения от указанного бота указнному пользователю.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  ДанныеСообщения - Структура - Данные сообщения:
//   Обязательный ключ - ТипСообщения - ПеречислениеСсылка.ТипыСообщений<ТипБота>Bot,
//    например, для отправки в telegram - ПеречислениеСсылка.ТипыСообщенийTelegramBot.
//   Остальные ключи структуры должны называться в соответствии
//   с наименованиями полей отправляемой JSON структуры для конкректного ресурса бота:
//    1) Для Telegram bot смотри соответствие типа сообщения и ресурса в 
//    ИнтеграцияСTelegramBotСервер.ПолучитьСоответствиеТипаСообщенияИМетода, а описание объектов
//    ресурсов в документации https://core.telegram.org/bots/api;
//  Получатель - СправочникСсылка.Пользователи, Строка, Неопределено - Получатель сообщения
//  ВложенностьКнопок - СправочникСсылка.ВложенностьКнопокМеню, Неопределено - Вложенность кнопок
// 
// Возвращаемое значение:
//  Структура, Неопределено - Содержит данные о принятом сообщении. Ключи:
//   * Идентификатор - Число - Идентификатор сообщения
//   * Дата - Дата - Дата сообщения
Функция ВыполнитьОтправкуСообщения(БотСсылка, ДанныеСообщения, Получатель = Неопределено,
	ВложенностьКнопок = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = Пользователи.ТекущийПользователь();
	КонецЕсли;

	Если БотСсылка.ТипБота = Перечисления.ТипыБотов.Telegram Тогда
		РезультатОтправки = ИнтеграцияСTelegramBotСервер.ОтправитьСообщение(
			БотСсылка, Получатель, ДанныеСообщения, ВложенностьКнопок);

	ИначеЕсли БотСсылка.ТипБота = Перечисления.ТипыБотов.WhatsApp Тогда

	ИначеЕсли БотСсылка.ТипБота = Перечисления.ТипыБотов.Viber Тогда

	КонецЕсли;
	
	Возврат РезультатОтправки;

КонецФункции

// Обновить команды бота.
// 
// Параметры:
//  КомандыБотаСсылка - СправочникСсылка.КомандыБотов - Команды бота ссылка
Процедура ОбновитьКомандыБота(КомандыБотаСсылка) Экспорт

	ТаблицаКоманд = КомандыБотаСсылка.Команды.Выгрузить( , "ИмяКоманды, Описание");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Команды", КомандыБотаСсылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Боты.Ссылка КАК Ссылка,
	|	Боты.ТипБота КАК ТипБота
	|ИЗ
	|	Справочник.Боты КАК Боты
	|ГДЕ
	|	Боты.Команды = &Команды";

	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();

	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл

		Если ВыборкаРезультатаЗапроса.ТипБота = Перечисления.ТипыБотов.Telegram Тогда
			ИнтеграцияСTelegramBotСервер.ОбновитьКоманды(ВыборкаРезультатаЗапроса.Ссылка, ТаблицаКоманд);

		ИначеЕсли ВыборкаРезультатаЗапроса.ТипБота = Перечисления.ТипыБотов.WhatsApp Тогда

		ИначеЕсли ВыборкаРезультатаЗапроса.ТипБота = Перечисления.ТипыБотов.Viber Тогда

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Получает обновления ботов с помощью одноименного регламентного задания.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
Процедура ПолучитьОбновленияБотовРегламентноеЗадание(БотСсылка) Экспорт

	Если БотСсылка.ТипБота = Перечисления.ТипыБотов.Telegram Тогда
		ТаблицаСообщений = ИнтеграцияСTelegramBotСервер.ПолучитьОбновления(БотСсылка);

	ИначеЕсли БотСсылка.ТипБота = Перечисления.ТипыБотов.WhatsApp Тогда

	ИначеЕсли БотСсылка.ТипБота = Перечисления.ТипыБотов.Viber Тогда

	КонецЕсли;

	Если ТаблицаСообщений = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтветитьПользователюБота(БотСсылка, ТаблицаСообщений);

КонецПроцедуры

// Присваивает ресурс, куда бот будет присылать обновления чата
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
Процедура ПрисвоитьРесурсОбновленияБоту(БотСсылка) Экспорт
	
	Если БотСсылка.ТипБота = Перечисления.ТипыБотов.Telegram Тогда
		ИнтеграцияСTelegramBotСервер.ПрисвоитьВебХук(БотСсылка);

	ИначеЕсли БотСсылка.ТипБота = Перечисления.ТипыБотов.WhatsApp Тогда

	ИначеЕсли БотСсылка.ТипБота = Перечисления.ТипыБотов.Viber Тогда

	КонецЕсли;
	
КонецПроцедуры

// Фиксирует обновления в чатах ботов, посредством вызова ресурса HTTP-сервиса Bots.
// 
// Параметры:
//  ДанныеСообщения - Соответствие - Данные сообщений бота
Функция ЗафиксироватьОбновленияБотов(ДанныеСообщения) Экспорт

	Возврат Неопределено;

КонецФункции

// Отвечает пользователю бота.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот ссылка
//  ДанныеСообщений - Неопределено, ТаблицаЗначений - Данные сообщений,
//   см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуСообщенийПользователя
Процедура ОтветитьПользователюБота(БотСсылка, ДанныеСообщений) Экспорт

	ТаблицаОбработанных = ДанныеСообщений.Скопировать(, "ИдентификаторОбновления, ИдентификаторСообщения");
	ТаблицаОбработанных.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ПоместитьДанныеСообщенийИдентификацииБотовВМенеджер(МенеджерВременныхТаблиц, ДанныеСообщений);

	РезультатЗапроса = ПроверитьЕстьНезаконченныеЗаданияБота(МенеджерВременныхТаблиц, БотСсылка);

	ВыборкаЗапросаЗаданий = РезультатЗапроса.Выбрать();

	Пока ВыборкаЗапросаЗаданий.Следующий() Цикл
		ВыполнитьШагЗадания(ВыборкаЗапросаЗаданий, ТаблицаОбработанных);
	КонецЦикла;
	
	РезультатЗапроса = ПолучитьДанныеДляВыполненияКоманд(МенеджерВременныхТаблиц, БотСсылка);
	
	ВыборкаЗапросаКоманд = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапросаКоманд.Следующий() Цикл
		ВыполнитьОтветНаКоманду(ВыборкаЗапросаКоманд, ТаблицаОбработанных);
	КонецЦикла;
	
	ВыполнитьОтветНаСообщения(МенеджерВременныхТаблиц, БотСсылка, ТаблицаОбработанных);
	
	Дикримент = ТаблицаОбработанных.Количество() - 1;
	Пока Дикримент >= 0 Цикл
		Если ТаблицаОбработанных[Дикримент].Обработано Тогда
			МенеджерЗаписи = РегистрыСведений.ИдентификаторыОбновленийБотов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Бот = БотСсылка;
			МенеджерЗаписи.ИдентификаторОбновления = ТаблицаОбработанных[Дикримент].ИдентификаторОбновления;
			МенеджерЗаписи.Записать();
			
			Прервать;
		КонецЕсли;
		
		Дикримент = Дикримент - 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеЗаданий

// Получить результат выполнения условия задания.
// 
// Параметры:
//  УсловиеВыполнения - СправочникСсылка.ПользовательскиеФункции - Условие выполнения
//  ТаблицаПараметров - ТаблицаЗначений - Таблица параметров,
//   см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций
//  Вручную - Булево - Вручную
// 
// Возвращаемое значение:
//  Булево - Результат выполнения условия задания
Функция ПолучитьРезультатВыполненияУсловияЗадания(УсловиеВыполнения, ТаблицаПараметров, Вручную)

	УсловиеВыполнено = Ложь;

	Если ЗначениеЗаполнено(УсловиеВыполнения) Тогда
		РезультатФункции = ИнтеграцияСБотамиСлужебныйСервер.ВыполнитьПользовательскуюФункцию(
			УсловиеВыполнения, ТаблицаПараметров);

		ТипРезультатУсловия = ТипЗнч(РезультатФункции);
		Если ТипРезультатУсловия <> Тип("Булево") Тогда
			ТекстСообщения = НСтр(СтрШаблон("ru = 'Выполнение задания бота прервано: условие"
				+ " возвращает некорректный тип значения: %1. Необходимо Булево';", ТипРезультатУсловия));

			Если Вручную Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				ЗаписьЖурналаРегистрации("Выполнение задания бота", УровеньЖурналаРегистрации.Ошибка, ,
					УсловиеВыполнения, ТекстСообщения);
			КонецЕсли;

		ИначеЕсли Не РезультатФункции Тогда
			ТекстСообщения = НСтр("ru = 'Выполнение задания бота завершено: условие не выполнено';");

			Если Вручную Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				ЗаписьЖурналаРегистрации("Выполнение задания бота", УровеньЖурналаРегистрации.Предупреждение, ,
					УсловиеВыполнения, ТекстСообщения);
			КонецЕсли;

		Иначе
			УсловиеВыполнено = Истина;
		КонецЕсли;
	Иначе
		УсловиеВыполнено = Истина;
	КонецЕсли;

	Возврат УсловиеВыполнено;

КонецФункции

// Определить получателей задания.
// 
// Параметры:
//  ЗаданиеБотаСсылка - СправочникСсылка.ЗаданияБотов - Задание бота ссылка
//  ПолучателиСписком - Булево - Получатели списком
//  ПолучателиАлгоритм - СправочникСсылка.ПользовательскиеФункции - Получатели алгоритм
//  ТаблицаПараметров - ТаблицаЗначений - Таблица параметров,
//   см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций 
//  Вручную - Булево - Вручную
// 
// Возвращаемое значение:
//  Неопределено, Массив из СправочникСсылка.Пользователи - Получатели задания
Функция ОпределитьПолучателейЗадания(ЗаданиеБотаСсылка, ПолучателиСписком, ПолучателиАлгоритм, ТаблицаПараметров,
	Вручную)

	ПолучателиЗадания = Неопределено;

	Если ПолучателиСписком Тогда
		ПолучателиЗадания = ЗаданиеБотаСсылка.Получатели.Выгрузить().ВыгрузитьКолонку("Получатель");
	Иначе
		РезультатФункции = ИнтеграцияСБотамиСлужебныйСервер.ВыполнитьПользовательскуюФункцию(
			ПолучателиАлгоритм, ТаблицаПараметров);

		ТипРезультатаПолучатели = ТипЗнч(РезультатФункции);
		Если ТипРезультатаПолучатели <> Тип("Массив") Тогда
			ТекстСообщения = НСтр(СтрШаблон("ru = 'Выполнение задания бота прервано: алгоритм получателей"
				+ " возвращает некорректный тип значения: %1. Необходимо Массив';", ТипРезультатаПолучатели));

			Если Вручную Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				ЗаписьЖурналаРегистрации("Выполнение задания бота", УровеньЖурналаРегистрации.Ошибка, ,
					ПолучателиАлгоритм, ТекстСообщения);
			КонецЕсли;

		ИначеЕсли Не РезультатФункции.Количество() Тогда
			ТекстСообщения = НСтр(
				"ru = 'Выполнение задания бота завершено: алгоритм получателей возвращает пустой массив';");

			Если Вручную Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				ЗаписьЖурналаРегистрации("Выполнение задания бота", УровеньЖурналаРегистрации.Ошибка, ,
					ПолучателиАлгоритм, ТекстСообщения);
			КонецЕсли;

		Иначе
			ПолучателиЗадания = РезультатФункции;

		КонецЕсли;
	КонецЕсли;

	Возврат ПолучателиЗадания;

КонецФункции

// Выполнить задание бота после получения данных.
// 
// Параметры:
//  ЗаданиеБотаСсылка - СправочникСсылка.ЗаданияБотов - Задание бота ссылка
//  ПолучателиЗадания - Массив из СправочникСсылка.Пользователи - Получатели задания
//  ПростаяОтправка - Булево - Простая отправка
//  НастройкаОтправки - СправочникСсылка.ПользовательскиеФункции - Настройка отправки
//  ШагиВыполнения - СправочникСсылка.ШагиВыполненияЗаданий - Шаги выполнения
//  ВложенностьКнопокМеню - СправочникСсылка.ВложенностьКнопокМеню - Вложенность кнопок меню
//  Вручную - Булево - Вручную
Процедура ВыполнитьЗаданиеБотаПослеПолученияДанных(ЗаданиеБотаСсылка, ПолучателиЗадания, ПростаяОтправка,
	НастройкаОтправки, ШагиВыполнения, ВложенностьКнопокМеню, Вручную)

	СлужебныйМодуль = ИнтеграцияСБотамиСлужебныйСервер;

	Попытка
		
		Для Каждого ЭлементПолучатель Из ПолучателиЗадания Цикл
			
			Если ПростаяОтправка Тогда
				ПользовательскаяФункция = НастройкаОтправки;
				Вложенность = ВложенностьКнопокМеню;
			Иначе
				ПользовательскаяФункция = ШагиВыполнения.Шаги[0].АлгоритмОтправки;
				Вложенность = ШагиВыполнения.Шаги[0].ВложенностьКнопок;
			КонецЕсли;
			
			ТаблицаПараметров = ПолучитьТаблицуПараметровДляВыполненияШагаЗадания(
				ЗаданиеБотаСсылка, ЭлементПолучатель, Вложенность, Неопределено);
			
			РезультатФункции = СлужебныйМодуль.ВыполнитьПользовательскуюФункцию(
				ПользовательскаяФункция, ТаблицаПараметров);
			
			Если Не ПростаяОтправка И РезультатФункции <> Неопределено Тогда
					
				СлужебныйМодуль.ДобавитьЗаписьВыполненияЗаданийБотов(
					ЗаданиеБотаСсылка.Владелец, ЭлементПолучатель, ЗаданиеБотаСсылка,
					1, РезультатФункции.Идентификатор, РезультатФункции.Дата);
					
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр(СтрШаблон(
			"ru = 'Выполнение задания бота прервано по причине: %1'", ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке())));

		Если Вручную Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаписьЖурналаРегистрации("Выполнение задания бота", УровеньЖурналаРегистрации.Ошибка, , ЗаданиеБотаСсылка,
				ТекстСообщения);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти // ВыполнениеЗаданий

#Область ВыполнениеШаговЗаданийИКоманд

// Помещает данные сообщений, идентификации пользователей, настроек ботов в менеджер временных таблиц.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  ДанныеСообщений - Неопределено, ТаблицаЗначений - Данные сообщений,
//   см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуСообщенийПользователя
Процедура ПоместитьДанныеСообщенийИдентификацииБотовВМенеджер(МенеджерВременныхТаблиц, ДанныеСообщений)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ДанныеСообщений", ДанныеСообщений);

	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ДанныеСообщений.Дата КАК Дата,
	|	ДанныеСообщений.Текст КАК Текст,
	|	ДанныеСообщений.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ДанныеСообщений.НаименованиеЧата КАК НаименованиеЧата,
	|	ДанныеСообщений.ЭтоInlineMode КАК ЭтоInlineMode,
	|	ДанныеСообщений.ИдентификаторПользователя КАК ИдентификаторПользователя,
	|	ДанныеСообщений.ОтветНа_Идентификатор КАК НаСообщение,
	|	ДанныеСообщений.ОтветНа_Чат КАК НаЧат,
	|	ДанныеСообщений.СодержимоеСообщения КАК СодержимоеСообщения
	|ПОМЕСТИТЬ ВТДанныеСообщений
	|ИЗ
	|	&ДанныеСообщений КАК ДанныеСообщений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияПользователейСистем.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	СоответствияПользователейСистем.Пользователь КАК Пользователь,
	|	СоответствияПользователейСистем.ЗначениеСистемы КАК ИдентификаторПользователя,
	|	СоответствияПользователейСистем.Зарегистрирован КАК Зарегистрирован
	|ПОМЕСТИТЬ ВТДанныеСоответствияСистем
	|ИЗ
	|	РегистрСведений.СоответствияПользователейСистем КАК СоответствияПользователейСистем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСообщений КАК ВТДанныеСообщений
	|		ПО СоответствияПользователейСистем.ЗначениеСистемы = ВТДанныеСообщений.ИдентификаторПользователя
	|			И (СоответствияПользователейСистем.ТипИдентификации = ЗНАЧЕНИЕ(Перечисление.ТипыИдентификацииСистем.Идентификатор))
	|ГДЕ
	|	СоответствияПользователейСистем.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияПользователейСистем.НастройкаИнтеграции,
	|	СоответствияПользователейСистем.Пользователь,
	|	СоответствияПользователейСистем.ЗначениеСистемы,
	|	СоответствияПользователейСистем.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТДанныеСообщений.Дата КАК Дата,
	|	ВТДанныеСообщений.Текст КАК Текст,
	|	ВТДанныеСообщений.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТДанныеСообщений.НаименованиеЧата КАК НаименованиеЧата,
	|	ВТДанныеСообщений.ЭтоInlineMode КАК ЭтоInlineMode,
	|	ВТДанныеСообщений.ИдентификаторПользователя КАК ИдентификаторПользователя,
	|	ВТДанныеСообщений.НаСообщение КАК НаСообщение,
	|	ВТДанныеСообщений.НаЧат КАК НаЧат,
	|	ВТДанныеСообщений.СодержимоеСообщения КАК СодержимоеСообщения,
	|	ВТДанныеСоответствияСистем.Пользователь КАК Пользователь,
	|	ВТДанныеСоответствияСистем.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеСоответствияСистем.Зарегистрирован КАК Зарегистрирован
	|ПОМЕСТИТЬ ВТДанныеСообщенийСПользователямиБезКонтроляОтвета
	|ИЗ
	|	ВТДанныеСообщений КАК ВТДанныеСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСоответствияСистем КАК ВТДанныеСоответствияСистем
	|		ПО ВТДанныеСообщений.ИдентификаторПользователя = ВТДанныеСоответствияСистем.ИдентификаторПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Боты.Ссылка КАК Бот,
	|	ВТДанныеСоответствияСистем.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеСоответствияСистем.Пользователь КАК Пользователь,
	|	Боты.ТипБота КАК ТипБота
	|ПОМЕСТИТЬ ВТДанныеБота
	|ИЗ
	|	ВТДанныеСоответствияСистем КАК ВТДанныеСоответствияСистем
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Боты КАК Боты
	|		ПО ВТДанныеСоответствияСистем.НастройкаИнтеграции = Боты.НастройкаИнтеграции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.Дата КАК Дата,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.Текст КАК Текст,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.НаименованиеЧата КАК НаименованиеЧата,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.ЭтоInlineMode КАК ЭтоInlineMode,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.ИдентификаторПользователя КАК ИдентификаторПользователя,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.НаСообщение КАК НаСообщение,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.НаЧат КАК НаЧат,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.СодержимоеСообщения КАК СодержимоеСообщения,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.Пользователь КАК Пользователь,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.Зарегистрирован КАК Зарегистрирован,
	|	ЕСТЬNULL(СообщенияПользователейБотовСрезПоследних.ИдентификаторОтвета, 0) КАК ИдентификаторОтвета
	|ПОМЕСТИТЬ ВТДанныеСообщенийСПользователями
	|ИЗ
	|	ВТДанныеСообщенийСПользователямиБезКонтроляОтвета КАК ВТДанныеСообщенийСПользователямиБезКонтроляОтвета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияПользователейБотов.СрезПоследних(
	|				,
	|				Бот В
	|					(ВЫБРАТЬ
	|						ВТДанныеБота.Бот
	|					ИЗ
	|						ВТДанныеБота КАК ВТДанныеБота)) КАК СообщенияПользователейБотовСрезПоследних
	|		ПО ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.Пользователь = СообщенияПользователейБотовСрезПоследних.Пользователь
	|			И (СообщенияПользователейБотовСрезПоследних.ИдентификаторОтвета > ВТДанныеСообщенийСПользователямиБезКонтроляОтвета.ИдентификаторСообщения)";
	
	Запрос.Выполнить();

КонецПроцедуры

// Проверяет, есть ли у пользователя незаконченные задания от бота, например, опрос.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  БотСсылка - СправочникСсылка.Боты - Бот
// 
// Возвращаемое значение:
//  Неопределено, РезультатЗапроса - Проверить есть незаконченные задания бота
Функция ПроверитьЕстьНезаконченныеЗаданияБота(МенеджерВременныхТаблиц, БотСсылка)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Бот", БотСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВыполнениеЗаданийБотовСрезПоследних.Период) КАК Период,
	|	МАКСИМУМ(ВыполнениеЗаданийБотовСрезПоследних.ИдентификаторСообщения) КАК ИдентификаторСообщения,
	|	ВыполнениеЗаданийБотовСрезПоследних.Пользователь КАК Пользователь,
	|	ВыполнениеЗаданийБотовСрезПоследних.Бот КАК Бот,
	|	ВыполнениеЗаданийБотовСрезПоследних.НомерШага КАК НомерПрошлогоШага,
	|	ВыполнениеЗаданийБотовСрезПоследних.Задание КАК Задание,
	|	ВыполнениеЗаданийБотовСрезПоследних.Задание.ШагиВыполнения КАК ШагиВыполнения
	|ПОМЕСТИТЬ ВТПоследниеИдентификаторыСообщений
	|ИЗ
	|	РегистрСведений.ВыполнениеЗаданийБотов.СрезПоследних(&Период, Бот = &Бот) КАК ВыполнениеЗаданийБотовСрезПоследних
	|ГДЕ
	|	ВыполнениеЗаданийБотовСрезПоследних.ОтветПользователя = """"
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеЗаданийБотовСрезПоследних.Пользователь,
	|	ВыполнениеЗаданийБотовСрезПоследних.Бот,
	|	ВыполнениеЗаданийБотовСрезПоследних.НомерШага,
	|	ВыполнениеЗаданийБотовСрезПоследних.Задание,
	|	ВыполнениеЗаданийБотовСрезПоследних.Задание.ШагиВыполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТДанныеСообщенийСПользователями.ИдентификаторСообщения) КАК ИдентификаторСообщения,
	|	ВТДанныеСообщенийСПользователями.Пользователь КАК Пользователь,
	|	ВТДанныеСообщенийСПользователями.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ПОМЕСТИТЬ ВТПервыеОтветыПользователей
	|ИЗ
	|	ВТПоследниеИдентификаторыСообщений КАК ВТПоследниеИдентификаторыСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями
	|		ПО ВТПоследниеИдентификаторыСообщений.Пользователь = ВТДанныеСообщенийСПользователями.Пользователь
	|		И ВТПоследниеИдентификаторыСообщений.Бот.НастройкаИнтеграции = ВТДанныеСообщенийСПользователями.НастройкаИнтеграции
	|		И ВТПоследниеИдентификаторыСообщений.ИдентификаторСообщения <= ВТДанныеСообщенийСПользователями.ИдентификаторСообщения
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСообщенийСПользователями.Пользователь,
	|	ВТДанныеСообщенийСПользователями.НастройкаИнтеграции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПервыеОтветыПользователей.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТПервыеОтветыПользователей.Пользователь КАК Пользователь,
	|	ВТПервыеОтветыПользователей.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеСообщенийСПользователями.Дата КАК Дата,
	|	ВТДанныеСообщенийСПользователями.Текст КАК Текст,
	|	ВТДанныеСообщенийСПользователями.СодержимоеСообщения КАК СодержимоеСообщения,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторПользователя КАК ИдентификаторПользователя
	|ПОМЕСТИТЬ ВТОтветыПользователейГотовые
	|ИЗ
	|	ВТПервыеОтветыПользователей КАК ВТПервыеОтветыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями
	|		ПО ВТПервыеОтветыПользователей.НастройкаИнтеграции = ВТДанныеСообщенийСПользователями.НастройкаИнтеграции
	|		И ВТПервыеОтветыПользователей.Пользователь = ВТДанныеСообщенийСПользователями.Пользователь
	|		И ВТПервыеОтветыПользователей.ИдентификаторСообщения = ВТДанныеСообщенийСПользователями.ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследниеИдентификаторыСообщений.Период КАК Период,
	|	ВТДанныеБота.Бот КАК Бот,
	|	ВТДанныеБота.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеБота.Пользователь КАК Пользователь,
	|	ВТПоследниеИдентификаторыСообщений.НомерПрошлогоШага КАК НомерПрошлогоШага,
	|	ВТПоследниеИдентификаторыСообщений.Задание КАК Задание,
	|	ВТПоследниеИдентификаторыСообщений.ШагиВыполнения КАК ШагиВыполнения,
	|	ВТОтветыПользователейГотовые.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТОтветыПользователейГотовые.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТОтветыПользователейГотовые.Дата КАК ДатаОтвета,
	|	ВТОтветыПользователейГотовые.Текст КАК ТекстОтвета,
	|	ВТОтветыПользователейГотовые.СодержимоеСообщения КАК СодержимоеСообщения
	|ПОМЕСТИТЬ ВТДанныеНезаконченныхЗаданий
	|ИЗ
	|	ВТДанныеБота КАК ВТДанныеБота
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеИдентификаторыСообщений КАК ВТПоследниеИдентификаторыСообщений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтветыПользователейГотовые КАК ВТОтветыПользователейГотовые
	|			ПО ВТПоследниеИдентификаторыСообщений.Пользователь = ВТОтветыПользователейГотовые.Пользователь
	|			И ВТПоследниеИдентификаторыСообщений.Бот.НастройкаИнтеграции = ВТОтветыПользователейГотовые.НастройкаИнтеграции
	|		ПО ВТДанныеБота.Бот = ВТПоследниеИдентификаторыСообщений.Бот
	|		И ВТДанныеБота.Пользователь = ВТПоследниеИдентификаторыСообщений.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеНезаконченныхЗаданий.Период КАК Период,
	|	ВТДанныеНезаконченныхЗаданий.Бот КАК Бот,
	|	ВТДанныеНезаконченныхЗаданий.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеНезаконченныхЗаданий.Пользователь КАК Пользователь,
	|	ВТДанныеНезаконченныхЗаданий.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТДанныеНезаконченныхЗаданий.НомерПрошлогоШага КАК НомерПрошлогоШага,
	|	ВТДанныеНезаконченныхЗаданий.НомерПрошлогоШага + 1 КАК НомерШага,
	|	ВТДанныеНезаконченныхЗаданий.Задание КАК Задание,
	|	ВТДанныеНезаконченныхЗаданий.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТДанныеНезаконченныхЗаданий.ДатаОтвета КАК ДатаОтвета,
	|	ВТДанныеНезаконченныхЗаданий.ТекстОтвета КАК ТекстОтвета,
	|	ВТДанныеНезаконченныхЗаданий.СодержимоеСообщения КАК СодержимоеСообщения,
	|	НовыйШаг.АлгоритмОтправки КАК АлгоритмОтправки,
	|	НовыйШаг.ВложенностьКнопок КАК ВложенностьКнопок,
	|	НовыйШаг.НеОжидаетОтветаПользователя КАК НеОжидаетОтветаПользователя,
	|	СтарыйШаг.КонтрольОжидаемогоОтвета КАК КонтрольОжидаемогоОтвета,
	|	СтарыйШаг.ВложенностьКнопок КАК ВложенностьПрошлогоШага,
	|	СтарыйШаг.АлгоритмКонвертацииОтвета КАК АлгоритмКонвертацииОтвета
	|ИЗ
	|	ВТДанныеНезаконченныхЗаданий КАК ВТДанныеНезаконченныхЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШагиВыполненияЗаданий.Шаги КАК НовыйШаг
	|		ПО ВТДанныеНезаконченныхЗаданий.ШагиВыполнения = НовыйШаг.Ссылка
	|		И (ВТДанныеНезаконченныхЗаданий.НомерПрошлогоШага + 1 = НовыйШаг.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШагиВыполненияЗаданий.Шаги КАК СтарыйШаг
	|		ПО ВТДанныеНезаконченныхЗаданий.ШагиВыполнения = СтарыйШаг.Ссылка
	|		И ВТДанныеНезаконченныхЗаданий.НомерПрошлогоШага = СтарыйШаг.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;

КонецФункции

// Выполняет шаг задания бота.
// 
// Параметры:
//  ВыборкаЗапросаЗаданий - ВыборкаИзРезультатаЗапроса - Выборка запроса заданий. Поля:
//   * Период - Дата - Период выполнения задания (во временном поясе сервера)
//   * Бот - СправочникСсылка.Боты - Бот, по которому выполняется задание
//   * НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграции - Настройки интеграции бота
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, который взаимодействует с ботом
//   * НомерПрошлогоШага - Число - Номер прошлого шага задания
//   * НомерШага - Число - Номер текущего шага задания
//   * Задание - СправочникСсылка.ЗаданияБотов - Выполняемое задание
//   * ИдентификаторСообщения - Число - Идентификатор сообщения чата бота
//   * ДатаОтвета - Дата - Дата ответа пользователя (в UTC-0, переведенная из UnixTime)
//   * ТекстОтвета - Строка - Текст ответа пользователя боту
//   * СодержимоеСообщения - Строка - Тип содержимого ответа пользователя
//   * АлгоритмОтправки - СправочникСсылка.ПользовательскиеФункции - Функция текущего шага
//   * ВложенностьКнопок - СправочникСсылка.ВложенностьКнопокМеню - Вложенность кнопок меню текущего шага
//   * НеОжидаетОтветаПользователя - Булево - если Истина, то пользователю не нужно отвечать на сообщение
//   * КонтрольОжидаемогоОтвета - СправочникСсылка.ПользовательскиеФункции - Функция, отвечающая за контроль значений,
//    прошлого шага
//   * ВложенностьПрошлогоШага - СправочникСсылка.ВложенностьКнопокМеню - Вложенность кнопок меню прошлого шага
//   * АлгоритмКонвертацииОтвета - СправочникСсылка.ПользовательскиеФункции - Алгоритм конвертации ответа прошлого шага
//  ТаблицаОбработанных - ТаблицаЗначений - см. ОтветитьПользователюБота
Процедура ВыполнитьШагЗадания(ВыборкаЗапросаЗаданий, ТаблицаОбработанных)
	
	// Если пользователь вызвал команду, то не обрабатываем ответ
	Если СтрНачинаетсяС(ВыборкаЗапросаЗаданий.ТекстОтвета, "/") Тогда
		Возврат;
	КонецЕсли;

	СлужебныйМодуль = ИнтеграцияСБотамиСлужебныйСервер;

	КонтрольПройден = ВыполнитьКонтрольОтветаПользователя(ВыборкаЗапросаЗаданий);
	Если Не КонтрольПройден Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПараметров = ПолучитьТаблицуПараметровДляВыполненияШагаЗадания(
		ВыборкаЗапросаЗаданий.Задание, ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.ВложенностьКнопок,
		ВыборкаЗапросаЗаданий.ТекстОтвета);
	
	СлужебныйМодуль.ВыполнитьПользовательскуюФункцию(
		ВыборкаЗапросаЗаданий.АлгоритмКонвертацииОтвета, ТаблицаПараметров);
	
	// Это ответ на последний шаг. Дальше продолжать выполнение задание не нужно - оно закончено
	Если ВыборкаЗапросаЗаданий.АлгоритмОтправки = Null Тогда
		СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаЗапросаЗаданий.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если СтрокаОбработанных <> Неопределено Тогда
			СтрокаОбработанных.Обработано = Истина;
		КонецЕсли;
		
		СлужебныйМодуль.ИзменитьЗаписьВыполненияЗаданийБотов(ВыборкаЗапросаЗаданий.Бот,
			ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.Задание, ВыборкаЗапросаЗаданий.НомерПрошлогоШага,
			ВыборкаЗапросаЗаданий.ИдентификаторСообщения, ВыборкаЗапросаЗаданий.ТекстОтвета,
			ВыборкаЗапросаЗаданий.ДатаОтвета);
		
		НачатьПерепискуПользователейПриНеобходимости(ВыборкаЗапросаЗаданий.Бот,
			ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.ИдентификаторСообщения,
			ВыборкаЗапросаЗаданий.ТекстОтвета, ВыборкаЗапросаЗаданий.СодержимоеСообщения,
			ВыборкаЗапросаЗаданий.Задание);

		Возврат;
	КонецЕсли;

	РезультатФункции = СлужебныйМодуль.ВыполнитьПользовательскуюФункцию(
		ВыборкаЗапросаЗаданий.АлгоритмОтправки, ТаблицаПараметров);

	Если РезультатФункции <> Неопределено Тогда
		СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаЗапросаЗаданий.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если СтрокаОбработанных <> Неопределено Тогда
			СтрокаОбработанных.Обработано = Истина;
		КонецЕсли;
			
		СлужебныйМодуль.ИзменитьЗаписьВыполненияЗаданийБотов(ВыборкаЗапросаЗаданий.Бот,
			ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.Задание, ВыборкаЗапросаЗаданий.НомерПрошлогоШага,
			ВыборкаЗапросаЗаданий.ИдентификаторСообщения, ВыборкаЗапросаЗаданий.ТекстОтвета,
			ВыборкаЗапросаЗаданий.ДатаОтвета, Истина, Истина);
		
		НачатьПерепискуПользователейПриНеобходимости(ВыборкаЗапросаЗаданий.Бот,
			ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.ИдентификаторСообщения,
			ВыборкаЗапросаЗаданий.ТекстОтвета, ВыборкаЗапросаЗаданий.СодержимоеСообщения,
			ВыборкаЗапросаЗаданий.Задание);

		Если Не ВыборкаЗапросаЗаданий.НеОжидаетОтветаПользователя Тогда
			СлужебныйМодуль.ДобавитьЗаписьВыполненияЗаданийБотов(
				ВыборкаЗапросаЗаданий.Бот, ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.Задание,
				ВыборкаЗапросаЗаданий.НомерШага, РезультатФункции.Идентификатор, РезультатФункции.Дата);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполнить контроль ответа пользователя.
// 
// Параметры:
//  ВыборкаЗапросаЗаданий - ВыборкаИзРезультатаЗапроса - Выборка запроса заданий, см. описание ВыполнитьШагЗадания
// 
// Возвращаемое значение:
//  Булево - Выполнить контроль ответа пользователя
Функция ВыполнитьКонтрольОтветаПользователя(ВыборкаЗапросаЗаданий)

	КонтрольПройден = Ложь;
	СлужебныйМодуль = ИнтеграцияСБотамиСлужебныйСервер;
	
	ТаблицаПараметров = ПолучитьТаблицуПараметровДляВыполненияШагаЗадания(
		ВыборкаЗапросаЗаданий.Задание, ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.ВложенностьПрошлогоШага,
		ВыборкаЗапросаЗаданий.ТекстОтвета);

	Если ЗначениеЗаполнено(ВыборкаЗапросаЗаданий.КонтрольОжидаемогоОтвета) Тогда

		РезультатФункции = СлужебныйМодуль.ВыполнитьПользовательскуюФункцию(
			ВыборкаЗапросаЗаданий.КонтрольОжидаемогоОтвета, ТаблицаПараметров);

		Если ТипЗнч(РезультатФункции) = Тип("Строка") Тогда
			ДанныеСообщенияОшибки = ИнтеграцияСTelegramBotСервер.ОтправитьПолученнуюОшибку(
				ВыборкаЗапросаЗаданий.Бот, ВыборкаЗапросаЗаданий.Пользователь, РезультатФункции);

			Если ДанныеСообщенияОшибки <> Неопределено Тогда
				СлужебныйМодуль.ИзменитьЗаписьВыполненияЗаданийБотов(
					ВыборкаЗапросаЗаданий.Бот, ВыборкаЗапросаЗаданий.Пользователь, ВыборкаЗапросаЗаданий.Задание,
					ВыборкаЗапросаЗаданий.НомерПрошлогоШага, ДанныеСообщенияОшибки.Идентификатор, , , Истина, Истина);
			КонецЕсли;
		Иначе
			КонтрольПройден = Истина;
		КонецЕсли;
		
	Иначе
		КонтрольПройден = Истина;

	КонецЕсли;

	Возврат КонтрольПройден;

КонецФункции

// Начинает сквозную переписку пользователей через бота
//
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Инициатор - СправочникСсылка.Пользователи - Пользователь, начинающий переписку
//  ИдентификаторСообщения - Число - Идентификатор сообщения начала переписки
//  ТекстСообщения - Строка - Текст сообщения пользователя
//  СодержимоеСообщения - Строка - Тип содержимого сообщения
//  Задание - СправочникСсылка.ЗаданияБотов - Задание, которое начинает переписку
//  Получатели - Массив, СправочникСсылка.Пользователи - Список получателей
//
Процедура НачатьПерепискуПользователейПриНеобходимости(Бот, Инициатор, ИдентификаторСообщения,
	ТекстСообщения, СодержимоеСообщения, Задание = Неопределено, Получатели = Неопределено)
	
	Если Задание.ТипЗадания <> Перечисления.ТипыЗаданийБота.Пересылка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатели) Тогда
		ПолучателиЗадания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Получатели);
	Иначе
		ТаблицаПараметров = ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций();
		НовыйПараметр = ТаблицаПараметров.Добавить();
		НовыйПараметр.Параметр = "Параметр_ЗаданиеБота";
		НовыйПараметр.Значение = Задание;
		
		РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ПолучателиСписком, ПолучателиАлгоритм");
		ПолучателиЗадания = ОпределитьПолучателейЗадания(Задание, РеквизитыЗадания.ПолучателиСписком,
			РеквизитыЗадания.ПолучателиАлгоритм, ТаблицаПараметров, Ложь);
		Если ПолучателиЗадания = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементПолучатель Из ПолучателиЗадания Цикл
		
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("ТипСообщения"	, Перечисления.ТипыСообщенийTelegramBot[СодержимоеСообщения]);
		ДанныеСообщения.Вставить("Содержимое"	, ТекстСообщения);
		
		РезультатОтправки = ВыполнитьОтправкуСообщения(Бот, ДанныеСообщения, ЭлементПолучатель);
		
		Если РезультатОтправки <> Неопределено Тогда
			ИнтеграцияСБотамиСлужебныйСервер.ДобавитьЗаписьСообщенияПользователейБотов(
				Бот, Инициатор, ИдентификаторСообщения,
				Перечисления.ТипыСообщенийПользователяБота.СообщениеПользователю,
				ТекстСообщения, РезультатОтправки.Идентификатор,
				РезультатОтправки.Чат, ИдентификаторСообщения, ЭлементПолучатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает данные открытых меню, выполнения команд и данных регистрации пользователей
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  БотСсылка - СправочникСсылка.Боты - Бот
// 
// Возвращаемое значение:
//  Неопределено, РезультатЗапроса - Данные команд / меню / регистрации
Функция ПолучитьДанныеДляВыполненияКоманд(МенеджерВременныхТаблиц, БотСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Бот", БотСсылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВТДанныеСообщений.Дата) КАК Дата,
	|	ВТДанныеСообщений.ИдентификаторПользователя КАК ИдентификаторПользователя
	|ПОМЕСТИТЬ ВТДанныеСообщенийПоследние
	|ИЗ
	|	ВТДанныеСообщений КАК ВТДанныеСообщений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСообщений.ИдентификаторПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОткрытоеМенюПользователяБота.Бот КАК Бот,
	|	ОткрытоеМенюПользователяБота.Пользователь КАК Пользователь,
	|	ВложенностьКнопокМеню.Ссылка КАК ВложенностьКнопок,
	|	ВложенностьКнопокМеню.АлгоритмОбработки КАК АлгоритмОбработки,
	|	ВложенностьКнопокМеню.Задание КАК Задание,
	|	ВложенностьКнопокМеню.КнопкаВызываетЗадание КАК ВызываетЗадание,
	|	ВложенностьКнопокМеню.ТекстКнопки КАК Текст
	|ПОМЕСТИТЬ ВТАктивныеМеню
	|ИЗ
	|	РегистрСведений.ОткрытоеМенюПользователяБота КАК ОткрытоеМенюПользователяБота
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВложенностьКнопокМеню КАК ВложенностьКнопокМеню
	|		ПО ОткрытоеМенюПользователяБота.Меню = ВложенностьКнопокМеню.Родитель
	|ГДЕ
	|	ОткрытоеМенюПользователяБота.Бот В
	|			(ВЫБРАТЬ
	|				ВТДанныеБота.Бот
	|			ИЗ
	|				ВТДанныеБота КАК ВТДанныеБота)
	|	И ОткрытоеМенюПользователяБота.Пользователь В
	|			(ВЫБРАТЬ
	|				ВТДанныеСообщенийСПользователями.Пользователь
	|			ИЗ
	|				ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Боты.Ссылка КАК Бот,
	|	Боты.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ПОМЕСТИТЬ ВТНастройкиБота
	|ИЗ
	|	Справочник.Боты КАК Боты
	|ГДЕ
	|	Боты.Ссылка = &Бот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСообщенийСПользователями.Дата КАК Дата,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТДанныеСообщенийСПользователями.Текст КАК Текст,
	|	ВТДанныеБота.Бот КАК Бот,
	|	ВТДанныеБота.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеСообщенийСПользователями.Пользователь КАК Пользователь,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТДанныеСообщенийСПользователями.НаименованиеЧата КАК НаименованиеЧата,
	|	ВТДанныеСообщенийСПользователями.ЭтоInlineMode КАК ЭтоInlineMode,
	|	ВТДанныеСообщенийСПользователями.Зарегистрирован КАК Зарегистрирован,
	|	КомандыБотовКоманды.ДоступнаВInlineMode КАК ДоступнаВInlineMode,
	|	КомандыБотовКоманды.АлгоритмОтвета КАК АлгоритмОтвета,
	|	КомандыБотовКоманды.Задание КАК Задание,
	|	КомандыБотовКоманды.ВложенностьКнопок КАК ВложенностьКнопок,
	|	КомандыБотовКоманды.Задание <> ЗНАЧЕНИЕ(Справочник.ЗаданияБотов.ПустаяСсылка) КАК ВызываетЗадание,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.Команда) КАК ТипСообщения,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторОтвета КАК ИдентификаторОтвета
	|ПОМЕСТИТЬ ВТКомандыИМеню
	|ИЗ
	|	ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСообщенийПоследние КАК ВТДанныеСообщенийПоследние
	|		ПО ВТДанныеСообщенийСПользователями.ИдентификаторПользователя = ВТДанныеСообщенийПоследние.ИдентификаторПользователя
	|			И ВТДанныеСообщенийСПользователями.Дата = ВТДанныеСообщенийПоследние.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеБота КАК ВТДанныеБота
	|		ПО ВТДанныеСообщенийСПользователями.Пользователь = ВТДанныеБота.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыБотов.Команды КАК КомандыБотовКоманды
	|		ПО ВТДанныеСообщенийСПользователями.Текст = КомандыБотовКоманды.ИмяКоманды
	|			И (ВТДанныеБота.Бот.Команды = КомандыБотовКоманды.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеСообщенийСПользователями.Дата,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторСообщения,
	|	ВТДанныеСообщенийСПользователями.Текст,
	|	ВТДанныеБота.Бот,
	|	ВТДанныеБота.НастройкаИнтеграции,
	|	ВТДанныеСообщенийСПользователями.Пользователь,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторЧата,
	|	ВТДанныеСообщенийСПользователями.НаименованиеЧата,
	|	ВТДанныеСообщенийСПользователями.ЭтоInlineMode,
	|	ВТДанныеСообщенийСПользователями.Зарегистрирован,
	|	ЛОЖЬ,
	|	ВТАктивныеМеню.АлгоритмОбработки,
	|	ВТАктивныеМеню.Задание,
	|	ВТАктивныеМеню.ВложенностьКнопок,
	|	ВТАктивныеМеню.ВызываетЗадание,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.Меню),
	|	ВТДанныеСообщенийСПользователями.ИдентификаторОтвета
	|ИЗ
	|	ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСообщенийПоследние КАК ВТДанныеСообщенийПоследние
	|		ПО ВТДанныеСообщенийСПользователями.ИдентификаторПользователя = ВТДанныеСообщенийПоследние.ИдентификаторПользователя
	|			И ВТДанныеСообщенийСПользователями.Дата = ВТДанныеСообщенийПоследние.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеБота КАК ВТДанныеБота
	|		ПО ВТДанныеСообщенийСПользователями.Пользователь = ВТДанныеБота.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАктивныеМеню КАК ВТАктивныеМеню
	|		ПО (ВТДанныеБота.Бот = ВТАктивныеМеню.Бот)
	|			И ВТДанныеСообщенийСПользователями.Пользователь = ВТАктивныеМеню.Пользователь
	|			И ВТДанныеСообщенийСПользователями.Текст = ВТАктивныеМеню.Текст
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКомандыИМеню.Дата КАК Дата,
	|	ВТКомандыИМеню.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТКомандыИМеню.Текст КАК Текст,
	|	ВТКомандыИМеню.Бот КАК Бот,
	|	ВТКомандыИМеню.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТКомандыИМеню.Пользователь КАК Пользователь,
	|	ВТКомандыИМеню.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТКомандыИМеню.НаименованиеЧата КАК НаименованиеЧата,
	|	ВТКомандыИМеню.ДоступнаВInlineMode КАК ДоступнаВInlineMode,
	|	ВТКомандыИМеню.ЭтоInlineMode КАК ЭтоInlineMode,
	|	ВТКомандыИМеню.Зарегистрирован КАК Зарегистрирован,
	|	ВТКомандыИМеню.АлгоритмОтвета КАК АлгоритмОтвета,
	|	ВТКомандыИМеню.Задание КАК Задание,
	|	ВТКомандыИМеню.ВложенностьКнопок КАК ВложенностьКнопок,
	|	ВТКомандыИМеню.ВызываетЗадание КАК ВызываетЗадание,
	|	ВТКомандыИМеню.ТипСообщения КАК ТипСообщения,
	|	ЛОЖЬ КАК ЭтоРегистрация
	|ИЗ
	|	ВТКомандыИМеню КАК ВТКомандыИМеню
	|ГДЕ
	|	ВТКомандыИМеню.ИдентификаторОтвета = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеСообщений.Дата,
	|	ВТДанныеСообщений.ИдентификаторСообщения,
	|	ВТДанныеСообщений.Текст,
	|	ВТНастройкиБота.Бот,
	|	ВТНастройкиБота.НастройкаИнтеграции,
	|	ЕСТЬNULL(ВТДанныеСообщенийСПользователями.Пользователь, ВТДанныеСообщений.ИдентификаторПользователя),
	|	ВТДанныеСообщений.ИдентификаторЧата,
	|	ВТДанныеСообщений.НаименованиеЧата,
	|	ЛОЖЬ,
	|	ВТДанныеСообщений.ЭтоInlineMode КАК ЭтоInlineMode,
	|	ВТДанныеСообщенийСПользователями.Зарегистрирован,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.Команда),
	|	ИСТИНА
	|ИЗ
	|	ВТДанныеСообщений КАК ВТДанныеСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСообщенийПоследние КАК ВТДанныеСообщенийПоследние
	|		ПО ВТДанныеСообщений.ИдентификаторПользователя = ВТДанныеСообщенийПоследние.ИдентификаторПользователя
	|			И ВТДанныеСообщений.Дата = ВТДанныеСообщенийПоследние.Дата
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНастройкиБота КАК ВТНастройкиБота
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями
	|		ПО ВТДанныеСообщений.ИдентификаторСообщения = ВТДанныеСообщенийСПользователями.ИдентификаторСообщения
	|ГДЕ
	|	НЕ (ВТДанныеСообщений.ИдентификаторСообщения, ВТДанныеСообщений.Дата) В
	|				(ВЫБРАТЬ
	|					ВТКомандыИМеню.ИдентификаторСообщения,
	|					ВТКомандыИМеню.Дата
	|				ИЗ
	|					ВТКомандыИМеню)
	|	И НЕ ЕСТЬNULL(ВТДанныеСообщенийСПользователями.Зарегистрирован, ЛОЖЬ)
	|	И НЕ ВТДанныеСообщений.ИдентификаторПользователя ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Выполнить ответ на команду.
//
// Параметры:
//  ВыборкаЗапросаКоманд - ВыборкаИзРезультатаЗапроса - Выборка запроса команд. Поля:
//   * Дата - Дата - Дата ответа пользователя (в UTC-0, переведенная из UnixTime)
//   * ИдентификаторСообщения - Число - Идентификатор сообщения чата бота
//   * Текст - Строка - Текст сообщения пользователя
//   * Бот - СправочникСсылка.Боты - Бот, по которому выполняется задание
//   * НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграции - Настройки интеграции бота
//   * Пользователь - СправочникСсылка.Пользователи, Число - Пользователь, который взаимодействует с ботом,
//   либо идентификатор чата, если пользователь не зарегистрирован
//   * АлгоритмОтвета - СправочникСсылка.ПользовательскиеФункции - Функция, выполняемая при вызове команды
//   * Задание - СправочникСсылка.ЗаданияБотов - Выполняемое задание
//   * ВложенностьКнопок - СправочникСсылка.ВложенностьКнопокМеню - Вложенность кнопок команды
//   * ВызываетЗадание - Число - 0, если кнопка / команда вызывает меню, 1 - вызывает задание
//   * ТипСообщения - ПеречислениеСсылка.ТипыСообщенийПользователяБота - Тип сообщения
//   * ЭтоРегистрация - Булево - Флаг в истина, если пользователь еще не зарегистрирован в системе
//  ТаблицаОбработанных - ТаблицаЗначений - см. ОтветитьПользователюБота
Процедура ВыполнитьОтветНаКоманду(ВыборкаЗапросаКоманд, ТаблицаОбработанных)
	
	Если Не ПроверитьСовместимостьКомандыСInlineModeПриНеобходимости(ВыборкаЗапросаКоманд, ТаблицаОбработанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаЗапросаКоманд.ЭтоРегистрация Тогда
		
		СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаЗапросаКоманд.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если СтрокаОбработанных <> Неопределено Тогда
			СтрокаОбработанных.Обработано = Истина;
		КонецЕсли;
		
		РегистрыСведений.РегистрацияПользователейБота.ЗарегистрироватьПользователяБотаВСистеме(
			ВыборкаЗапросаКоманд.Бот,
			ВыборкаЗапросаКоманд.НастройкаИнтеграции,
			ВыборкаЗапросаКоманд.Пользователь,
			ВыборкаЗапросаКоманд.ИдентификаторСообщения,
			ВыборкаЗапросаКоманд.Текст);
		
	Иначе
		
		СлужебныйМодуль = ИнтеграцияСБотамиСлужебныйСервер;
		
		Если ВыборкаЗапросаКоманд.ВызываетЗадание Тогда
			ДанныеПервогоШагаЗадания = ВыборкаЗапросаКоманд.Задание.ШагиВыполнения.Шаги[0];
			
			ТаблицаПараметров = ПолучитьТаблицуПараметровДляВыполненияШагаЗадания(
				ВыборкаЗапросаКоманд.Задание,
				ВыборкаЗапросаКоманд.Пользователь,
				ДанныеПервогоШагаЗадания.ВложенностьКнопок,
				"");
			
			РезультатФункции = СлужебныйМодуль.ВыполнитьПользовательскуюФункцию(
				ДанныеПервогоШагаЗадания.АлгоритмОтправки, ТаблицаПараметров);
			
			СлужебныйМодуль.ДобавитьЗаписьВыполненияЗаданийБотов(
				ВыборкаЗапросаКоманд.Бот,
				ВыборкаЗапросаКоманд.Пользователь,
				ВыборкаЗапросаКоманд.Задание,
				ДанныеПервогоШагаЗадания.НомерСтроки,
				РезультатФункции.Идентификатор,
				РезультатФункции.Дата);
		Иначе
			
			УдалитьНезаконченныеЗаданияПриРестартеБота(ВыборкаЗапросаКоманд.Текст,
				ВыборкаЗапросаКоманд.Бот, ВыборкаЗапросаКоманд.Пользователь);
			
			ТаблицаПараметров = ПолучитьТаблицуПараметровДляВыполненияКоманд(
				ВыборкаЗапросаКоманд.Бот,
				ВыборкаЗапросаКоманд.Пользователь,
				ВыборкаЗапросаКоманд.ВложенностьКнопок,
				ВыборкаЗапросаКоманд.Задание,
				ВыборкаЗапросаКоманд.ИдентификаторЧата,
				ВыборкаЗапросаКоманд.НаименованиеЧата);
				
			РезультатФункции = СлужебныйМодуль.ВыполнитьПользовательскуюФункцию(
				ВыборкаЗапросаКоманд.АлгоритмОтвета, ТаблицаПараметров);
		КонецЕсли;
	
		Если РезультатФункции <> Неопределено Тогда
			СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаЗапросаКоманд.ИдентификаторСообщения, "ИдентификаторСообщения");
			Если СтрокаОбработанных <> Неопределено Тогда
				СтрокаОбработанных.Обработано = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаЗапросаКоманд.ВложенностьКнопок)
				И Не ВыборкаЗапросаКоманд.ВызываетЗадание Тогда
				СлужебныйМодуль.ДобавитьИзменитьЗаписьОткрытогоМенюПользователя(
					ВыборкаЗапросаКоманд.Бот, ВыборкаЗапросаКоманд.Пользователь, ВыборкаЗапросаКоманд.ВложенностьКнопок);
			КонецЕсли;
			
			СлужебныйМодуль.ДобавитьЗаписьСообщенияПользователейБотов(
				ВыборкаЗапросаКоманд.Бот, ВыборкаЗапросаКоманд.Пользователь, ВыборкаЗапросаКоманд.ИдентификаторСообщения,
				ВыборкаЗапросаКоманд.ТипСообщения, ВыборкаЗапросаКоманд.Текст, РезультатФункции.Идентификатор, РезультатФункции.Чат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСовместимостьКомандыСInlineModeПриНеобходимости(ВыборкаЗапросаКоманд, ТаблицаОбработанных)
	
	Если Не ВыборкаЗапросаКоманд.ДоступнаВInlineMode И ВыборкаЗапросаКоманд.ЭтоInlineMode Тогда
		РезультатПроверки = Ложь;
		
		ТекстШаблона = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьТекстСообщенияПредопределенногоОтвета(
			ВыборкаЗапросаКоманд.Бот, Перечисления.ТипыПредопределенныхОтветовБота.КомандаНедоступнаВInlineMode);

		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("ТипСообщения"			, Перечисления.ТипыСообщенийTelegramBot.ОтправкаСообщения);
		ДанныеСообщения.Вставить("Содержимое"			, ТекстШаблона);
		ДанныеСообщения.Вставить("reply_to_message_id"	, ВыборкаЗапросаКоманд.ИдентификаторСообщения);
		
		РезультатОтправки = ВыполнитьОтправкуСообщения(ВыборкаЗапросаКоманд.Бот, ДанныеСообщения, ВыборкаЗапросаКоманд.ИдентификаторЧата);
		
		Если РезультатОтправки <> Неопределено Тогда
			СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаЗапросаКоманд.ИдентификаторСообщения, "ИдентификаторСообщения");
			Если СтрокаОбработанных <> Неопределено Тогда
				СтрокаОбработанных.Обработано = Истина;
			КонецЕсли;
			
			ИнтеграцияСБотамиСлужебныйСервер.ДобавитьЗаписьСообщенияПользователейБотов(
				ВыборкаЗапросаКоманд.Бот, ВыборкаЗапросаКоманд.Пользователь,
				ВыборкаЗапросаКоманд.ИдентификаторСообщения,
				Перечисления.ТипыСообщенийПользователяБота.СообщениеПользователю,
				ВыборкаЗапросаКоманд.Текст, РезультатОтправки.Идентификатор, РезультатОтправки.Чат);
		КонецЕсли;
	Иначе
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура УдалитьНезаконченныеЗаданияПриРестартеБота(ТекстКоманды, Бот, Пользователь)
	
	Если ТекстКоманды = "/start" Тогда
		ИнтеграцияСБотамиСлужебныйСервер.УдалитьЗаписьВыполненияЗаданийБотов(Бот, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВыполнениеШаговЗаданийИКоманд

#Область ВыполнениеОтветаНаСообщенияБота

// Выполняет ответ на сообщения пользователя боту или ответ на сквозную переписку пользователей через бота
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  БотСсылка - СправочникСсылка.Боты - Бот
//  ТаблицаОбработанных - ТаблицаЗначений - см. ОтветитьПользователюБота
Процедура ВыполнитьОтветНаСообщения(МенеджерВременныхТаблиц, БотСсылка, ТаблицаОбработанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Бот", БотСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТДанныеСообщенийСПользователями.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТДанныеСообщенийСПользователями.Дата КАК Дата,
	|	ВТДанныеСообщенийСПользователями.Текст КАК Текст,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ВТДанныеСообщенийСПользователями.НаименованиеЧата КАК НаименованиеЧата,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторПользователя КАК ИдентификаторПользователя,
	|	ВТДанныеСообщенийСПользователями.НаСообщение КАК НаСообщение,
	|	ВТДанныеСообщенийСПользователями.НаЧат КАК НаЧат,
	|	ВТДанныеСообщенийСПользователями.СодержимоеСообщения КАК СодержимоеСообщения,
	|	ВТДанныеСообщенийСПользователями.Пользователь КАК Пользователь,
	|	ВТДанныеСообщенийСПользователями.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ВТДанныеСообщенийСПользователями.Зарегистрирован КАК Зарегистрирован,
	|	ВТДанныеСообщенийСПользователями.ИдентификаторОтвета КАК ИдентификаторОтвета,
	|	ВЫБОР
	|		КОГДА НЕ СообщенияПользователейБотовОтветы.ИдентификаторОтвета ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.СообщениеПользователю)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СообщенияПользователейБотовСообщения.ИдентификаторОтвета ЕСТЬ NULL
	|					ТОГДА ВЫБОР
	|							КОГДА ВТДанныеСообщенийСПользователями.СодержимоеСообщения = ""НачалоВидеоЧата""
	|								ИЛИ ВТДанныеСообщенийСПользователями.СодержимоеСообщения = ""КонецВидеоЧата""
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.ВидеоЧат)
	|							ИНАЧЕ
	|								ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.Прочее)
	|						КОНЕЦ
	|				ИНАЧЕ
	|					НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипСообщения,
	|	СообщенияПользователейБотовОтветы.ИдентификаторСообщения КАК ИсходноеСообщение,
	|	СообщенияПользователейБотовОтветы.Пользователь КАК ИсходныйОтправитель,
	|	ЕСТЬNULL(СообщенияПользователейБотовПервоначальноеСообщение.ПервоначальноеСообщение, 0) КАК ПервоначальноеСообщение,
	|	ЕСТЬNULL(СообщенияПользователейБотовПервоначальноеСообщение.Получатель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ПервичныйПолучатель
	|ИЗ
	|	ВТДанныеСообщенийСПользователями КАК ВТДанныеСообщенийСПользователями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеЗаданийБотов.СрезПоследних(, Бот = &Бот) КАК ВыполнениеЗаданийБотовСрезПоследних
	|		ПО ВТДанныеСообщенийСПользователями.Пользователь = ВыполнениеЗаданийБотовСрезПоследних.Пользователь
	|			И ВТДанныеСообщенийСПользователями.ИдентификаторСообщения = ВыполнениеЗаданийБотовСрезПоследних.ИдентификаторСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияПользователейБотов.СрезПоследних(, Бот = &Бот) КАК СообщенияПользователейБотовОтветы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияПользователейБотов.СрезПоследних(, Бот = &Бот) КАК СообщенияПользователейБотовПервоначальноеСообщение
	|				ПО СообщенияПользователейБотовОтветы.ПервоначальноеСообщение = СообщенияПользователейБотовПервоначальноеСообщение.ИдентификаторСообщения
	|		ПО ВТДанныеСообщенийСПользователями.Пользователь = СообщенияПользователейБотовОтветы.Получатель
	|			И ВТДанныеСообщенийСПользователями.НаСообщение <> 0
	|			И ВТДанныеСообщенийСПользователями.НаСообщение = СообщенияПользователейБотовОтветы.ИдентификаторОтвета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияПользователейБотов.СрезПоследних(, Бот = &Бот) КАК СообщенияПользователейБотовСообщения
	|			ПО ВТДанныеСообщенийСПользователями.Пользователь = СообщенияПользователейБотовСообщения.Пользователь
	|			И ВТДанныеСообщенийСПользователями.ИдентификаторСообщения = СообщенияПользователейБотовСообщения.ИдентификаторСообщения
	|ГДЕ
	|	ВТДанныеСообщенийСПользователями.ИдентификаторОтвета = 0
	|	И ВыполнениеЗаданийБотовСрезПоследних.ИдентификаторСообщения ЕСТЬ NULL
	|	И ВЫБОР
	|		КОГДА НЕ СообщенияПользователейБотовОтветы.ИдентификаторОтвета ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.СообщениеПользователю)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СообщенияПользователейБотовСообщения.ИдентификаторОтвета ЕСТЬ NULL
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийПользователяБота.Прочее)
	|				ИНАЧЕ
	|					НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ <> НЕОПРЕДЕЛЕНО";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	
	МассивИдентификаторов = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипСообщения", Перечисления.ТипыСообщенийПользователяБота.ВидеоЧат);
	СтрокиИдентификаторов = ВыгрузкаРезультатаЗапроса.НайтиСтроки(СтруктураОтбора);
	Для Каждого НайденнаяСтрока Из СтрокиИдентификаторов Цикл
		МассивИдентификаторов.Добавить(НайденнаяСтрока.ИдентификаторЧата);
	КонецЦикла;
	
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИдентификаторов);
	
	Если МассивИдентификаторов.Количество() Тогда
		ТаблицаИдентификаторов = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьУчастниковВидеоЧатов(МассивИдентификаторов);
	КонецЕсли;
	
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		Если ВыборкаРезультатаЗапроса.ТипСообщения = Перечисления.ТипыСообщенийПользователяБота.СообщениеПользователю Тогда
			ПереслатьСообщениеДругомуПользователю(БотСсылка, ВыборкаРезультатаЗапроса, ТаблицаОбработанных);
			
		ИначеЕсли ВыборкаРезультатаЗапроса.ТипСообщения = Перечисления.ТипыСообщенийПользователяБота.ВидеоЧат Тогда
			ОповеститьОНачалеОкончанииВидеоЧата(БотСсылка, ВыборкаРезультатаЗапроса, ТаблицаИдентификаторов, ТаблицаОбработанных);
			
		Иначе
			ОтветитьБотомНаСообщениеПользователя(БотСсылка, ВыборкаРезультатаЗапроса, ТаблицаОбработанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтветитьБотомНаСообщениеПользователя(БотСсылка, ВыборкаРезультатаЗапроса, ТаблицаОбработанных)
	
	ТаблицаПараметров = ПолучитьТаблицуПараметровДляОтветаНаСообщение(
		БотСсылка,
		ВыборкаРезультатаЗапроса.Пользователь,
		ВыборкаРезультатаЗапроса.Текст,
		ВыборкаРезультатаЗапроса.ИдентификаторСообщения,
		ВыборкаРезультатаЗапроса.ИдентификаторЧата,
		ВыборкаРезультатаЗапроса.НаименованиеЧата);
	
	РезультатФункции = ИнтеграцияСБотамиСлужебныйСервер.ВыполнитьПользовательскуюФункцию(
		БотСсылка.АлгоритмОтветаНаСоощения, ТаблицаПараметров);
	
	Если РезультатФункции <> Неопределено Тогда
		СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаРезультатаЗапроса.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если СтрокаОбработанных <> Неопределено Тогда
			СтрокаОбработанных.Обработано = Истина;
		КонецЕсли;
		
		ИнтеграцияСБотамиСлужебныйСервер.ДобавитьЗаписьСообщенияПользователейБотов(
			БотСсылка, ВыборкаРезультатаЗапроса.Пользователь,
			ВыборкаРезультатаЗапроса.ИдентификаторСообщения,
			Перечисления.ТипыСообщенийПользователяБота.Прочее,
			ВыборкаРезультатаЗапроса.Текст, РезультатФункции.Идентификатор, РезультатФункции.Чат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОНачалеОкончанииВидеоЧата(БотСсылка, ВыборкаРезультатаЗапроса, ТаблицаИдентификаторов, ТаблицаОбработанных)
	
	ТипСообщенияСсылка = Перечисления.ТипыСообщенийTelegramBot[ВыборкаРезультатаЗапроса.СодержимоеСообщения];
	
	ИнформацияОЧате = ИнтеграцияСTelegramBotСервер.ПолучитьИнформациюОЧате(
		БотСсылка, ВыборкаРезультатаЗапроса.ИдентификаторЧата);
	СсылкаПриглашение = ИнформацияОЧате.Получить("invite_link");
	
	Если ТипСообщенияСсылка = Перечисления.ТипыСообщенийTelegramBot.НачалоВидеоЧата Тогда
		
		ТекстШаблона = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьТекстСообщенияПредопределенногоОтвета(
			БотСсылка, Перечисления.ТипыПредопределенныхОтветовБота.ТекстОповещенияНачалоВидеоЧата);
		
		ТекстСообщения = СтрШаблон(ТекстШаблона, ВыборкаРезультатаЗапроса.НаименованиеЧата, СсылкаПриглашение);
		
	ИначеЕсли ТипСообщенияСсылка = Перечисления.ТипыСообщенийTelegramBot.КонецВидеоЧата Тогда
		
		ТекстШаблона = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьТекстСообщенияПредопределенногоОтвета(
			БотСсылка, Перечисления.ТипыПредопределенныхОтветовБота.ТекстОповещенияКонецВидеоЧата);
		
		ТекстСообщения = СтрШаблон(ТекстШаблона, ВыборкаРезультатаЗапроса.НаименованиеЧата);
		
	КонецЕсли;
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ТипСообщения"			, ТипСообщенияСсылка);
	ДанныеСообщения.Вставить("Содержимое"			, ТекстСообщения);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИдентификаторЧата", ВыборкаРезультатаЗапроса.ИдентификаторЧата);
	НайденныеИдентификаторы = ТаблицаИдентификаторов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаИдентификатора Из НайденныеИдентификаторы Цикл
		РезультатОтправки = ВыполнитьОтправкуСообщения(БотСсылка, ДанныеСообщения, СтрокаИдентификатора.Пользователь);
	КонецЦикла;
	
	Если РезультатОтправки <> Неопределено Тогда
		СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаРезультатаЗапроса.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если СтрокаОбработанных <> Неопределено Тогда
			СтрокаОбработанных.Обработано = Истина;
		КонецЕсли;
		
		ИнтеграцияСБотамиСлужебныйСервер.ДобавитьЗаписьСообщенияПользователейБотов(
			БотСсылка, ВыборкаРезультатаЗапроса.Пользователь,
			ВыборкаРезультатаЗапроса.ИдентификаторСообщения,
			Перечисления.ТипыСообщенийПользователяБота.ВидеоЧат,
			"", РезультатОтправки.Идентификатор, РезультатОтправки.Чат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереслатьСообщениеДругомуПользователю(БотСсылка, ВыборкаРезультатаЗапроса, ТаблицаОбработанных)
	
	ТекстОтвета = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьТекстСообщенияПредопределенногоОтвета(
		БотСсылка, Перечисления.ТипыПредопределенныхОтветовБота.ТекстОтвета);
	ТекстПодсказки = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьТекстСообщенияПредопределенногоОтвета(
		БотСсылка, Перечисления.ТипыПредопределенныхОтветовБота.ТекстПодсказкиОтвета);
	
	Если ВыборкаРезультатаЗапроса.Пользователь = ВыборкаРезультатаЗапроса.ПервичныйПолучатель Тогда
		Если ВыборкаРезультатаЗапроса.СодержимоеСообщения = "ОтправкаСообщения" Тогда
			СодержимоеОтвета = СтрШаблон(ТекстОтвета + "
				|%2
				|
				|%3",
				ВыборкаРезультатаЗапроса.Пользователь.Наименование,
				ВыборкаРезультатаЗапроса.Текст,
				ТекстПодсказки);
				
			ДанныеСообщения = Новый Структура;
			ДанныеСообщения.Вставить("ТипСообщения"			, Перечисления.ТипыСообщенийTelegramBot[ВыборкаРезультатаЗапроса.СодержимоеСообщения]);
			ДанныеСообщения.Вставить("Содержимое"			, СодержимоеОтвета);
			ДанныеСообщения.Вставить("reply_to_message_id"	, ВыборкаРезультатаЗапроса.ИсходноеСообщение);
		Иначе
			СодержимоеОтвета = СтрШаблон(ТекстОтвета + "
			|%2",
			ВыборкаРезультатаЗапроса.Пользователь.Наименование,
			ТекстПодсказки);
			
			ДанныеСообщения = Новый Структура;
			ДанныеСообщения.Вставить("ТипСообщения"			, Перечисления.ТипыСообщенийTelegramBot.ОтправкаСообщения);
			ДанныеСообщения.Вставить("Содержимое"			, СодержимоеОтвета);
			ДанныеСообщения.Вставить("reply_to_message_id"	, ВыборкаРезультатаЗапроса.ИсходноеСообщение);
			
			РезультатОтправки = ВыполнитьОтправкуСообщения(БотСсылка, ДанныеСообщения, ВыборкаРезультатаЗапроса.ИсходныйОтправитель);
			
			ДанныеСообщения = Новый Структура;
			ДанныеСообщения.Вставить("ТипСообщения"			, Перечисления.ТипыСообщенийTelegramBot[ВыборкаРезультатаЗапроса.СодержимоеСообщения]);
			ДанныеСообщения.Вставить("Содержимое"			, ВыборкаРезультатаЗапроса.Текст);
		КонецЕсли;
	Иначе
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("ТипСообщения"			, Перечисления.ТипыСообщенийTelegramBot[ВыборкаРезультатаЗапроса.СодержимоеСообщения]);
		ДанныеСообщения.Вставить("Содержимое"			, ВыборкаРезультатаЗапроса.Текст);
		ДанныеСообщения.Вставить("reply_to_message_id"	, ВыборкаРезультатаЗапроса.ИсходноеСообщение);
	КонецЕсли;
	
	РезультатОтправки = ВыполнитьОтправкуСообщения(БотСсылка, ДанныеСообщения, ВыборкаРезультатаЗапроса.ИсходныйОтправитель);
	
	Если РезультатОтправки <> Неопределено Тогда
		СтрокаОбработанных = ТаблицаОбработанных.Найти(ВыборкаРезультатаЗапроса.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если СтрокаОбработанных <> Неопределено Тогда
			СтрокаОбработанных.Обработано = Истина;
		КонецЕсли;
		
		ИнтеграцияСБотамиСлужебныйСервер.ДобавитьЗаписьСообщенияПользователейБотов(
			БотСсылка, ВыборкаРезультатаЗапроса.Пользователь,
			ВыборкаРезультатаЗапроса.ИдентификаторСообщения,
			Перечисления.ТипыСообщенийПользователяБота.СообщениеПользователю,
			ВыборкаРезультатаЗапроса.Текст, РезультатОтправки.Идентификатор, РезультатОтправки.Чат,
			ВыборкаРезультатаЗапроса.ПервоначальноеСообщение, ВыборкаРезультатаЗапроса.ИсходныйОтправитель);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ВыполнениеОтветаНаСообщенияБота

#Область ТаблицыПараметровКонтекста

// Получить таблицу параметров для выполнения шага задания.
// 
// Параметры:
//  Задание - СправочникСсылка.ЗаданияБотов - Задание
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  ВложенностьКнопокМеню - СправочникСсылка.ВложенностьКнопокМеню - Вложенность кнопок меню
//  ОтветПользователя - Строка - Ответ пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций
Функция ПолучитьТаблицуПараметровДляВыполненияШагаЗадания(Задание, Пользователь, ВложенностьКнопокМеню,
	ОтветПользователя)

	ТаблицаПараметров = ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций();

	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ЗаданиеБота";
	НовыйПараметр.Значение = Задание;

	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Получатель";
	НовыйПараметр.Значение = Пользователь;

	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Вложенность";
	НовыйПараметр.Значение = ВложенностьКнопокМеню;

	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ОтветПользователя";
	НовыйПараметр.Значение = ОтветПользователя;

	Возврат ТаблицаПараметров;

КонецФункции

// Получить таблицу параметров для выполнения шага задания.
// 
// Параметры:
//  Бот - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  ВложенностьКнопокМеню - СправочникСсылка.ВложенностьКнопокМеню - Вложенность кнопок меню
//  Задание - СправочникСсылка.ЗаданияБотов - Задание
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций
Функция ПолучитьТаблицуПараметровДляВыполненияКоманд(Бот, Пользователь,
	ВложенностьКнопокМеню, Задание, ИдентификаторЧата = 0, НаименованиеЧата = "")

	ТаблицаПараметров = ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций();

	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Бот";
	НовыйПараметр.Значение = Бот;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Получатель";
	НовыйПараметр.Значение = Пользователь;

	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Вложенность";
	НовыйПараметр.Значение = ВложенностьКнопокМеню;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ЗаданиеБота";
	НовыйПараметр.Значение = Задание;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ИдентификаторЧата";
	НовыйПараметр.Значение = ИдентификаторЧата;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_НаименованиеЧата";
	НовыйПараметр.Значение = НаименованиеЧата;

	Возврат ТаблицаПараметров;

КонецФункции

// Получить таблицу параметров для ответа на сообщение.
// 
// Параметры:
//  БотСсылка - СправочникСсылка.Боты - Бот
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  ТекстСообщения - Строка - Текст сообщения
//  НаСообщение - Число - Идентификатор сообщения на которое необходимо ответить
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций
Функция ПолучитьТаблицуПараметровДляОтветаНаСообщение(БотСсылка, Пользователь,
	ТекстСообщения, НаСообщение = Неопределено, ИдентификаторЧата = 0, НаименованиеЧата = "")

	ТаблицаПараметров = ИнтеграцияСБотамиСлужебныйСервер.ИнициализироватьТаблицуПараметровФункций();
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Бот";
	НовыйПараметр.Значение = БотСсылка;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_Получатель";
	НовыйПараметр.Значение = Пользователь;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ТекстСообщения";
	НовыйПараметр.Значение = ТекстСообщения;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_НаСообщение";
	НовыйПараметр.Значение = НаСообщение;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_ИдентификаторЧата";
	НовыйПараметр.Значение = ИдентификаторЧата;
	
	НовыйПараметр = ТаблицаПараметров.Добавить();
	НовыйПараметр.Параметр = "Параметр_НаименованиеЧата";
	НовыйПараметр.Значение = НаименованиеЧата;

	Возврат ТаблицаПараметров;

КонецФункции

#КонецОбласти // ТаблицыПараметровКонтекста

#КонецОбласти // СлужебныеПроцедурыИФункции