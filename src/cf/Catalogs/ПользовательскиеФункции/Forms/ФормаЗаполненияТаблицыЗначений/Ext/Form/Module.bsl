
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КолонкиТаблицы.Очистить();
	СтрокиТаблицы.Очистить();
	
	Если Параметры.Свойство("ЗначенияТаблицы") Тогда
		ВыгруженнаяТаблица = ПолучитьИзВременногоХранилища(Параметры.ЗначенияТаблицы);
		Для Каждого КолонкаТаблицы Из ВыгруженнаяТаблица.Колонки Цикл
			НоваяКолонка = КолонкиТаблицы.Добавить();
			НоваяКолонка.ИмяКолонки = КолонкаТаблицы.Имя;
			НоваяКолонка.ТипКолонки = КолонкаТаблицы.ТипЗначения;
			
			ДобавитьКолонку(КолонкаТаблицы.Имя, КолонкаТаблицы.ТипЗначения);
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ВыгруженнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(СтрокиТаблицы.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	Иначе
		СоздатьСлужебнуюКолонку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаСервере
Процедура КолонкиТаблицыПриИзмененииНаСервере(ИмяКолонки, ТипКолонки)
	
	Если Не ПустаяСтрока(ИмяКолонки)
		И ТипКолонки <> Новый ОписаниеТипов Тогда
		УдалитьСлужебнуюКолонку();
		фЗаполнениеСНуля = Ложь;
		
		ДобавитьКолонку(ИмяКолонки, ТипКолонки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиТаблицыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТаблицыПриИзмененииНаСервере(ТекущиеДанные.ИмяКолонки, ТекущиеДанные.ТипКолонки);
	
КонецПроцедуры

&НаСервере
Процедура КолонкиТаблицыПередУдалениемНаСервере(ИмяКолонки, ТипКолонки)
	
	Если Не ПустаяСтрока(ИмяКолонки)
		И ТипКолонки <> Новый ОписаниеТипов Тогда
		Элементы.Удалить(Элементы.Найти(ИмяКолонки));
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("СтрокиТаблицы." + ИмяКолонки);
		ИзменитьРеквизиты( , МассивРеквизитов);
		
		Если СтрокиТаблицы.Выгрузить().Колонки.Количество() = 0 Тогда
			СоздатьСлужебнуюКолонку();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиТаблицыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТаблицыПередУдалениемНаСервере(ТекущиеДанные.ИмяКолонки, ТекущиеДанные.ТипКолонки);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВернутьПараметрыИЗакрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьКолонку(ИмяКолонки, ТипКолонки)
	
	СтрокиТаблицыТЗ = ЭтотОбъект.СтрокиТаблицы.Выгрузить();
	Если СтрокиТаблицыТЗ.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитНовойКолонки = Новый РеквизитФормы(ИмяКолонки,
		ТипКолонки, "СтрокиТаблицы", ИмяКолонки);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(РеквизитНовойКолонки);
	ИзменитьРеквизиты(МассивРеквизитов);
	
	НовыйЭлемент = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Элементы.Найти("СтрокиТаблицы"));
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "СтрокиТаблицы." + ИмяКолонки;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСлужебнуюКолонку()
	
	фЗаполнениеСНуля = Истина;
	
	РеквизитНовойКолонки = Новый РеквизитФормы("_Служебная",
		ОбщегоНазначения.ОписаниеТипаСтрока(1), "СтрокиТаблицы", "Здесь будут созданные колонки таблицы");
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(РеквизитНовойКолонки);
	ИзменитьРеквизиты(МассивРеквизитов);
	
	НовыйЭлемент = Элементы.Добавить("_Служебная", Тип("ПолеФормы"), Элементы.Найти("СтрокиТаблицы"));
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "СтрокиТаблицы." + "_Служебная";
	
	Элементы.СтрокиТаблицы.ИзменятьСоставСтрок = Ложь;
	Элементы.СтрокиТаблицы.ИзменятьПорядокСтрок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСлужебнуюКолонку()
	
	Если фЗаполнениеСНуля Тогда
		Элементы.Удалить(Элементы.Найти("_Служебная"));
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("СтрокиТаблицы._Служебная");
		ИзменитьРеквизиты( , МассивРеквизитов);
		
		Элементы.СтрокиТаблицы.ИзменятьСоставСтрок = Истина;
		Элементы.СтрокиТаблицы.ИзменятьПорядокСтрок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПараметрыИЗакрыть(ПараметрыФормы = Ложь)
	
	СоответствиеПараметров = ПолучитьАдресХранилищаТаблицыЗначений();
	
	Закрыть(СоответствиеПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилищаТаблицыЗначений()
	
	Возврат ПоместитьВоВременноеХранилище(СтрокиТаблицы.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти