
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("НастройкаИнтеграции"	, Отбор.НастройкаИнтеграции.Значение);
	СтруктураОтборов.Вставить("ТипИдентификации"	, Отбор.ТипИдентификации.Значение);
	СтруктураОтборов.Вставить("ЗначениеСистемы"		, Отбор.ЗначениеСистемы.Значение);
	
	ИмяИсточника = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(
		Новый Структура("Пользователь, Отборы", ИмяПользователя(), СтруктураОтборов));
	
	Если ЭтотОбъект.Количество() = 0 Тогда
		
		ОбщегоНазначения.СкопироватьВБуферОбмена(ПолучитьНачальныеДанные(СтруктураОтборов), ИмяИсточника);
		
	Иначе
		
		БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
		Если БуферОбмена.Источник = ИмяИсточника Тогда
			НачальныеДанные = БуферОбмена.Данные;
		Иначе
			НачальныеДанные = Неопределено;
		КонецЕсли;
		
		Если НачальныеДанные <> Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗаписиДоИзменения"	, НачальныеДанные);
			Запрос.УстановитьПараметр("ЗаписиПослеИзменения", Выгрузить());
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗаписиДоИзменения.НастройкаИнтеграции КАК НастройкаИнтеграции,
			|	ЗаписиДоИзменения.ТипИдентификации КАК ТипИдентификации,
			|	ЗаписиДоИзменения.ЗначениеСистемы КАК ЗначениеСистемы
			|ПОМЕСТИТЬ ВТЗаписиДоИзменения
			|ИЗ
			|	&ЗаписиДоИзменения КАК ЗаписиДоИзменения
			|ГДЕ
			|	НЕ ЗаписиДоИзменения.Зарегистрирован
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаписиПослеИзменения.НастройкаИнтеграции КАК НастройкаИнтеграции,
			|	ЗаписиПослеИзменения.ТипИдентификации КАК ТипИдентификации,
			|	ЗаписиПослеИзменения.ЗначениеСистемы КАК ЗначениеСистемы,
			|	ЗаписиПослеИзменения.Пользователь КАК Пользователь
			|ПОМЕСТИТЬ ВТЗаписиПослеИзменения
			|ИЗ
			|	&ЗаписиПослеИзменения КАК ЗаписиПослеИзменения
			|ГДЕ
			|	ЗаписиПослеИзменения.Зарегистрирован
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Боты.Ссылка КАК Бот,
			|	ВТЗаписиПослеИзменения.НастройкаИнтеграции КАК НастройкаИнтеграции,
			|	ВТЗаписиПослеИзменения.ЗначениеСистемы КАК Получатель,
			|	ВТЗаписиПослеИзменения.Пользователь.Наименование КАК ИмяПользователя
			|ИЗ
			|	ВТЗаписиПослеИзменения КАК ВТЗаписиПослеИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиДоИзменения КАК ВТЗаписиДоИзменения
			|		ПО (ВТЗаписиПослеИзменения.НастройкаИнтеграции = ВТЗаписиДоИзменения.НастройкаИнтеграции
			|			И ВТЗаписиПослеИзменения.ТипИдентификации = ВТЗаписиДоИзменения.ТипИдентификации
			|			И ВТЗаписиПослеИзменения.ЗначениеСистемы = ВТЗаписиДоИзменения.ЗначениеСистемы)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Боты КАК Боты
			|		ПО ВТЗаписиПослеИзменения.НастройкаИнтеграции = Боты.НастройкаИнтеграции";
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
			
			ПодтвердившийПользователь = Пользователи.АвторизованныйПользователь();
			МассивПодтверждающих = ОбщегоНазначенияУПОСервер.ПолучитьПредопределенноеЗначение(
				"ОтветственныеПодтверждающиеРегистрациюПользователейБота");
			ИндексПодтвердившего = МассивПодтверждающих.Найти(ПодтвердившийПользователь);
			Если ИндексПодтвердившего <> Неопределено Тогда
				МассивПодтверждающих.Удалить(ИндексПодтвердившего);
			КонецЕсли;
			
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				
				РегистрыСведений.СоответствияПользователейСистем.ОповеститьПользователяОбОкончанииРегистрации(
					ВыборкаРезультатаЗапроса.Бот, ВыборкаРезультатаЗапроса.НастройкаИнтеграции, ВыборкаРезультатаЗапроса.Получатель);
				
				ДанныеСообщения = Новый Структура;
				ДанныеСообщения.Вставить("ТипСообщения"	, Перечисления.ТипыСообщенийTelegramBot.ОтправкаСообщения);
				ШаблонСообщения = ИнтеграцияСБотамиСлужебныйСервер.ПолучитьТекстСообщенияПредопределенногоОтвета(
					ВыборкаРезультатаЗапроса.Бот, Перечисления.ТипыПредопределенныхОтветовБота.ОповещениеОтветственныхОбОкончании);
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
					ВыборкаРезультатаЗапроса.ИмяПользователя,
					ПодтвердившийПользователь);
				ДанныеСообщения.Вставить("Содержимое", ТекстСообщения);
				
				Для Каждого ЭлементПолучатель Из МассивПодтверждающих Цикл
					Результат = ИнтеграцияСБотамиСервер.ВыполнитьОтправкуСообщения(ВыборкаРезультатаЗапроса.Бот, ДанныеСообщения, ЭлементПолучатель);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// очистим буфер обмена
		ОбщегоНазначения.СкопироватьВБуферОбмена(Неопределено, ИмяИсточника);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНачальныеДанные(СтруктураОтборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияПользователейСистем.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	СоответствияПользователейСистем.ТипИдентификации КАК ТипИдентификации,
	|	СоответствияПользователейСистем.ЗначениеСистемы КАК ЗначениеСистемы,
	|	СоответствияПользователейСистем.Пользователь КАК Пользователь,
	|	СоответствияПользователейСистем.Зарегистрирован КАК Зарегистрирован
	|ИЗ
	|	РегистрСведений.СоответствияПользователейСистем КАК СоответствияПользователейСистем
	|ГДЕ
	|	СоответствияПользователейСистем.НастройкаИнтеграции = &НастройкаИнтеграции
	|	И СоответствияПользователейСистем.ТипИдентификации = &ТипИдентификации
	|	И СоответствияПользователейСистем.ЗначениеСистемы = &ЗначениеСистемы";
	
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'; en = 'Invalid object call on client.'");
#КонецЕсли