// @strict-types
////////////////////////////////////////////////////////////////////////////////
// Общего назначения (сервер): для серверных функций общего назначения

#Область ПрограммныйИнтерфейс

// Возвращает имя информационной базы.
// 
// Возвращаемое значение:
//   - Строка - Имя информационной базы.
//
Функция ПолучитьИмяИнформационнойБазы() Экспорт
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	
	НомерСимвола = СтрНайти(СтрокаПодключения, "File=");
	Если НомерСимвола > 0 Тогда
		
		// Это Файловая база.
		СтрокаСправа = Сред(СтрокаПодключения, НомерСимвола + 6);
		
		Возврат Сред(СтрокаСправа, 1, СтрДлина(СтрокаСправа) - 2);
	КонецЕсли;
	
	НомерСимвола = СтрНайти(СтрокаПодключения, "Ref=");
	Если НомерСимвола > 0 Тогда
		
		// Это серверная база.
		СтрокаСправа = Сред(СтрокаПодключения, НомерСимвола + 5);
		
		Возврат Сред(СтрокаСправа, 1, СтрДлина(СтрокаСправа) - 2);
	КонецЕсли;
	
	Возврат "";
	
Конецфункции

// Возвращает значение предопределенного элемента ПВХ по имени.
//
// Параметры:
//  Имя - Строка - Имя переменной ПВХ.
//  ИспользоватьКэш - Булево - Признак получения данных из кэша.
// 
// Возвращаемое значение:
//  - ПроизвольныйТип - Значение переменной ПВХ.
//  - Массив - Массив значений переменной ПВХ.
// 
Функция ПолучитьПредопределенноеЗначение(Имя, ИспользоватьКэш = Ложь) Экспорт
	
	Если ИспользоватьКэш Тогда
		Возврат ОбщегоНазначенияУПОПовтИсп.ПолучитьПредопределенноеЗначение(Имя);
	Иначе
		Возврат ПланыВидовХарактеристик.ПредопределенныеЗначения.ПолучитьЗначение(Имя);
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу соответствий по отбору.
// 
// Параметры:
//  ТипСоответствия - ПеречислениеСсылка.ТипСоответствияОбъектовИБ - Тип соответствия.
//  Объект1 - ПроизвольныйТип - Объект1.
//  Объект2 - ПроизвольныйТип - Объект2.
//  Объект3 - ПроизвольныйТип - Объект3.
//  ИспользоватьКэш - Булево - Признак получения данных из кэша.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -- Таблица соответствий по отбору.
//
Функция ПолучитьСоответствиеОбъектовИБ(ТипСоответствия, Объект1 = Неопределено, Объект2 = Неопределено, Объект3 = Неопределено, ИспользоватьКэш = Ложь) Экспорт
	
	Если ИспользоватьКэш Тогда
		Возврат ОбщегоНазначенияУПОПовтИсп.ПолучитьСоответствиеОбъектовИБ(ТипСоответствия, Объект1, Объект2, Объект3);
	Иначе
		Возврат РегистрыСведений.СоответствияОбъектовИБ.ПолучитьСоответствиеОбъектовИБ(ТипСоответствия, Объект1, Объект2, Объект3);
	КонецЕсли;

	
КонецФункции

// Возвращает таблицу значений с датами за период
//
// Параметры:
//  НачалоПериода	 - Дата - Начало периода.
//  ОкончаниеПериода - Дата - Конец периода.
//  Интервал		 - Строка - одно из следующих значений:
//             (Секунда, Минута, Час, День, Неделя, Месяц, Квартал, Полугодие, Год)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений с датами за период. Содержит одну колонку "Период".
//
Функция ПолучитьТаблицуДатЗаПериод(НачалоПериода, ОкончаниеПериода, Интервал = "День") Экспорт
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) КАК Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Период ПЕРИОДАМИ(%Интервал%, &НачалоПериода, &ОкончаниеПериода)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Интервал%", Интервал);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИнтервалов.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

//Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "") Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения		= ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= ПравоеЗначение;
	ЭлементОтбора.Представление		= Представление;
	
КонецПроцедуры

//Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
		
	КонецЕсли;
	
КонецПроцедуры

//Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает полный текст ошибки возникающей при исключении
//
// Параметры:
//	ЗаголовокОшибки - Строка - описание действия повлекшего ошибку
//	ТекстИсключения - Строка - подробное представление ошибки
//	ДополнительныеСообщения - Массив - массив дополнительных сообщений
Функция ПолучениеПолногоТекстаОшибкиПриИсключении(ЗаголовокОшибки, ТекстИсключения, ДополнительныеСообщения) Экспорт

	ТекстОшибки = ЗаголовокОшибки;
	Для Каждого Сообщение Из ДополнительныеСообщения Цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Сообщение.Текст;
	КонецЦикла;
	ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстИсключения;
	
	Возврат ТекстОшибки;

КонецФункции

// Удалить экземпляр регламентного задания.
// 
// Параметры:
//  КлючЗадания - Строка - Ключ регламентного задания
Процедура УдалитьЭкземплярРегламентногоЗадания(КлючЗадания) Экспорт
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Ключ", КлючЗадания);
	МассивРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	
	Если МассивРегламентныхЗаданий.Количество() Тогда
		РегламентноеЗадание = МассивРегламентныхЗаданий[0];
		РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗадание.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Заполнить дерево значений из иерархического макета.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//  ЗаполняемоеДерево - ДеревоЗначений - Заполняемое дерево
//  КоличествоПунктовВОтступе - Число - Количество пунктов в отступе
Процедура ЗаполнитьДеревоЗначенийИзИерархическогоМакета(ТабличныйДокумент, ЗаполняемоеДерево, КоличествоПунктовВОтступе) Экспорт
	
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	КоличествоКолонок = ТабличныйДокумент.ШиринаТаблицы;
	ПрошлыйОтступ = 0;
	// На первой строке шапка, начинаем со второй
	ИнкрементСтрок = 2;

	ПостроитьДеревоЗначенийИзМакетаРекурсивно(ТабличныйДокумент, ЗаполняемоеДерево.Строки,
		КоличествоПунктовВОтступе, КоличествоСтрок, ИнкрементСтрок, ПрошлыйОтступ, КоличествоКолонок);
	
КонецПроцедуры

// Проверяет наличие дублей значений табличной части документа.
// Если значение какого-то из реквизтов, влияющего на проведение продублировано,
// то выставляется флаг отказа в проведении.
// 
// Параметры:
//  ДокументОбъект              - Объект проводимого документа или ссылка. 
//  ИмяТабличнойЧасти           - Табличная часть документа, для проверки дублирования строк.
//  СтруктураОбязательныхПолей  - Структура, содержащая имена полей, которые надо проверить.
//  Отказ                       - Флаг отказа в проведении.
//  Заголовок                   - Строка, заголовок сообщения об ошибке проведения.
//                                по умолчанию пустая строка.
// 
//  ПредставлениеТабличнойЧасти - Строка, название табличной части для вывода пользователю,
// 								  по умолчанию пустая строка.
//
Процедура ПроверитьДублированиеЗначенийВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей,
	Отказ, Заголовок = "", ПредставлениеТабличнойЧасти = "") Экспорт
	
	ПредставлениеТабЧасти = ?(ПредставлениеТабличнойЧасти = "",
		ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление(),
		ПредставлениеТабличнойЧасти);
	
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	СписокТаблиц = Новый Структура;
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Значение");
	ТаблицаСтрок.Колонки.Добавить("НомераСтрок");
	
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		ТаблицаСтрок.Очистить();
		
		ТекущийКлюч = КлючЗначение.Ключ;
		
		МассивТекЗначений = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			Значение = СтрокаТаблицы[ТекущийКлюч];
			
			НайденноеЗначение = МассивТекЗначений.Найти(Значение);
			Если НайденноеЗначение = Неопределено Тогда
				МассивТекЗначений.Добавить(Значение);
			Иначе
				НоваяСтрока = ТаблицаСтрок.Добавить();
				НоваяСтрока.Значение = Значение;
				НоваяСтрока.НомераСтрок = СтрокаТаблицы.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСтрок.Количество() > 0 Тогда
			СписокТаблиц.Вставить(ТекущийКлюч, ТаблицаСтрок);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЗначение ИЗ СписокТаблиц Цикл
		
		ТаблицаСДанными = КлючЗначение.Значение;
		ТаблицаДляВывода = ПроставитьНомераСтрокДляЗначений(ТаблицаСДанными);
		
		ТекстНомерамиСтрок = "";
		Для Каждого ТекСтрока Из ТаблицаДляВывода Цикл
			ТекстНомерамиСтрок = ТекстНомерамиСтрок + Символы.ПС + "     """ + ТекСтрока.Значение + """ - " + ТекСтрока.НомераСтрок;
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='В табличной части ""%1"" дублируются значения колонки ""%2"" в строках: %3';
			|en='Tabular part ""%1"" duplicates values of column ""%2"" in lines: %3'"),
			ПредставлениеТабЧасти, МетаданныеРеквизиты[КлючЗначение.Ключ].Представление(), ТекстНомерамиСтрок),,,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьДублированиеЗначенийВТабличнойЧасти()

#Область ОтладкаВременныхТаблиц

// Функция возвращает все поля указанной временной таблицы из менеджера временных таблиц.
// Используется для просмотра временных таблиц в отладчике.
//
// Параметры:
//  ЗапросМенеджер - Запрос, МенеджерВременныхТаблиц - запрос (для вычленения текста запроса) или менеджер.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы
// 
// Возвращаемое значение:
//  - ТаблицаЗначений - Результат временной таблицы запроса.
//
// Пример вызова функции:
//    ЗапасыСервер.ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц, "ТаблицаТоваров")
//
Функция ПоказатьВременнуюТаблицу(ЗапросМенеджер, ИмяВременнойТаблицы) Экспорт
	
	ЗакрытьМенеджерВременныхТаблиц = Ложь;
	
	Если ТипЗнч(ЗапросМенеджер) = Тип("Запрос") Тогда
		Если ЗапросМенеджер.МенеджерВременныхТаблиц = Неопределено Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗакрытьМенеджерВременныхТаблиц = Истина;
			ЗапросМенеджер.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Иначе
			МенеджерВременныхТаблиц = ЗапросМенеджер.МенеджерВременныхТаблиц;
		КонецЕсли;
		
		ЗапросМенеджер.Выполнить();
	Иначе
		МенеджерВременныхТаблиц = ЗапросМенеджер;
	КонецЕсли;
	
	ДанныеТаблицы = ЗапросВыполнитьВыгрузить("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы,, МенеджерВременныхТаблиц);
	
	Если ЗакрытьМенеджерВременныхТаблиц Тогда
		МенеджерВременныхТаблиц.Закрыть();
		ЗапросМенеджер.МенеджерВременныхТаблиц = Неопределено;
	КонецЕсли;
	
	Возврат ДанныеТаблицы;
	
КонецФункции

// Функция возвращает результат запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - текст исполняемого запроса.
//  ПараметрыЗапроса - Соответствие - Соответствие параметров запроса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц запроса.
// 
// Возвращаемое значение:
//  - ТаблицаЗначений - Результат выполнения запроса.
//
Функция ЗапросВыполнитьВыгрузить(ТекстЗапроса, ПараметрыЗапроса = Неопределено,
	МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует список полей временных таблиц.
//
// Параметры:
//  ЗапросМенеджер - Запрос, МенеджерВременныхТаблиц - запрос (для вычленения текста запроса) или менеджер 
//		временных таблиц (имена временных таблиц в этом случае надо передавать явно).
//  ИменаВременныхТаблиц	- Строка - строка с именами интересующих временных таблиц (обязательный параметр при передаче 
//		менеджера ВТ вместо запроса в первом параметре).
// 
// Возвращаемое значение:
//  Массив - Поля временных таблицы, находящиеся в менеджере или запросе.
//
// Пример вызова функции:
//      ПросмотрВременныхТаблиц(Запрос, "")
//
Функция ПоляВременныхТаблиц(ЗапросМенеджер, ИменаВременныхТаблиц = "") Экспорт
	
	// Предварительная обработка параметров:
	Если ТипЗнч(ЗапросМенеджер) = Тип("МенеджерВременныхТаблиц") Тогда
		Если ИменаВременныхТаблиц = "" Тогда
			Возврат "Укажите имена временных таблиц через запятую";
		Иначе
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ЗапросМенеджер;
		КонецЕсли;
	Иначе
		Запрос = ЗапросМенеджер;
	КонецЕсли;
	
	ТекстЗапроса = ВРег(Запрос.Текст);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.Таб, " ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.ВТаб, " ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.НПП, " ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ")", ") ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(", " (");
	
	ОчищенныйТекстЗапроса = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		
		ОчереднаяСтрока = СтрПолучитьСтроку(ТекстЗапроса, НомерСтроки);
		ПозицияКомментария = СтрНайти(ОчереднаяСтрока, "//");
		
		Если ПозицияКомментария > 0 Тогда
			ОчереднаяСтрока = Лев(ОчереднаяСтрока,ПозицияКомментария-1);
		КонецЕсли;
		
		ОчищенныйТекстЗапроса = ОчищенныйТекстЗапроса + " " + ОчереднаяСтрока;
	КонецЦикла;
	
	ТекстЗапроса = ОчищенныйТекстЗапроса;
	
	// Парсинг текста запроса и получение из него имен временных таблиц	
	ВременныеТаблицыЗапроса = новый Массив;
	
	Если НЕ ИменаВременныхТаблиц = "" Тогда
		
		СписокДополнительныхИмен = СтрЗаменить(ИменаВременныхТаблиц, ",", Символы.ПС);
		Для Счетчик = 1 По СтрЧислоСтрок(СписокДополнительныхИмен) Цикл
			ТекСтрока = СтрПолучитьСтроку(СписокДополнительныхИмен, Счетчик);
			ВременныеТаблицыЗапроса.Добавить(ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	ВременнаяТаблица = НайтиИменаТаблицПоРасположениюСлов(ТекстЗапроса, "ПОМЕСТИТЬ");
	Для Каждого КлючЗначение Из ВременнаяТаблица Цикл
		ВременныеТаблицыЗапроса.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ВременнаяТаблица = НайтиИменаТаблицПоРасположениюСлов(ТекстЗапроса, "ИЗ", "КАК");
	Для Каждого КлючЗначение Из ВременнаяТаблица Цикл
		ВременныеТаблицыЗапроса.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ВременнаяТаблица = НайтиИменаТаблицПоРасположениюСлов(ТекстЗапроса, "СОЕДИНЕНИЕ", "КАК");
	Для Каждого КлючЗначение Из ВременнаяТаблица Цикл
		ВременныеТаблицыЗапроса.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	УничтожаемыеВременныеТаблицы = НайтиИменаТаблицПоРасположениюСлов(ТекстЗапроса, "УНИЧТОЖИТЬ");
	Для Каждого КлючЗначение Из УничтожаемыеВременныеТаблицы Цикл
		ВременныеТаблицыЗапроса.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Ответ = Новый Структура;
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено тогда
		
		// На случай, если ВТ удаляются в тексте запроса, сложнейший алгоритм предварительно скопирует их
		Смещение = 0;
		Если УничтожаемыеВременныеТаблицы.Количество() Тогда
			Для Каждого КлючИЗначение Из УничтожаемыеВременныеТаблицы Цикл
				
				ПозицияУничтожения = КлючИЗначение.Значение + Смещение;
				ИмяВТ = КлючИЗначение.Ключ ;
				НовыйПодзапросКопирования   = "ВЫБРАТЬ * ПОМЕСТИТЬ КОПИЯ" + ИмяВТ + " ИЗ "+ ИмяВТ + ";";
				
				ТекстЗапроса = Лев(ТекстЗапроса, ПозицияУничтожения - 1) + НовыйПодзапросКопирования + Прав(
					ТекстЗапроса, СтрДлина(ТекстЗапроса) - (ПозицияУничтожения - 1));
					
				Смещение = Смещение + НовыйПодзапросКопирования;
			КонецЦикла;
		КонецЕсли;
		
		// Выполняем запрос для создания интересующих нас таблиц
		ЗапросТМП = Новый Запрос;
		ЗапросТМП.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Для Каждого Параметр Из Запрос.Параметры Цикл
			ЗапросТМП.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
		ЗапросТМП.Текст = ТекстЗапроса;
		ЗапросТМП.Выполнить();
		
		ЗаполнитьТаблицыПоСпискуИмен(Ответ, ВременныеТаблицыЗапроса, ЗапросТМП.МенеджерВременныхТаблиц);
		
		ЗапросТМП.МенеджерВременныхТаблиц.Закрыть();
		
	Иначе
		
		// Это надо запускать после выполнения запроса, чтобы временные таблицы уже были созданы	
		ОтсутствующиеИменаТаблиц = ЗаполнитьТаблицыПоСпискуИмен(
			Ответ, ВременныеТаблицыЗапроса, Запрос.МенеджерВременныхТаблиц);
		
		Для Каждого ИмяТаблицы Из ОтсутствующиеИменаТаблиц Цикл
			
			Если УничтожаемыеВременныеТаблицы.Получить(ИмяТаблицы) = Неопределено Тогда
				СообщениеОбОшибке = "Таблица еще не создана либо имя задано не верно";
			Иначе
				СообщениеОбОшибке = "Таблица уничтожается при выполнении пакета";
			КонецЕсли;
			
			Ответ.Вставить(ИмяТаблицы, СообщениеОбОшибке);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти // ОтладкаВременныхТаблиц

// Возвращает соответствие предопределенных элементов ПВХ по имени.
//
// Параметры:
//  Имя - Строка - Имена переменных ПВХ, перечисленные через запятую.
//  ВРазрезеКлючей - Булево - Признак получения данных в виде соответствия, где Ключ - Имя переменной.
//  ИспользоватьКэш - Булево - Признак получения данных из кэша.
// 
// Возвращаемое значение:
//  - Соответствие - Соответствие имен и значений переменных ПВХ.
//  - Массив - Массив значений переменных ПВХ.
//
Функция ПолучитьПредопределенныеЗначения(Имена, ВРазрезеКлючей = Ложь, ИспользоватьКэш = Ложь) Экспорт
	
	Если ИспользоватьКэш Тогда
		Возврат ОбщегоНазначенияУПОПовтИсп.ПолучитьПредопределенныеЗначения(Имена, ВРазрезеКлючей);
	Иначе
		Возврат ПланыВидовХарактеристик.ПредопределенныеЗначения.ПолучитьЗначения(Имена, ВРазрезеКлючей);
	КонецЕсли;
	
КонецФункции

// Выполняет запись элемента справочника.
// 
// Параметры:
//  ТекущийОбъект  - СправочникОбъект - Записываемый объект.
//  Заголовок      - Строка (По умолчанию = "").
//  РежимСообщений - Строка: "Нет","Все","Ошибки" (По умолчанию = "Все").
//  РежимЗагрузки  - Булево (По умолчанию = Ложь).
// 
// Возвращаемое значение:
//   Булево - Справочник записан.
// 
Функция ЗаписатьСправочник(ТекущийОбъект, Заголовок = "", РежимСообщений = "Все", РежимЗагрузки = Ложь) Экспорт
	
	СправочникЗаписан = Ложь;
	
	РежимыВывода = ОпределитьРежимыВывода(РежимСообщений);
	
	Попытка
		
		Если РежимЗагрузки Тогда
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			СправочникЗаписан = Истина;
		Иначе
			СправочникЗаписан = ТекущийОбъект.ПроверитьЗаполнение();
		КонецЕсли;
		
		Если СправочникЗаписан Тогда
			
			ТекущийОбъект.Записать();
			Если РежимыВывода.ВыводитьИнформацию Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Записан справочник ""%1"".';en='Directory ""%1"" saved.'"), ТекущийОбъект.Ссылка));
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		СправочникЗаписан = Ложь;
		
		Если РежимыВывода.ВыводитьОшибки Тогда
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("УПО.ОшибкаЗаписиСправочника", УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат СправочникЗаписан;
	
КонецФункции // ЗаписатьСправочник()

// Преобразует текст формата XML в таблицу значений,
// при этом колонки таблицы формируются на основе описания в XML.
// 
// Параметры:
//  ТекстXML - Текст в формате XML.
//      Схема XML:
// 			<?xml version="1.0" encoding="utf-8"?>
// 			<xs:schema attributeFormDefault="unqualified" 
// 						elementFormDefault="qualified" xmlns:xs="http:// www.w3.org/2001/XMLSchema">
//			  <xs:element name="Items">
//			 	<xs:complexType>
// 				  <xs:sequence>
// 					<xs:element maxOccurs="unbounded" name="Item">
// 					  <xs:complexType>
// 						<xs:attribute name="Code" type="xs:integer" use="required" />
// 						<xs:attribute name="Name" type="xs:string" use="required" />
// 						<xs:attribute name="Socr" type="xs:string" use="required" />
// 						<xs:attribute name="Index" type="xs:string" use="required" />
// 					  </xs:complexType>
// 					</xs:element>
// 				  </xs:sequence>
// 				  <xs:attribute name="Description" type="xs:string" use="required" />
// 				  <xs:attribute name="Columns" type="xs:string" use="required" />
// 				</xs:complexType>
// 			 </xs:element>
//			 </xs:schema> 
//      Примеры XML-файлов см. в демонстрационной конфигурации.
// 
// Пример использования:
//   КлассификаторТаблица = ПрочитатьXMLВТаблицу(РегистрыСведений.АдресныйКлассификатор.
//       ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст());
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
Функция ПрочитатьXMLВТаблицу(ТекстXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	// Прочитаем первый узел и проверим его.
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение("Пустой XML");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение(НСтр("ru='Ошибка в структуре XML';en='Ошибка в структуре XML'"));
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее.
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице.
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение(НСтр("ru='Ошибка в структуре XML';en='Ошибка в структуре XML'"));
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			НоваяСтрока[Сч - 1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
	КонецЦикла;
	
	Результат = Новый Структура("ИмяТаблицы, Данные", ИмяТаблицы, ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции // ПрочитатьXMLВТаблицу()

// Определяет режимы вывода сообщений.
// 
// Параметры:
//  РежимСообщений - Строка - "Нет", "Все", "Ошибки".
// 
// Возвращаемое значение:
//  Структура - Структура режима вывода сообщений.
//
Функция ОпределитьРежимыВывода(РежимСообщений) Экспорт
	
	РежимыВывода = Новый Структура("ВыводитьОшибки, ВыводитьИнформацию",
		ВРег(РежимСообщений) = ВРег("Все") Или ВРег(РежимСообщений) = ВРег("Ошибки"),
		ВРег(РежимСообщений) = ВРег("Все"));
	
	Возврат РежимыВывода;
	
КонецФункции // ОпределитьРежимВывода()

// Функция выполняет алгоритм переданной функции.
// 
// Параметры:
//  ФункцияСсылка - СправочникСсылка.бит_ПользовательскиеФункции.
// 
// 	П1 - Произвольный, по умолчанию Неопределено.
//  ...
//  ...
//  П10 - Произвольный, по умолчанию Неопределено.
// 
// Возвращаемое значение:
//  Результат - Произвольный, результат выполнения функции.
//
// АПК:134-выкл 10 необязательных параметра для совместимости с предыдущими версиями библиотеки.
Функция ВыполнитьПользовательскуюФункцию(ФункцияСсылка, П1 = Неопределено, П2 = Неопределено,
														П3 = Неопределено, П4 = Неопределено, 
														П5 = Неопределено, П6 = Неопределено, 
														П7 = Неопределено, П8 = Неопределено,
														П9 = Неопределено, П10 = Неопределено) Экспорт
	// АПК:134-вкл
													
    // Инициализируем Результат функции.
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ФункцияСсылка) Тогда
		
		// Инициализируем переменные функции.
		Переменные   = Новый Структура;
		Для каждого СтрокаТаблицы Из ФункцияСсылка.Переменные Цикл
			
			Если НЕ Переменные.Свойство(СтрокаТаблицы.Имя) Тогда
				
				Переменные.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Готовим код функции.
		КодФункции 			= "";
		ПараметрыФункции 	= ФункцияСсылка.ПараметрыФункции;		
		
		Для Каждого Параметр Из ПараметрыФункции Цикл
			// Сначала инициализируем переменную.
			ДобавитьСтрокуКТексту(КодФункции, Параметр.Наименование + " = " + "П" + Строка(ПараметрыФункции.Индекс(Параметр) + 1) + ";");
		КонецЦикла;
		
		ДобавитьСтрокуКТексту(КодФункции, ФункцияСсылка.КодПодпрограммы);		
		
		// Выполняем пользовательскую функцию.
		Попытка			
			// АПК:487-выкл ВыполнитьВБезопасномРежиме не используется, т.к. выполняется безопасный код.
			Выполнить(КодФункции);	
			// АПК:487-вкл
		Исключение			
			ТекстСообщения = НСтр("ru = 'Ошибка вычисления пользовательской функции ""%1"". Описание ошибки: %2';
								  |en = 'Error of calculating the user-defined function ""%1."" Description of error: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ФункцияСсылка), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);			
		КонецПопытки;		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыполнитьПользовательскуюФункцию()

// Выполняет произвольный код с параметрами.
// 
// Параметры:
//  Текст функции       - Произвольный.
//  СтруктураПараметров - Массив структур (Номер, Значение).
//  Переменные          - Структура - Структура переменных функции.
// 
// Возвращаемое значение:
//   Неопределено, в случае успешного выполнения, Описание ошибки, в случае неудачи.
//
Функция ВыполнитьПользовательскуюФункциюСПараметрами(ТекстФункции, СтруктураПараметров, Переменные) Экспорт
	
	// Служебные переменные для передачи параметров функции.
	Перем П1, П2, П3, П4, П5, П6, П7, П8, П9, П10;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		
		Если Параметр.Номер = 1 Тогда
			П1 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П1");
		ИначеЕсли Параметр.Номер = 2 Тогда
			П2 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П2");
		ИначеЕсли Параметр.Номер = 3 Тогда
			П3 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П3");
		ИначеЕсли Параметр.Номер = 4 Тогда
			П4 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П4");
		ИначеЕсли Параметр.Номер = 5 Тогда
			П5 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П5");
		ИначеЕсли Параметр.Номер = 6 Тогда
			П6 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П6");
		ИначеЕсли Параметр.Номер = 7 Тогда
			П7 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П7");
		ИначеЕсли Параметр.Номер = 8 Тогда
			П8 = Параметр.Значение;	
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П8");
		ИначеЕсли Параметр.Номер = 9 Тогда
			П9 = Параметр.Значение;	
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П9");
		ИначеЕсли Параметр.Номер = 10 Тогда
			П10 = Параметр.Значение;
			ТекстФункции = СтрЗаменить(ТекстФункции, Параметр.Параметр, "П10");
		КонецЕсли;
	КонецЦикла;
	
	Результат = Неопределено;
	
	Попытка
		Выполнить(ТекстФункции);
	Исключение
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ВыполнитьПользовательскуюФункциюСПараметрами()

// Добавляет новую строку "ДобавляемаяСтрока" к тексту "Текст".
// 
// Параметры:
//  Текст             - Строка - Текущий текст.
//  ДобавляемаяСтрока - Строка - Добавляемая строка.
//
Процедура ДобавитьСтрокуКТексту(Текст, ДобавляемаяСтрока) Экспорт
	
	Текст = СтрШаблон("%1%2%3", Текст, ?(СокрЛП(Текст) = "", "", Символы.ПС), ДобавляемаяСтрока);
	
КонецПроцедуры // ДобавитьСтрокуКТексту()

// По массиву типов создается список выбора для быстрого выбора составного типа.
// 
// Параметры:
//  МассивТипов - Массив - Массив типов.
// 
// Возвращаемое значение:
//  СписокЗначений - Список выбора.
//
Функция ПодготовитьСписокВыбораТипа(МассивТипов) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ТекущийТип Из МассивТипов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);
		Если ОбъектМетаданных = Неопределено Тогда
			ТекПредставление = Строка(ТекущийТип);
		Иначе
			ТекПредставление = ОбъектМетаданных.Синоним;
		КонецЕсли;
		
		СписокВыбора.Добавить(ТекущийТип,ТекПредставление);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПодготовитьСписокВыбораТипа()

// Функция определяет имя объекта ссылочного типа по описанию типов.
// 
// Параметры:
//  ОписаниеТипов   - ОписаниеТипов - содержит тип, имя объекта которого нужно определить.
//  ИмяКоллекции    - Строка - имя коллекции объектов метаданных: "Справочники","Документы" и т.п.
//  НачалоИмениТипа - Строка - начало строкового представления типа : "СправочникСсылка", "ДокументСсылка" и т.п.
//
// Возвращаемое значение:
//  РезСтруктура   - Структура (Ключи: "Имя","Синоним","ИмяТипа"; Значения: Строка) 
//                   Неопределено (если имя не удалось определить). 
//
Функция ПолучитьИмяОбъектаПоОписаниюТипов(ОписаниеТипов, ИмяКоллекции, НачалоИмениТипа) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого ТекущийОбъект Из Метаданные[ИмяКоллекции] Цикл
		
		ИмяТипа = СтрШаблон("%1.%2", НачалоИмениТипа, ТекущийОбъект.Имя);
		Если ОписаниеТипов.СодержитТип(Тип(ИмяТипа)) Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("Имя", ТекущийОбъект.Имя);
			Результат.Вставить("Синоним", ТекущийОбъект.Синоним);
			Результат.Вставить("ИмяТипа", ИмяТипа);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьИмяОбъектаПоОписаниюТипов()

// Функция получает имя объекта по имени формы.
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы.
//  
// Возвращаемое значение:
//   Строка - Имя объекта.
// 
Функция ПолучитьИмяОбъектаПоИмениФормы(ИмяФормы, ПолноеИмя = Истина) Экспорт
	
	МассивИмениФормы = СтроковыеФункцииУПОКлиентСервер.РазобратьСтрокуСРазделителями(ИмяФормы, ".");
	Результат = СтрШаблон("%1%2",
		?(ПолноеИмя, СтрШаблон("%1.", МассивИмениФормы.Получить(0)), ""),
		МассивИмениФормы.Получить(1));
		
	Возврат Результат;
	
КонецФункции // ПолучитьИмяОбъектаПоИмениФормы()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьТаблицыПоСпискуИмен(СтруктураОтвета, МассивИменТаблиц, Менеджер)
	
	ОтсутствующиеИменаТаблиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Для Каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Если НЕ СтруктураОтвета.Свойство(ИмяТаблицы) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ИмяТаблицы + " КАК " + ИмяТаблицы;
			Попытка
				СтруктураОтвета.Вставить(ИмяТаблицы, Запрос.Выполнить().Выгрузить());
			Исключение
				СтруктураОтвета.Вставить(ИмяТаблицы, ОписаниеОшибки());
				ОтсутствующиеИменаТаблиц.Добавить(ИмяТаблицы);
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтсутствующиеИменаТаблиц;
	
КонецФункции

Функция НайтиИменаТаблицПоРасположениюСлов(Знач Текст, ПервоеИскомоеСлово, ВтороеИскомоеСлово = "")
	
	СписокИгнорируемыхСимволов = Новый СписокЗначений;
	СписокИгнорируемыхСимволов.Добавить(Символы.ПС);
	СписокИгнорируемыхСимволов.Добавить(Символы.ВК);
	СписокИгнорируемыхСимволов.Добавить(Символы.НПП);
	СписокИгнорируемыхСимволов.Добавить(Символы.Таб);
	СписокИгнорируемыхСимволов.Добавить(" ");
	
	СписокРазделителей = Новый СписокЗначений;
	СписокРазделителей.Добавить("(");
	СписокРазделителей.Добавить(")");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить("&");
	
	НайденныеИмена = Новый Структура;
	ПервоеИскомоеСлово = ВРег(ПервоеИскомоеСлово);
	ВтороеИскомоеСлово = ВРег(ВтороеИскомоеСлово);
	
	Пока Истина Цикл
		
		Найдено = Найти(Текст, " " + ВРег(ПервоеИскомоеСлово) + " ");
		Если Найдено > 0 Тогда
			
			Текст = СокрЛП(Прав(Текст, СтрДлина(Текст) - Найдено - СтрДлина(ПервоеИскомоеСлово) - 1));
			СоставляемоеСлово = "";
			НайденноеСлово = "";
			
			Для НомерСтроки = 1 По СтрДлина(Текст) Цикл
				
				ОчереднойСимвол = Сред(Текст, НомерСтроки, 1);
				
				Если НЕ СписокРазделителей.НайтиПоЗначению(ОчереднойСимвол) = Неопределено Тогда
					
					СоставляемоеСлово = "";
					НайденноеСлово = "";
					
					Прервать;
					
				ИначеЕсли НЕ СписокИгнорируемыхСимволов.НайтиПоЗначению(ОчереднойСимвол) = Неопределено Тогда
					
					Если СоставляемоеСлово = "" Тогда
						Продолжить;
					Иначе
						Если НайденноеСлово = "" Тогда
							
							НайденноеСлово = СоставляемоеСлово;
							СоставляемоеСлово = "";
							
							Если ВтороеИскомоеСлово = "" Тогда
								Прервать;
							КонецЕсли;
							
						Иначе
							
							Если НЕ СоставляемоеСлово = ВтороеИскомоеСлово Тогда
								НайденноеСлово = "";
							КонецЕсли;
							
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
				Иначе
					СоставляемоеСлово = СоставляемоеСлово + ОчереднойСимвол;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ НайденноеСлово = "" Тогда
				НайденныеИмена.Вставить(НайденноеСлово, Найдено);
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеИмена;
	
КонецФункции

Процедура ПостроитьДеревоЗначенийИзМакетаРекурсивно(ТабличныйДокумент, СтрокиДерева,
	КоличествоПунктовВОтступе, КоличествоСтрок, ИнкрементСтрок, ПрошлыйОтступ, КоличествоКолонок)

	Пока ИнкрементСтрок <= КоличествоСтрок Цикл

		Отступ = ТабличныйДокумент.Область(СтрШаблон("R%1C1", ИнкрементСтрок)).Отступ;

		Если ПрошлыйОтступ = Отступ Тогда
			НоваяСтрокаДерева = СтрокиДерева.Добавить();

			Для ИнкрементКолонок = 1 По КоличествоКолонок Цикл
				НаименованиеЯчейки = СтрШаблон("R%1C%2", ИнкрементСтрок, ИнкрементКолонок);
				ТекстЯчейки = СокрЛП(ТабличныйДокумент.Область(НаименованиеЯчейки).Текст);

				НоваяСтрокаДерева[ИнкрементКолонок - 1] = ТекстЯчейки;

			КонецЦикла;

			ИнкрементСтрок = ИнкрементСтрок + 1;
			ПрошлыйОтступ = Отступ;
		ИначеЕсли ПрошлыйОтступ < Отступ Тогда
			ПрошлыйОтступ = Отступ;
			ПостроитьДеревоЗначенийИзМакетаРекурсивно(ТабличныйДокумент, НоваяСтрокаДерева.Строки,
				КоличествоПунктовВОтступе, КоличествоСтрок, ИнкрементСтрок, ПрошлыйОтступ, КоличествоКолонок);
		Иначе // ПрошлыйОтступ > Отступ
			ПрошлыйОтступ = ПрошлыйОтступ - КоличествоПунктовВОтступе;
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Возвращает таблицу для вывода.
// Функция относится к процедуре "ПроверитьДублированиеЗначенийВТабличнойЧасти".
// 
// Параметры:
//  ТаблицаСДанными - ТаблицаЗначений. 
// 
Функция ПроставитьНомераСтрокДляЗначений(ТаблицаСДанными)
	
	ТаблицаДляПеребора = ТаблицаСДанными.Скопировать();
	ТаблицаДляПеребора.Свернуть("Значение");
	
	ТаблицаДляВывода = ТаблицаСДанными.Скопировать();
	ТаблицаДляВывода.Очистить();
	
	Для Каждого ТекЗначение ИЗ ТаблицаДляПеребора Цикл
		
		ДанныеПоиска = ТаблицаСДанными.НайтиСтроки(Новый Структура("Значение", ТекЗначение.Значение));
		Если ЗначениеЗаполнено(ДанныеПоиска) Тогда
			
			НомераСтрок = "№ ";
			Для Каждого СтрокаПоиска ИЗ ДанныеПоиска Цикл
				НомераСтрок = НомераСтрок + ?(НомераСтрок = "№ ", "", ", ") + СтрокаПоиска.НомераСтрок;
			КонецЦикла;
			
			НоваяСтрока = ТаблицаДляВывода.Добавить();
			НоваяСтрока.Значение = ТекЗначение.Значение;
			НоваяСтрока.НомераСтрок = НомераСтрок;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляВывода;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции