#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Формирует структуру заголовков для элемента справочника.
//
Функция ПолучитьНазваниеПодпрограммыСПараметрами(Ссылка) Экспорт
	
	// Значения элементов структуры:
	// 
	// 	- ЗаголовокФункции: Функция МояФункция(Параметр1, Параметр2).
	// 	- НазваниеСПараметрами: МояФункция(Параметр1, Параметр2).
	// 	- ОписаниеПараметров: // Типы входных параметров: 
	// 						  // Параметр1 - 'Число'.
	// 						  // Параметр2 - 'Строка'.
	СтруктураПараметров = Новый Структура("ЗаголовокФункции, НазваниеСПараметрами, ОписаниеПараметров");
	
	ТекстНазвания = СтрШаблон("%1(", СокрЛП(Ссылка.Наименование));
	ТекстКомментария = "// Типы входных параметров: ";
	
	Для Каждого Параметр Из Ссылка.ПараметрыФункции Цикл
		
		ТекстНазвания = ТекстНазвания + СокрЛП(Параметр.Наименование);
		
		Если Параметр.НеОбязательныйДляЗаполнения Тогда
			ТекстНазвания = СтрШаблон("%1 = Неопределено", ТекстНазвания);
		КонецЕсли;
		
		Если ТипЗнч(Ссылка) = Тип("ДанныеФормыСтруктура") Тогда
			ОписаниеТипаПараметра = "";
		Иначе
			ОписаниеТипаПараметра = СокрЛП(Параметр.ТипПараметра.Получить());
		КонецЕсли;
		
		ТекстКомментария = СтрШаблон("%1%2// %3 - '%4'",
			ТекстКомментария, Символы.ПС, СокрЛП(Параметр.Наименование), ОписаниеТипаПараметра);
		
		Если Не Параметр.НомерСтроки = Ссылка.ПараметрыФункции.Количество() Тогда
			ТекстНазвания = СтрШаблон("%1, ", ТекстНазвания);
		КонецЕсли;
	КонецЦикла;
	
	ТекстНазвания = СтрШаблон("%1)", ТекстНазвания);
	
	СтруктураПараметров.ЗаголовокФункции = СтрШаблон("Функция %1", ТекстНазвания);
	СтруктураПараметров.НазваниеСПараметрами = ТекстНазвания;
	СтруктураПараметров.ОписаниеПараметров = ТекстКомментария;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Заполняет параметры функции для переданного объекта.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, СправочникОбъект.__ПользовательскиеФункции.
//
Процедура ЗаполнитьПараметры(Объект) Экспорт
	
	Если Объект.Контекст = Перечисления.КонтекстыВыполненияПользовательскихФункций.ЗагрузкаЭксель Тогда
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыЗагрузкаЭксель(Объект);
	ИначеЕсли Объект.Контекст = Перечисления.КонтекстыВыполненияПользовательскихФункций.REST Тогда
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыREST(Объект);
	ИначеЕсли Объект.Контекст = Перечисления.КонтекстыВыполненияПользовательскихФункций.ЗаданияБотов Тогда
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыЗаданияБотов(Объект);
	ИначеЕсли Объект.Контекст = Перечисления.КонтекстыВыполненияПользовательскихФункций.КомандыБотов Тогда
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыКомандыБотов(Объект);
	ИначеЕсли Объект.Контекст = Перечисления.КонтекстыВыполненияПользовательскихФункций.СообщенияБотов Тогда
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыСообщенияБотов(Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет добавляет параметр при отсутствии.
//
// Параметры:
//  ИмяПараметра - Строка.
//
Процедура НайтиДобавитьПараметр(Объект, ИмяПараметра)
	
	ДанныеПоиска = Объект.ПараметрыФункции.НайтиСтроки(
		Новый Структура("Наименование", ИмяПараметра));
	
	Если Не ДанныеПоиска.Количество() Тогда
		НоваяСтрока = Объект.ПараметрыФункции.Добавить();
		НоваяСтрока.Наименование = ИмяПараметра;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет параметры, необходимые для контекста ЗагрузкаЭксель.
// 
Процедура ДобавитьПараметрыЗагрузкаЭксель(Объект)
	
	НайтиДобавитьПараметр(Объект, "СтрокаДанных");
	НайтиДобавитьПараметр(Объект, "СтрокаExcel");
	
КонецПроцедуры

// Добавляет параметры, необходимые для контекста REST.
// 
Процедура ДобавитьПараметрыREST(Объект)
	
	НайтиДобавитьПараметр(Объект, "Параметр_КонтекстЗапроса");
	НайтиДобавитьПараметр(Объект, "Параметр_КонтекстЗамера");
	
КонецПроцедуры

// Добавляет параметры, необходимые для контекста ЗаданияБотов.
//
Процедура ДобавитьПараметрыЗаданияБотов(Объект)
	
	НайтиДобавитьПараметр(Объект, "Параметр_ЗаданиеБота");
	НайтиДобавитьПараметр(Объект, "Параметр_Получатель");
	НайтиДобавитьПараметр(Объект, "Параметр_Вложенность");
	НайтиДобавитьПараметр(Объект, "Параметр_ОтветПользователя");
	
КонецПроцедуры

// Добавляет параметры, необходимые для контекста КомандыБотов.
//
Процедура ДобавитьПараметрыКомандыБотов(Объект)
	
	НайтиДобавитьПараметр(Объект, "Параметр_Бот");
	НайтиДобавитьПараметр(Объект, "Параметр_Получатель");
	НайтиДобавитьПараметр(Объект, "Параметр_Вложенность");
	НайтиДобавитьПараметр(Объект, "Параметр_ЗаданиеБота");
	НайтиДобавитьПараметр(Объект, "Параметр_ИдентификаторЧата");
	НайтиДобавитьПараметр(Объект, "Параметр_НаименованиеЧата");
	
КонецПроцедуры

// Добавляет параметры, необходимые для контекста СообщенияБотов.
//
Процедура ДобавитьПараметрыСообщенияБотов(Объект)
	
	НайтиДобавитьПараметр(Объект, "Параметр_Бот");
	НайтиДобавитьПараметр(Объект, "Параметр_Получатель");
	НайтиДобавитьПараметр(Объект, "Параметр_ТекстСообщения");
	НайтиДобавитьПараметр(Объект, "Параметр_НаСообщение");
	НайтиДобавитьПараметр(Объект, "Параметр_ИдентификаторЧата");
	НайтиДобавитьПараметр(Объект, "Параметр_НаименованиеЧата");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
