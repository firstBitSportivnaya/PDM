// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
//
//	Ограничение.Текст =
//	"ПрисоединитьДополнительныеТаблицы
//	|	ЭтотСписок КАК КадровыеИзменения
//	|
//	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
//	|	ПО Пользователи.ФизическоеЛицо = КадровыеИзменения.Сотрудник
//	|;
//	|РазрешитьЧтение
//	|ГДЕ
//	|	ЭтоАвторизованныйПользователь(Пользователи.Ссылка) ИЛИ ЗначениеРазрешено(КадровыеИзменения.Отдел) ИЛИ ЗначениеРазрешено(КадровыеИзменения.Проект)
//	|;
//	|РазрешитьИзменениеЕслиРазрешеноЧтение
//	|ГДЕ
//	|	ЗначениеРазрешено(КадровыеИзменения.Отдел) ИЛИ ЗначениеРазрешено(КадровыеИзменения.Проект)";
//
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Подготовить параметры проведения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.КадровыеИзменения - ссылка на документ
//  Отказ          - Булево
// 
// Возвращаемое значение:
//  Структура - Подготовить параметры проведения
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	Реквизиты        = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Подготовить дерево профессиональных компетенций.
// 
// Параметры:
//  ВидРевью Вид ревью
//  ДатаДокумента Дата документа
//  Сотрудник Сотрудник
//  ДокументСсылка - Неопределено - Документ ссылка
// 
// Возвращаемое значение:
//  Строка - Подготовить дерево профессиональных компетенций
Функция ПодготовитьДеревоПрофессиональныхКомпетенций(ВидРевью, ДатаДокумента, Сотрудник, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоКомпетенций = Новый ДеревоЗначений;
	
	СхемаКомпоновкиДанных = Документы.ОценкаСотрудников.ПолучитьМакет("ПостроительХардКомпетенций");
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("Компетенции");
	
	ЭтоПервичноеЗаполнение = ВидРевью = Справочники.ВидыОценкиСотрудников.ПервичнаяОценка;
	ЭтоОценкаПроизводительности = ВидРевью = Справочники.ВидыОценкиСотрудников.ОценкаПроизводительности;
	
	Если НаборДанных <> Неопределено Тогда
		Если ЭтоПервичноеЗаполнение Тогда
			НаборДанных.Запрос = ТекстЗапросаПостроителяПрофессиональныхКомпетенцийДляПервички();
		Иначе
			Если ЭтоОценкаПроизводительности Тогда
				НаборДанных.Запрос = ТекстЗапросаПостроителяПрофессиональныхКомпетенций();
			Иначе
				НаборДанных.Запрос = ТекстЗапросаПостроителяПрофессиональныхКомпетенций(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилища);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", ДокументСсылка);
	Если Не ЭтоПервичноеЗаполнение Тогда
		
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Период"				, ДатаДокумента);
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник"				, Сотрудник);
		
		Если Не ЭтоОценкаПроизводительности Тогда
			КомпетенцииВидаРевью = ВидРевью.Компетенции.ВыгрузитьКолонку("Компетенция");
			НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Компетенции", КомпетенцииВидаРевью);
			
			ТаблицаГрадаций = ОценкаСотрудниковСервер.ПолучитьГрадацииВремениПоКомпетенциям(КомпетенцииВидаРевью);
			НастройкиКомпоновки.Структура[0].Отбор.Элементы[0].Использование = Ложь;
		Иначе
			ТаблицаГрадаций = ОценкаСотрудниковСервер.ПолучитьГрадацииВремениПоКомпетенциям(
				, Перечисления.ТипыКомпетенций.Профессиональные);
		КонецЕсли;
		
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ТЗГрадацииКомпетенций"	, ТаблицаГрадаций);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоКомпетенций);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоКомпетенций, Новый УникальныйИдентификатор);
	
КонецФункции

// Подготовить дерево универсальных компетенций.
// 
// Параметры:
//  ВидРевью Вид ревью
//  ДатаДокумента Дата документа
//  Сотрудник Сотрудник
//  ДокументСсылка - Неопределено - Документ ссылка
// 
// Возвращаемое значение:
//  Неопределено - Подготовить дерево универсальных компетенций
Функция ПодготовитьДеревоУниверсальныхКомпетенций(ВидРевью, ДатаДокумента, Сотрудник, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоКомпетенций = Новый ДеревоЗначений;
	
	СхемаКомпоновкиДанных = Документы.ОценкаСотрудников.ПолучитьМакет("ПостроительСофтКомпетенций");
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("Компетенции");
	
	ЭтоОценкаПроизводительности = ВидРевью = Справочники.ВидыОценкиСотрудников.ОценкаПроизводительности;
	
	Если НаборДанных <> Неопределено Тогда
		Если ЭтоОценкаПроизводительности Тогда
			НаборДанных.Запрос = ТекстЗапросаПостроителяУниверсальныхКомпетенций();
		Иначе
			НаборДанных.Запрос = ТекстЗапросаПостроителяУниверсальныхКомпетенций(Истина);
		КонецЕсли;
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилища);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник"	, Сотрудник);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка"	, ДокументСсылка);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Период"	, ДатаДокумента);
	
	Если Не ЭтоОценкаПроизводительности Тогда
		КомпетенцииВидаРевью = ВидРевью.Компетенции.ВыгрузитьКолонку("Компетенция");
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Компетенции", КомпетенцииВидаРевью);
		
		НастройкиКомпоновки.Структура[0].Отбор.Элементы[0].Использование = Ложь;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоКомпетенций);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоКомпетенций, Новый УникальныйИдентификатор);
	
КонецФункции

// Подготовить дерево сертификатов.
// 
// Параметры:
//  Сотрудник Сотрудник
//  ЭтоПервичноеЗаполнение - Булево - Это первичное заполнение
//  ДокументСсылка - Неопределено - Документ ссылка
// 
// Возвращаемое значение:
//  Строка - Подготовить дерево сертификатов
Функция ПодготовитьДеревоСертификатов(Сотрудник, ЭтоПервичноеЗаполнение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоСертификатов = Новый ДеревоЗначений;
	
	СхемаКомпоновкиДанных = Документы.ОценкаСотрудников.ПолучитьМакет("ПостроительСертификатов");
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("Сертификаты");
	
	Если НаборДанных <> Неопределено Тогда
		Если ЭтоПервичноеЗаполнение Тогда
			НаборДанных.Запрос = ТекстЗапросаПостроителяСертификатовДляПервички();
		Иначе
			НаборДанных.Запрос = ТекстЗапросаПостроителяСертификатов();
		КонецЕсли;
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилища);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", ДокументСсылка);
	Если Не ЭтоПервичноеЗаполнение Тогда
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник", Сотрудник);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоСертификатов);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоСертификатов, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
		
#Область СлужебныеПроцедурыИФункции

// Текст запроса реквизиты документа.
// 
// Параметры:
//  НомераТаблиц - Структура - Номера таблиц
// 
// Возвращаемое значение:
//  Строка - Текст запроса реквизиты документа
Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты"	, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты"					, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОценкаСотрудников.Дата,
	|	ОценкаСотрудников.Номер,
	|	ОценкаСотрудников.ПометкаУдаления,
	|	ОценкаСотрудников.Проведен,
	|	ОценкаСотрудников.Ссылка,
	|	ОценкаСотрудников.ВидРевью,
	|	ОценкаСотрудников.СотрудникиСписком,
	|	ОценкаСотрудников.Ответственный,
	|	ОценкаСотрудников.Комментарий
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОценкаСотрудников КАК ОценкаСотрудников
	|ГДЕ
	|	ОценкаСотрудников.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата,
	|	Реквизиты.Номер,
	|	Реквизиты.ПометкаУдаления,
	|	Реквизиты.Проведен,
	|	Реквизиты.Ссылка,
	|	Реквизиты.ВидРевью,
	|	Реквизиты.СотрудникиСписком,
	|	Реквизиты.Ответственный,
	|	Реквизиты.Комментарий
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

// Текст запроса временные таблицы документа.
// 
// Параметры:
//  НомераТаблиц - Структура - Номера таблиц
//  Реквизиты - ТаблицаЗначений - Реквизиты
// 
// Возвращаемое значение:
//  Строка - Текст запроса временные таблицы документа
Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ОценкаСотрудниковОценки.Ссылка КАК Ссылка,
	|	ОценкаСотрудниковОценки.НомерСтроки,
	|	ОценкаСотрудниковОценки.Сотрудник,
	|	ОценкаСотрудниковОценки.Компетенция,
	|	ОценкаСотрудниковОценки.УровеньЗнания,
	|	ОценкаСотрудниковОценки.Оценка,
	|	ОценкаСотрудниковОценки.Комментарий
	|ИЗ
	|	Документ.ОценкаСотрудников.Оценки КАК ОценкаСотрудниковОценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОценкаСотрудниковОценки.Ссылка = &Ссылка"
	+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	НомераТаблиц.Вставить("ВременнаяТаблицаОценки", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ОценкаСотрудниковСертификаты.Ссылка КАК Ссылка,
	|	ОценкаСотрудниковСертификаты.НомерСтроки,
	|	ОценкаСотрудниковСертификаты.Сотрудник,
	|	ОценкаСотрудниковСертификаты.Сертификат,
	|	ОценкаСотрудниковСертификаты.ДатаПолучения
	|ИЗ
	|	Документ.ОценкаСотрудников.Сертификаты КАК ОценкаСотрудниковСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОценкаСотрудниковСертификаты.Ссылка = &Ссылка"
	+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСертификаты", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПостроителяПрофессиональныхКомпетенций(ОтборПоКомпетенциям = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗГрадацииКомпетенций.Компетенция КАК Справочник.Компетенции) КАК Компетенция,
	|	ВЫРАЗИТЬ(ТЗГрадацииКомпетенций.УровеньЗнания КАК Перечисление.УровниЗнания) КАК УровеньЗнания,
	|	ВЫРАЗИТЬ(ТЗГрадацииКомпетенций.ЧасовОт КАК ЧИСЛО(7, 2)) КАК ЧасовОт,
	|	ВЫРАЗИТЬ(ТЗГрадацииКомпетенций.ЧасовДо КАК ЧИСЛО(7, 2)) КАК ЧасовДо
	|ПОМЕСТИТЬ ВТГрадацииКомпетенций
	|ИЗ
	|	&ТЗГрадацииКомпетенций КАК ТЗГрадацииКомпетенций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Компетенции.Ссылка КАК Компетенция
	|ПОМЕСТИТЬ ВТКомпетенции
	|ИЗ
	|	Справочник.Компетенции КАК Компетенции
	|ГДЕ
	|	&ОтборПоКомпетенциям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОценкаСотрудниковОценки.Компетенция КАК Компетенция,
	|	ОценкаСотрудниковОценки.УровеньЗнания КАК УровеньЗнания,
	|	ОценкаСотрудниковОценки.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ОценкаСотрудников.Оценки КАК ОценкаСотрудниковОценки
	|ГДЕ
	|	ОценкаСотрудниковОценки.Ссылка = &Ссылка
	|	И ОценкаСотрудниковОценки.Компетенция В
	|		(ВЫБРАТЬ
	|			ВТКомпетенции.Компетенция
	|		ИЗ
	|			ВТКомпетенции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетВремениПоКомпетенциямОбороты.Период КАК Период,
	|	УчетВремениПоКомпетенциямОбороты.Компетенция КАК Компетенция,
	|	УчетВремениПоКомпетенциямОбороты.ЧасовОборот КАК Часов
	|ПОМЕСТИТЬ ВТОборотыУчетаВремениКомпетенций
	|ИЗ
	|	РегистрНакопления.УчетВремениПоКомпетенциям.Обороты(, &Период, Регистратор, Сотрудник = &Сотрудник
	|	И Компетенция В
	|		(ВЫБРАТЬ
	|			ВТКомпетенции.Компетенция
	|		ИЗ
	|			ВТКомпетенции)) КАК УчетВремениПоКомпетенциямОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОборотыУчетаВремениКомпетенций.Период КАК Период,
	|	ВТОборотыУчетаВремениКомпетенций.Компетенция КАК Компетенция
	|ПОМЕСТИТЬ ВТУчетВремениКомпетенцийСрезПоследних
	|ИЗ
	|	ВТОборотыУчетаВремениКомпетенций КАК ВТОборотыУчетаВремениКомпетенций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОборотыУчетаВремениКомпетенций КАК ВТОборотыУчетаВремениКомпетенций1
	|		ПО ВТОборотыУчетаВремениКомпетенций.Компетенция = ВТОборотыУчетаВремениКомпетенций1.Компетенция
	|СГРУППИРОВАТЬ ПО
	|	ВТОборотыУчетаВремениКомпетенций.Компетенция,
	|	ВТОборотыУчетаВремениКомпетенций.Период
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВТОборотыУчетаВремениКомпетенций1.Период) = ВТОборотыУчетаВремениКомпетенций.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОборотыУчетаВремениКомпетенций.Компетенция КАК Компетенция,
	|	СУММА(ВТОборотыУчетаВремениКомпетенций.Часов) КАК Часов
	|ПОМЕСТИТЬ ВТНарастающийИтогКомпетенций
	|ИЗ
	|	ВТОборотыУчетаВремениКомпетенций КАК ВТОборотыУчетаВремениКомпетенций
	|СГРУППИРОВАТЬ ПО
	|	ВТОборотыУчетаВремениКомпетенций.Компетенция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУчетВремениКомпетенцийСрезПоследних.Период КАК Период,
	|	ВТУчетВремениКомпетенцийСрезПоследних.Компетенция КАК Компетенция,
	|	ВТГрадацииКомпетенций.УровеньЗнания КАК ПрошлыйУровень,
	|	ВТНарастающийИтогКомпетенций.Часов КАК Часов
	|ПОМЕСТИТЬ ВТРассчитанныеКомпетенции
	|ИЗ
	|	ВТУчетВремениКомпетенцийСрезПоследних КАК ВТУчетВремениКомпетенцийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНарастающийИтогКомпетенций КАК ВТНарастающийИтогКомпетенций
	|		ПО ВТУчетВремениКомпетенцийСрезПоследних.Компетенция = ВТНарастающийИтогКомпетенций.Компетенция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрадацииКомпетенций КАК ВТГрадацииКомпетенций
	|		ПО ВТНарастающийИтогКомпетенций.Компетенция = ВТГрадацииКомпетенций.Компетенция
	|		И (ВТГрадацииКомпетенций.ЧасовОт <= ВТНарастающийИтогКомпетенций.Часов
	|		И ВТНарастающийИтогКомпетенций.Часов < ВТГрадацииКомпетенций.ЧасовДо
	|		ИЛИ ВТНарастающийИтогКомпетенций.Часов >= ВТГрадацииКомпетенций.ЧасовОт
	|		И ВТГрадацииКомпетенций.ЧасовДо = 0)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыОценкиСотрудниковСрезПоследних.Период КАК Период,
	|	РезультатыОценкиСотрудниковСрезПоследних.Компетенция КАК Компетенция,
	|	РезультатыОценкиСотрудниковСрезПоследних.УровеньЗнания КАК ПрошлыйУровень
	|ПОМЕСТИТЬ ВТРезультатыПоследнегоРевью
	|ИЗ
	|	РегистрСведений.РезультатыОценкиСотрудников.СрезПоследних(&Период, Сотрудник = &Сотрудник
	|	И Компетенция В
	|		(ВЫБРАТЬ
	|			ВТКомпетенции.Компетенция
	|		ИЗ
	|			ВТКомпетенции)) КАК РезультатыОценкиСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРассчитанныеКомпетенции.Период КАК Период,
	|	ВТРассчитанныеКомпетенции.Компетенция КАК Компетенция,
	|	ВТРассчитанныеКомпетенции.ПрошлыйУровень КАК ПрошлыйУровень
	|ПОМЕСТИТЬ ВТОбъединениеАвтоматаИОценки
	|ИЗ
	|	ВТРассчитанныеКомпетенции КАК ВТРассчитанныеКомпетенции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТРезультатыПоследнегоРевью.Период,
	|	ВТРезультатыПоследнегоРевью.Компетенция,
	|	ВТРезультатыПоследнегоРевью.ПрошлыйУровень
	|ИЗ
	|	ВТРезультатыПоследнегоРевью КАК ВТРезультатыПоследнегоРевью
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбъединениеАвтоматаИОценки.Компетенция КАК Компетенция,
	|	ВТОбъединениеАвтоматаИОценки.ПрошлыйУровень КАК ПрошлыйУровень
	|ПОМЕСТИТЬ ВТИтогиАвтоматаИРевью
	|ИЗ
	|	ВТОбъединениеАвтоматаИОценки КАК ВТОбъединениеАвтоматаИОценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъединениеАвтоматаИОценки КАК ВТОбъединениеАвтоматаИОценки1
	|		ПО ВТОбъединениеАвтоматаИОценки.Компетенция = ВТОбъединениеАвтоматаИОценки1.Компетенция
	|СГРУППИРОВАТЬ ПО
	|	ВТОбъединениеАвтоматаИОценки.Компетенция,
	|	ВТОбъединениеАвтоматаИОценки.ПрошлыйУровень,
	|	ВТОбъединениеАвтоматаИОценки.Период
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВТОбъединениеАвтоматаИОценки1.Период) = ВТОбъединениеАвтоматаИОценки.Период
	|	И НЕ ВТОбъединениеАвтоматаИОценки.ПрошлыйУровень ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	ВТИтогиАвтоматаИРевью.Компетенция КАК Компетенция,
	|	ВТИтогиАвтоматаИРевью.ПрошлыйУровень КАК ПрошлыйУровень,
	|	ЕСТЬNULL(ВТРассчитанныеКомпетенции.Часов, 0) КАК Часов
	|ПОМЕСТИТЬ ВТИтогСЧасами
	|ИЗ
	|	ВТИтогиАвтоматаИРевью КАК ВТИтогиАвтоматаИРевью
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРассчитанныеКомпетенции КАК ВТРассчитанныеКомпетенции
	|		ПО ВТИтогиАвтоматаИРевью.Компетенция = ВТРассчитанныеКомпетенции.Компетенция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКомпетенции.Компетенция КАК Компетенция,
	|	ЕСТЬNULL(ВТДанныеДокумента.УровеньЗнания, ЕСТЬNULL(ВТИтогСЧасами.ПрошлыйУровень,
	|		ЗНАЧЕНИЕ(Перечисление.УровниЗнания.НеИзучено))) КАК УровеньЗнания,
	|	ЕСТЬNULL(ВТИтогСЧасами.ПрошлыйУровень, ЗНАЧЕНИЕ(Перечисление.УровниЗнания.НеИзучено)) КАК ПрошлыйУровень,
	|	ЕСТЬNULL(ВТИтогСЧасами.Часов, 0) КАК Часов,
	|	ЕСТЬNULL(ВТДанныеДокумента.Комментарий, """") КАК Комментарий
	|ИЗ
	|	ВТКомпетенции КАК ВТКомпетенции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтогСЧасами КАК ВТИтогСЧасами
	|		ПО (ВТКомпетенции.Компетенция = ВТИтогСЧасами.Компетенция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ПО (ВТКомпетенции.Компетенция = ВТДанныеДокумента.Компетенция)";
	
	Если ОтборПоКомпетенциям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоКомпетенциям", "Компетенции.Ссылка В ИЕРАРХИИ (&Компетенции)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоКомпетенциям", "Компетенции.ТипКомпетенции = ЗНАЧЕНИЕ(Перечисление.ТипыКомпетенций.Профессиональные)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПостроителяПрофессиональныхКомпетенцийДляПервички()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Компетенции.Ссылка КАК Компетенция,
	|	ЕСТЬNULL(ОценкаСотрудниковОценки.УровеньЗнания, ЗНАЧЕНИЕ(Перечисление.УровниЗнания.НеИзучено)) КАК УровеньЗнания,
	|	ЗНАЧЕНИЕ(Перечисление.УровниЗнания.ПустаяСсылка) КАК ПрошлыйУровень,
	|	0 КАК Часов,
	|	ЕСТЬNULL(ОценкаСотрудниковОценки.Комментарий, """") КАК Комментарий
	|ИЗ
	|	Справочник.Компетенции КАК Компетенции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОценкаСотрудников.Оценки КАК ОценкаСотрудниковОценки
	|		ПО Компетенции.Ссылка = ОценкаСотрудниковОценки.Компетенция
	|		И ОценкаСотрудниковОценки.Ссылка = &Ссылка
	|ГДЕ
	|	Компетенции.ТипКомпетенции = ЗНАЧЕНИЕ(Перечисление.ТипыКомпетенций.Профессиональные)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПостроителяУниверсальныхКомпетенций(ОтборПоКомпетенциям = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Компетенции.Ссылка КАК Компетенция
	|ПОМЕСТИТЬ ВТКомпетенции
	|ИЗ
	|	Справочник.Компетенции КАК Компетенции
	|ГДЕ
	|	&ОтборПоКомпетенциям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценкаСотрудниковОценки.Компетенция КАК Компетенция,
	|	ОценкаСотрудниковОценки.Оценка КАК Оценка,
	|	ОценкаСотрудниковОценки.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ОценкаСотрудников.Оценки КАК ОценкаСотрудниковОценки
	|ГДЕ
	|	ОценкаСотрудниковОценки.Ссылка = &Ссылка
	|	И ОценкаСотрудниковОценки.Компетенция В
	|		(ВЫБРАТЬ
	|			ВТКомпетенции.Компетенция
	|		ИЗ
	|			ВТКомпетенции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыОценкиСотрудников.Компетенция КАК Компетенция,
	|	РезультатыОценкиСотрудников.Оценка КАК Оценка
	|ПОМЕСТИТЬ ВТДанныеРегистра
	|ИЗ
	|	РегистрСведений.РезультатыОценкиСотрудников КАК РезультатыОценкиСотрудников
	|ГДЕ
	|	РезультатыОценкиСотрудников.Сотрудник = &Сотрудник
	|	И РезультатыОценкиСотрудников.Компетенция В
	|		(ВЫБРАТЬ
	|			ВТКомпетенции.Компетенция
	|		ИЗ
	|			ВТКомпетенции)
	|	И РезультатыОценкиСотрудников.Период < &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКомпетенции.Компетенция КАК Компетенция,
	|	ЕСТЬNULL(ВТДанныеДокумента.Оценка, ЕСТЬNULL(ВТДанныеРегистра.Оценка, ЗНАЧЕНИЕ(Перечисление.Оценки.ПустаяСсылка))) КАК
	|		Оценка,
	|	ЕСТЬNULL(ВТДанныеДокумента.Комментарий, """") КАК Комментарий
	|ПОМЕСТИТЬ ВТДоПодсчетаСреднего
	|ИЗ
	|	ВТКомпетенции КАК ВТКомпетенции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистра КАК ВТДанныеРегистра
	|		ПО (ВТКомпетенции.Компетенция = ВТДанныеРегистра.Компетенция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ПО (ВТКомпетенции.Компетенция = ВТДанныеДокумента.Компетенция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоПодсчетаСреднего.Компетенция КАК Компетенция,
	|	ВТДоПодсчетаСреднего.Оценка КАК Оценка,
	|	ЕСТЬNULL(СоответствияОбъектовИБ.Объект3, 0) КАК СреднийБалл,
	|	ВТДоПодсчетаСреднего.Комментарий КАК Комментарий
	|ИЗ
	|	ВТДоПодсчетаСреднего КАК ВТДоПодсчетаСреднего
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИБ КАК СоответствияОбъектовИБ
	|		ПО (ВТДоПодсчетаСреднего.Оценка = (ВЫРАЗИТЬ(СоответствияОбъектовИБ.Объект1 КАК Перечисление.Оценки))
	|		И СоответствияОбъектовИБ.ТипСоответствия = ЗНАЧЕНИЕ(Перечисление.ТипСоответствияОбъектовИБ.Оценки))";
	
	Если ОтборПоКомпетенциям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоКомпетенциям", "Компетенции.Ссылка В ИЕРАРХИИ (&Компетенции)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоКомпетенциям", "Компетенции.ТипКомпетенции = ЗНАЧЕНИЕ(Перечисление.ТипыКомпетенций.Универсальные)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПостроителяСертификатов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Сертификат,
	|	Сертификаты.Компетенция КАК Компетенция
	|ПОМЕСТИТЬ ВТСертификаты
	|ИЗ
	|	Справочник.Сертификаты КАК Сертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценкаСотрудниковСертификаты.Сертификат КАК Сертификат,
	|	ОценкаСотрудниковСертификаты.ДатаПолучения КАК ДатаПолучения
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ОценкаСотрудников.Сертификаты КАК ОценкаСотрудниковСертификаты
	|ГДЕ
	|	ОценкаСотрудниковСертификаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыСотрудников.Сертификат КАК Сертификат,
	|	СертификатыСотрудников.ДатаПолучения КАК ДатаПолучения
	|ПОМЕСТИТЬ ВТСертификатыСотрудника
	|ИЗ
	|	РегистрСведений.СертификатыСотрудников КАК СертификатыСотрудников
	|ГДЕ
	|	СертификатыСотрудников.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСертификаты.Сертификат КАК Сертификат,
	|	ВТСертификаты.Компетенция КАК Компетенция,
	|	ВЫБОР
	|		КОГДА ВТДанныеДокумента.Сертификат ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ВТСертификатыСотрудника.Сертификат ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Присутствует,
	|	ЕСТЬNULL(ВТДанныеДокумента.ДатаПолучения, ЕСТЬNULL(ВТСертификатыСотрудника.ДатаПолучения, ДАТАВРЕМЯ(1, 1, 1, 0, 0,
	|		0))) КАК ДатаПолучения,
	|	ВЫБОР
	|		КОГДА ВТДанныеДокумента.Сертификат ЕСТЬ NULL
	|			И НЕ ВТСертификатыСотрудника.Сертификат ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзРегистра
	|ИЗ
	|	ВТСертификаты КАК ВТСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ПО (ВТСертификаты.Сертификат = ВТДанныеДокумента.Сертификат)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСертификатыСотрудника КАК ВТСертификатыСотрудника
	|		ПО (ВТСертификаты.Сертификат = ВТСертификатыСотрудника.Сертификат)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПостроителяСертификатовДляПервички()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Сертификат,
	|	Сертификаты.Компетенция КАК Компетенция,
	|	ВЫБОР
	|		КОГДА ОценкаСотрудниковСертификаты.Сертификат ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК Присутствует,
	|	ЕСТЬNULL(ОценкаСотрудниковСертификаты.ДатаПолучения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПолучения,
	|	ЛОЖЬ КАК ИзРегистра
	|ИЗ
	|	Справочник.Сертификаты КАК Сертификаты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОценкаСотрудников.Сертификаты КАК ОценкаСотрудниковСертификаты
	|		ПО Сертификаты.Ссылка = ОценкаСотрудниковСертификаты.Сертификат
	|		И ОценкаСотрудниковСертификаты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли