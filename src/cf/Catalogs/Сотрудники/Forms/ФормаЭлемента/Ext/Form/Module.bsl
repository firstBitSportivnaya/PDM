// @strict-types
#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
//@skip-warning
&НаКлиенте
Перем ИдентификаторЗамераЗапись;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ПодготовитьФормуНаСервере();
	
	ЗаполнитьЧасовойПояс();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераЗапись = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераЗапись, "СотрудникиЗапись");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура КомпетенцииИСертификатыСотрудникаНажатие(Элемент)

	СтандартнаяОбработка = Ложь;

	ФормаОтчета = ПолучитьФорму("Отчет.КомпетенцииСертификатыСотрудников.Форма");

	КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;

	НастройкиОтчета = ПолучитьНастройкиОтчетаПоКомпетенциям(КомпоновщикНастроек);
	
//	НовыйОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	НовыйОтбор.ЛевоеЗначение = ПолеНоменклатура.Поле;
//	НовыйОтбор.ПравоеЗначение = ЭлементыФормы.Список.ТекущаяСтрока;
//	НовыйОтбор.Использование = Истина;

	ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	ФормаОтчета.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура НачалоРаботыС1СПриИзменении(Элемент)

	ТекущиееВремя = ОбщегоНазначенияКлиент.ДатаСеанса();

	Если Объект.НачалоРаботыС1С > ТекущиееВремя Тогда
		Объект.НачалоРаботыС1С = ТекущиееВремя;
	КонецЕсли;

	РассчитатьОбщийСтажРаботыС1С();

КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	
	ЗаполнитьЧасовойПояс();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область СлужебныеПроцедурыИФункции

//@skip-check module-unused-method
#Область СтандартныеПодсистемы

// Подключаемый выполнить команду.
// 
// Параметры:
//  Команда - КомандаФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);

КонецПроцедуры

// Подключаемый выполнить команду на сервере.
// 
// Параметры:
//  Контекст  - Структура
//  Результат - Структура
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);

КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СотрудникиМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
		ОценкаСотрудниковСервер.ПересчитатьНарастающиеИтоги(СотрудникиМассив);
	КонецЕсли;
	
	РассчитатьОбщийСтажРаботыС1С();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧасовойПояс()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Города.ЧасовойПояс КАК ЧасовойПояс
		|ИЗ
		|	Справочник.Города КАК Города
		|ГДЕ
		|	Города.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Город);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПоясСмещение = ДобавитьСмещение(Выборка.ЧасовойПояс);
		ЧасовойПояс = ПоясСмещение;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьСмещение(ОписаниеЧасовогоПояса)
	
	СмещениеДатой = Дата(1, 1, 1) + СмещениеСтандартногоВремени(ОписаниеЧасовогоПояса); 
	ПредставлениеСмещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(UTC+%1)",
		Формат(СмещениеДатой, "ДФ=HH:mm; ДП=00:00;"));
	
	ПредставлениеЧасовогоПояса = ПредставлениеСмещения + " " + ОписаниеЧасовогоПояса;

	Возврат ПредставлениеЧасовогоПояса
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиОтчетаПоКомпетенциям(КомпоновщикНастроек)

	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();

	ПараметрПериод = Новый ПараметрКомпоновкиДанных("Период");
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(
		ПараметрПериод, ТекущаяДатаСеанса());

	ПолеСотрудникКомпетенции = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Сотрудник");

	НовыйОтбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = ПолеСотрудникКомпетенции.Поле;
	НовыйОтбор.ПравоеЗначение = Объект.Ссылка;
	НовыйОтбор.Использование = Истина;

	ПолеСотрудникСофтКомпетенции = КомпоновщикНастроек.Настройки.Структура.Получить(
		1).Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Сотрудник");

	НовыйОтбор = НастройкиКомпоновки.Структура.Получить(1).Настройки.Отбор.Элементы.Добавить(Тип(
		"ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = ПолеСотрудникСофтКомпетенции.Поле;
	НовыйОтбор.ПравоеЗначение = Объект.Ссылка;
	НовыйОтбор.Использование = Истина;
	
	ПолеСотрудникСертификаты = КомпоновщикНастроек.Настройки.Структура.Получить(
		2).Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Сотрудник");

	НовыйОтбор = НастройкиКомпоновки.Структура.Получить(2).Настройки.Отбор.Элементы.Добавить(Тип(
		"ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = ПолеСотрудникСертификаты.Поле;
	НовыйОтбор.ПравоеЗначение = Объект.Ссылка;
	НовыйОтбор.Использование = Истина;

	Возврат НастройкиКомпоновки;

КонецФункции

&НаСервере
Процедура РассчитатьОбщийСтажРаботыС1С()

	Если Не ЗначениеЗаполнено(Объект.НачалоРаботыС1С) Тогда
		Возврат;
	КонецЕсли;
	
	РазницаЛет = Год(ТекущаяДатаСеанса()) - Год(Объект.НачалоРаботыС1С);
	РазницаМесяцев = Месяц(ТекущаяДатаСеанса()) - Месяц(Объект.НачалоРаботыС1С);
	
	Если РазницаМесяцев < 0 Тогда
		РазницаМесяцев = 12 + РазницаМесяцев;
		РазницаЛет = РазницаЛет - 1;
	КонецЕсли;
	
	Если РазницаЛет < 0 Тогда
		Возврат;
	КонецЕсли;

	Если РазницаЛет = 0 Тогда
		ШаблонСтроки = "%1 %2";
		ОбщийСтаж = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтроки, РазницаМесяцев,
			СтроковыеФункцииУПОКлиентСервер.ПолучитьСклонениеПредставленияМесяца(РазницаМесяцев));
		
	ИначеЕсли РазницаМесяцев = 0 Тогда
		ШаблонСтроки = "%1 %2";
		ОбщийСтаж = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтроки, РазницаЛет,
			СтроковыеФункцииУПОКлиентСервер.ПолучитьСклонениеПредставленияГода(РазницаЛет));
		
	Иначе
		ШаблонСтроки = "%1 %2 %3 %4";
		ОбщийСтаж = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтроки, РазницаЛет,
			СтроковыеФункцииУПОКлиентСервер.ПолучитьСклонениеПредставленияГода(РазницаЛет),
			РазницаМесяцев,
			СтроковыеФункцииУПОКлиентСервер.ПолучитьСклонениеПредставленияМесяца(РазницаМесяцев));
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти // СлужебныеПроцедурыИФункции
