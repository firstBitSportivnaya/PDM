
#Область СлужебныйПрограммныйИнтерфейс

Процедура СохранитьОписаниеСервисов() Экспорт
	
	КлючОбъекта = ФиктивныйКлючОбъекта();
	ИмяПользователя = ФиктивноеИмяПользователя();
	
	// Полная очистка сохраненных описаний
	ТекущиеОписанияСервисов = ХранилищеСистемныхНастроек.ПолучитьСписок(ФиктивныйКлючОбъекта(), ФиктивноеИмяПользователя());
	
	Для Каждого Элемент Из ТекущиеОписанияСервисов Цикл
		
		КлючСервиса = Элемент.Значение;
		
		ХранилищеСистемныхНастроек.Удалить(ФиктивныйКлючОбъекта(), КлючСервиса, ФиктивноеИмяПользователя());
		
	КонецЦикла;
	
	// Формирование новых описаний
	ОписанияСервисов = ОписаниеRESTСервер.ПолучитьОписанияСервисов();
	
	Для Каждого КЗ Из ОписанияСервисов Цикл
		
		КлючСервиса = КЗ.Ключ;
		ОписаниеСервиса = КЗ.Значение;
		
		ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючСервиса, ОписаниеСервиса, , ИмяПользователя);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОписаниеСервиса(КлючСервиса) Экспорт
	
	КлючОбъекта = ФиктивныйКлючОбъекта();
	ИмяПользователя = ФиктивноеИмяПользователя();
	
	ОписаниеСервиса = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючСервиса, , ИмяПользователя);
	
	Возврат ОписаниеСервиса;
	
КонецФункции

Функция ПолучитьТаблицуСтандартныхКодовОтвета() Экспорт
	
	ТаблицаКодов = ИнтеграцииСервер.ПодготовитьТаблицуКодовОтветаHTTP();
	ТаблицаКодов.Колонки.Добавить("ТипОтвета", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОтветовREST"));
	ТаблицаКодов.Колонки.Добавить("ТипДанных", ОбщегоНазначения.ОписаниеТипаСтрока("25"));
	
	Для Каждого СтрокаКода Из ТаблицаКодов Цикл
		
		Если СтрокаКода.КодОтвета >= 100 И СтрокаКода.КодОтвета < 300 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
		ИначеЕсли СтрокаКода.КодОтвета >= 300 И СтрокаКода.КодОтвета < 400 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.СообщениеОПеренаправлении;
		ИначеЕсли СтрокаКода.КодОтвета = 400 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНеКорректныйЗапрос;
		ИначеЕсли СтрокаКода.КодОтвета = 401 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНеАвторизован;
		ИначеЕсли СтрокаКода.КодОтвета = 403 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНетДоступа;
		ИначеЕсли СтрокаКода.КодОтвета = 404 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНеНайдено;
		ИначеЕсли СтрокаКода.КодОтвета = 405 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаМетодНеПоддерживается;
		ИначеЕсли СтрокаКода.КодОтвета > 400 И СтрокаКода.КодОтвета < 500 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ДругаяКлиентскаяОшибка;
		ИначеЕсли СтрокаКода.КодОтвета >= 500 Тогда
			СтрокаКода.ТипОтвета = Перечисления.ТипыОтветовREST.ВнутренняяОшибка;
		КонецЕсли;
		
		СтрокаКода.ТипДанных = "Строка";
		
	КонецЦикла;
	
	Возврат ТаблицаКодов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФиктивныйКлючОбъекта()
	Возврат "e82c8ffc-194b-4221-8df5-171e9f9b7f52";
КонецФункции // ФиктивныйКлючОбъекта

Функция ФиктивноеИмяПользователя()
	Возврат "b9ae07e8-c406-404d-bd01-c373d8753286";
КонецФункции // ФиктивноеИмяПользователя

#КонецОбласти